
lab2.elf:     file format elf32-littlenios2
lab2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00011908 memsz 0x00011908 flags r-x
    LOAD off    0x00012928 vaddr 0x02011928 paddr 0x020135e4 align 2**12
         filesz 0x00001cbc memsz 0x00001cbc flags rw-
    LOAD off    0x000152a0 vaddr 0x020152a0 paddr 0x020152a0 align 2**12
         filesz 0x00000000 memsz 0x0001acd8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010e80  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008f4  02011034  02011034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cbc  02011928  020135e4  00012928  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0001acd8  020152a0  020152a0  000152a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000145e4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00014608  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014c6  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024b0e  00000000  00000000  00016846  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008121  00000000  00000000  0003b354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015270  00000000  00000000  00043475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001aa0  00000000  00000000  000586e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024b4  00000000  00000000  0005a188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c47a  00000000  00000000  0005c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00068ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00068b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d4a7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006d4aa  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006d4af  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006d4b0  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006d4b4  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006d4b8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0006d4bc  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006d4c7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0006d4d2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  0006d4dd  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000015  00000000  00000000  0006d4ea  2**0
                  CONTENTS, READONLY
 28 .jdi          00004111  00000000  00000000  0006d4ff  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
02011034 l    d  .rodata	00000000 .rodata
02011928 l    d  .rwdata	00000000 .rwdata
020152a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 Open_I2C.c
00000000 l    df *ABS*	00000000 main.c
0200089c l     F .text	00000054 handle_button_interrupts
00000000 l    df *ABS*	00000000 wm8731.c
00000000 l    df *ABS*	00000000 s_ceil.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 dp-bit.c
020036b4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02003fa4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02004a3c l     F .text	00000058 __sprint_r
020114d6 l     O .rodata	00000010 blanks.3452
020114c6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02006ab8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020084e0 l     F .text	00000058 std
020085ec l     F .text	00000008 __fp_lock
020085f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02011a28 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
020135a8 l     O .rwdata	00000004 charset
02011508 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02011650 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200d2ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200d30c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200d410 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0200d6f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200d7d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200d934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200db64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020135d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200de4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020123e4 l     O .rwdata	00001060 jtag_uart_0
02013444 l     O .rwdata	00000120 lcd_display
0200df50 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200e190 l     F .text	00000228 altera_avalon_jtag_uart_irq
0200e3b8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
020135d4 l     O .rwdata	00000004 colstart
0200ea34 l     F .text	000000b8 lcd_write_command
0200eaec l     F .text	000000d4 lcd_write_data
0200ebc0 l     F .text	000000d8 lcd_clear_screen
0200ec98 l     F .text	00000214 lcd_repaint_screen
0200eeac l     F .text	000000e0 lcd_scroll_up
0200ef8c l     F .text	000002e4 lcd_handle_escape
0200f7ac l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200fa0c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200fe8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020102b0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02010400 l     F .text	000000f8 alt_file_locked
02010684 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
020117a5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02010db0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
02010f64 l     F .text	00000040 alt_sim_halt
0200a238 g     F .text	00000094 _mprec_log10
0200a324 g     F .text	00000088 __any_on
0200ba20 g     F .text	00000070 _isatty_r
02011628 g     O .rodata	00000028 __mprec_tinytens
0200d994 g     F .text	0000006c alt_main
0200493c g     F .text	0000008c strcpy
020152a8 g     O .bss	00000001 BS_BootSig_32
020152ac g     O .bss	00000004 FAT32ClusEntryVal
020047cc g     F .text	000000a0 _puts_r
0202fce8 g     O .bss	00000100 alt_irq
0200ba90 g     F .text	00000078 _lseek_r
020152b0 g     O .bss	00000001 MBR_Bootable
020135e4 g       *ABS*	00000000 __flash_rwdata_start
0200ce68 g     F .text	00000088 __eqdf2
02013596 g     O .rwdata	00000005 acmd51
0202ff78 g       *ABS*	00000000 __alt_heap_start
020014b4 g     F .text	000001a4 get_rel_sector
02004754 g     F .text	00000044 printf
020152b1 g     O .bss	00000008 BS_FilSysType_16
020152b9 g     O .bss	00000001 BPB_SecPerClus
0200b594 g     F .text	00000068 __sseek
02008548 g     F .text	000000a4 __sinit
02009254 g     F .text	00000084 _setlocale_r
02008648 g     F .text	0000009c __sfmoreglue
0200da20 g     F .text	00000020 __malloc_unlock
02001f04 g     F .text	00000174 nextsong
020153f8 g     O .bss	00004e20 cc
0200072c g     F .text	00000010 I2C_Read_Ctrl
02009d4c g     F .text	000000e0 memmove
02008638 g     F .text	00000010 _cleanup
0200a3ac g     F .text	000000bc _Balloc
02002cd8 g     F .text	00000148 reverse
020152bc g     O .bss	00000004 BPB_RootEntCnt
020002dc g     F .text	000000f8 LCD_Test
02003bb8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
020152c0 g     O .bss	00000004 FATOffset
02000de4 g     F .text	00000474 SD_card_init
0200327c g     F .text	00000214 ceil
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200b9ac g     F .text	00000074 _fstat_r
020153b4 g     O .bss	00000004 errno
02003490 g     F .text	00000224 floor
02001258 g     F .text	0000025c SD_read_lba
020153c0 g     O .bss	00000004 alt_argv
0201b564 g       *ABS*	00000000 _gp
0200dcf8 g     F .text	00000030 usleep
020152c4 g     O .bss	00000004 BPB_RootClus
02012264 g     O .rwdata	00000180 alt_fd_list
020152c8 g     O .bss	00000004 BPB_ExtFlags
02000c50 g     F .text	00000194 info_bs
0201a218 g     O .bss	00000014 response_buffer
020108a8 g     F .text	00000094 alt_find_dev
02009cac g     F .text	000000a0 memcpy
020152cc g     O .bss	00000004 FirstRootDirSecNum
0200862c g     F .text	0000000c _cleanup_r
02003c40 g     F .text	000000f8 __floatsidf
02010388 g     F .text	00000078 alt_io_redirect
0200d000 g     F .text	00000088 __ltdf2
02011034 g       *ABS*	00000000 __DTOR_END__
0200486c g     F .text	00000014 puts
020152d0 g     O .bss	00000001 BS_DrvNum_32
02010888 g     F .text	00000020 altera_nios2_irq_init
0200a188 g     F .text	000000b0 __ratio
020009f4 g     F .text	000001ec response_R
02000be0 g     F .text	0000004c Ncc
0200e5d0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004798 g     F .text	00000034 _printf_r
020040e0 g     F .text	00000008 __udivsi3
0200d630 g     F .text	000000c4 isatty
020152d4 g     O .bss	00000004 BPB_SecPerTrk
02011538 g     O .rodata	000000c8 __mprec_tens
020152d8 g     O .bss	00000004 BPB_HiddSec
02009230 g     F .text	00000008 __locale_charset
02010b2c g     F .text	00000090 alt_icache_flush
020153a8 g     O .bss	00000004 __malloc_top_pad
020135a4 g     O .rwdata	00000004 __mb_cur_max
02009238 g     F .text	0000000c _localeconv_r
020152dc g     O .bss	00000004 mask
0200ab10 g     F .text	0000003c __i2b
02008c14 g     F .text	0000049c __sfvwrite_r
020152e0 g     O .bss	00000008 BS_FilSysType_32
020152e8 g     O .bss	00000001 MBR_Partition_Type
0200b51c g     F .text	00000070 _sbrk_r
0200bb08 g     F .text	00000078 _read_r
02011e28 g     O .rwdata	0000000c __lc_ctype
020135c4 g     O .rwdata	00000004 alt_max_fd
020044bc g     F .text	00000138 __unpack_d
0200b888 g     F .text	00000110 _fclose_r
02013582 g     O .rwdata	00000005 cmd16
020084ac g     F .text	00000034 fflush
020153ac g     O .bss	00000004 __malloc_max_sbrked_mem
020152e9 g     O .bss	00000003 BS_JmpBoot
020152ec g     O .bss	00000004 FirstDataSector
0200d470 g     F .text	000001c0 alt_irq_register
02000860 g     F .text	0000003c isEOF
02003b44 g     F .text	00000074 __adddf3
020152f0 g     O .bss	00000001 BPB_NumFATs
0200a068 g     F .text	00000120 __b2d
0200c1ec g     F .text	00000660 __umoddi3
020152f4 g     O .bss	00000004 BPB_FATSz16
0200d840 g     F .text	000000f4 lseek
020135a0 g     O .rwdata	00000004 _global_impure_ptr
020152f8 g     O .bss	00000004 FAT16ClusEntryVal
0200aeb8 g     F .text	000005f4 _realloc_r
0202ff78 g       *ABS*	00000000 __bss_end
020101b8 g     F .text	000000f8 alt_iic_isr_register
0201077c g     F .text	0000010c alt_tick
0200bb80 g     F .text	0000066c __udivdi3
02011600 g     O .rodata	00000028 __mprec_bigtens
0200ad98 g     F .text	00000120 __s2b
02003e10 g     F .text	00000194 __floatunsidf
02013569 g     O .rwdata	00000005 cmd55
02009f88 g     F .text	00000060 __mcmp
020152fc g     O .bss	00000004 ThisFATEntOffset
02013564 g     O .rwdata	00000005 cmd0
020135e0 g     O .rwdata	00000004 __ctype_ptr
02008614 g     F .text	00000018 __fp_lock_all
02010170 g     F .text	00000048 alt_ic_irq_enabled
020106e4 g     F .text	00000098 alt_alarm_stop
02013591 g     O .rwdata	00000005 acmd41
020153b8 g     O .bss	00000004 alt_irq_active
02000808 g     F .text	00000028 I2C_Init
020000ec g     F .exceptions	000000c8 alt_irq_handler
0201223c g     O .rwdata	00000028 alt_dev_null
02000504 g     F .text	000001f8 LCD_Display
020003d4 g     F .text	00000130 LCD_File_Buffering
0200fdbc g     F .text	0000001c alt_dcache_flush_all
02009e54 g     F .text	00000070 __hi0bits
02003d38 g     F .text	000000d8 __fixdfsi
02000790 g     F .text	0000001c I2C_Write_Period
02015300 g     O .bss	00000004 BS_VOLID_16
020135e4 g       *ABS*	00000000 __ram_rwdata_end
020135bc g     O .rwdata	00000008 alt_dev_list
0200dd28 g     F .text	00000124 write
02011928 g       *ABS*	00000000 __ram_rodata_end
0200d338 g     F .text	000000d8 fstat
0200ac78 g     F .text	00000120 __pow5mult
0201539c g     O .bss	00000004 __nlocale_changed
02001658 g     F .text	00000440 search_for_filetype
020040e8 g     F .text	00000008 __umodsi3
0202ff78 g       *ABS*	00000000 end
02015304 g     O .bss	00000004 BPB_BytsPerSec
0200f270 g     F .text	0000053c altera_avalon_lcd_16207_write
0201357d g     O .rwdata	00000005 cmd9
02015308 g     O .bss	00000004 BPB_FATSz32
0200e0d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
02011030 g       *ABS*	00000000 __CTOR_LIST__
02800000 g       *ABS*	00000000 __alt_stack_pointer
0200fa7c g     F .text	00000090 alt_avalon_timer_sc_init
02004128 g     F .text	00000080 __clzsi2
0200e7f4 g     F .text	00000240 altera_avalon_jtag_uart_write
02008538 g     F .text	00000004 __sfp_lock_acquire
02009bc8 g     F .text	000000e4 memchr
02004a94 g     F .text	00001ec4 ___vfprintf_internal_r
02008900 g     F .text	00000314 _free_r
0201a22c g     O .bss	0000001c df
0201a248 g     O .bss	0000000b BS_VOLLab_32
02010db4 g     F .text	000001b0 __call_exitprocs
020027fc g     F .text	00000130 half_speed
020153a0 g     O .bss	00000004 __mlocale_changed
020135b0 g     O .rwdata	00000004 __malloc_sbrk_base
020001b4 g     F .text	0000003c _start
020153c8 g     O .bss	00000004 _alt_tick_rate
0200a770 g     F .text	0000014c __lshift
020025a0 g     F .text	00000108 init_mbr
020153cc g     O .bss	00000004 _alt_nticks
0201530c g     O .bss	00000004 FATSz
0200da40 g     F .text	00000124 read
0200dee0 g     F .text	00000070 alt_sys_init
02015310 g     O .bss	00000004 BPB_BkBootSec
02010c7c g     F .text	00000134 __register_exitproc
02015314 g     O .bss	00000004 FAT12ClusEntryVal
0201a253 g     O .bss	00000200 buffer
02015318 g     O .bss	00000001 BS_BootSig_16
0200073c g     F .text	00000024 I2C_Read_Period
02013587 g     O .rwdata	00000005 cmd17
0200a8bc g     F .text	00000254 __multiply
0200e468 g     F .text	00000074 altera_avalon_jtag_uart_close
020040f0 g     F .text	00000038 __mulsi3
02011928 g       *ABS*	00000000 __ram_rwdata_start
02011034 g       *ABS*	00000000 __ram_rodata_start
020153d0 g     O .bss	00000028 __malloc_current_mallinfo
0200a468 g     F .text	0000017c __d2b
0200df88 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02010a5c g     F .text	000000d0 alt_get_fd
02000780 g     F .text	00000010 I2C_Write_Ctrl
0200fc60 g     F .text	0000015c alt_busy_sleep
020045f4 g     F .text	000000c8 __fpcmp_parts_d
0201531c g     O .bss	00000004 FATClusEntryVal
0200b818 g     F .text	00000070 _close_r
0200070c g     F .text	00000010 I2C_Read_Status
02010c08 g     F .text	00000074 memcmp
0200e038 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0202ff78 g       *ABS*	00000000 __alt_stack_base
0201a453 g     O .bss	00015888 dlybuf
0200e080 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0200697c g     F .text	0000013c __swsetup_r
0200cc10 g     F .text	00000258 __divdf3
020086e4 g     F .text	000000f0 __sfp
0200a2cc g     F .text	00000058 __copybits
0200071c g     F .text	00000010 I2C_Read_RX
02015320 g     O .bss	00000004 button2
02011e34 g     O .rwdata	00000408 __malloc_av_
02008544 g     F .text	00000004 __sinit_lock_release
0200c84c g     F .text	000003c4 __muldf3
0200b678 g     F .text	00000060 __sread
0201093c g     F .text	00000120 alt_find_file
0200fdd8 g     F .text	000000b4 alt_dev_llist_insert
0200da00 g     F .text	00000020 __malloc_lock
0200dc3c g     F .text	000000bc sbrk
020082b0 g     F .text	000001fc _fflush_r
0200b750 g     F .text	000000c8 _calloc_r
02015324 g     O .bss	00000004 BPB_TotSec16
02015328 g     O .bss	00000005 cmd_buffer
0201532d g     O .bss	00000001 read_status
02011928 g     O .rwdata	00000100 __divsi3_table
020152a0 g       *ABS*	00000000 __bss_start
0201358c g     O .rwdata	00000005 acmd6
02000204 g     F .text	00000078 LCD_Init
0201356e g     O .rwdata	00000005 cmd2
020046bc g     F .text	00000098 memset
0201532e g     O .bss	00000008 BS_OEMName
02002e20 g     F .text	000002fc main
020153c4 g     O .bss	00000004 alt_envp
020153b0 g     O .bss	00000004 __malloc_max_total_mem
0200dfe0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0200f878 g     F .text	0000013c altera_avalon_lcd_16207_init
020001f0 g     F .text	00000014 LCD_Line2
0200b58c g     F .text	00000008 __sclose
02800000 g       *ABS*	00000000 __alt_heap_limit
0200b998 g     F .text	00000014 fclose
0202fde8 g     O .bss	00000190 _atexit0
02006cfc g     F .text	000015b4 _dtoa_r
02009488 g     F .text	00000740 _malloc_r
02015336 g     O .bss	00000006 FATType
0201533c g     O .bss	00000004 ThisFATSecNum
020135c8 g     O .rwdata	00000004 alt_errno
02009178 g     F .text	000000b8 _fwalk
020152a4 g     O .bss	00000004 file_number
02015340 g     O .bss	00000004 button3
02004020 g     F .text	00000060 __divsi3
02015344 g     O .bss	00000004 MBR_Partition_Len
02011358 g     O .rodata	00000014 __thenan_df
020087d4 g     F .text	0000012c _malloc_trim_r
02011034 g       *ABS*	00000000 __CTOR_END__
02004880 g     F .text	000000bc strcmp
02011034 g       *ABS*	00000000 __flash_rodata_start
02011034 g       *ABS*	00000000 __DTOR_LIST__
02015348 g     O .bss	00000003 MBR_End_End
02002a80 g     F .text	00000258 delay
0200cef0 g     F .text	00000088 __nedf2
0200deac g     F .text	00000034 alt_irq_init
0200027c g     F .text	00000060 LCD_Show_Text
0200dbc4 g     F .text	00000078 alt_release_fd
02013573 g     O .rwdata	00000005 cmd3
0201136c g     O .rodata	00000100 __clz_tab
020153a4 g     O .bss	00000004 _PathLocale
02000770 g     F .text	00000010 I2C_Write_TX
02010bbc g     F .text	00000014 atexit
0200b6d8 g     F .text	00000078 _write_r
020092d8 g     F .text	0000001c setlocale
0201359c g     O .rwdata	00000004 _impure_ptr
020153bc g     O .bss	00000004 alt_argc
0200ff50 g     F .text	00000064 _do_dtors
0201534c g     O .bss	00000004 sw
020007ac g     F .text	0000005c I2C_Send
02015350 g     O .bss	00000004 BPB_TotSec32
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000020 g       .exceptions	00000000 alt_irq_entry
02009fe8 g     F .text	00000080 __ulp
0200b4ac g     F .text	00000040 __isinfd
020085fc g     F .text	00000018 __fp_unlock_all
0200f9b4 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
020135b4 g     O .rwdata	00000008 alt_fs_list
02015354 g     O .bss	00000004 DataSec
02002078 g     F .text	00000528 init_bs
02015358 g     O .bss	00000004 TotSec
0201535c g     O .bss	00000004 CountofClusters
020008f0 g     F .text	00000104 send_cmd
02000020 g       *ABS*	00000000 __ram_exceptions_start
02009244 g     F .text	00000010 localeconv
020152a0 g     O .bss	00000004 file_count
02015360 g     O .bss	00000004 length_cc
02001a98 g     F .text	0000020c CalcFATSecAndOffset
0200ffe4 g     F .text	00000050 alt_ic_isr_register
02015364 g     O .bss	00000004 button1
020135e4 g       *ABS*	00000000 _edata
0202ff78 g       *ABS*	00000000 _end
02015368 g     O .bss	00000004 RootDirSectors
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0200e4dc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020100d0 g     F .text	000000a0 alt_ic_irq_disable
0201536c g     O .bss	00000004 BPB_RsvdSecCnt
02015370 g     O .bss	00000002 RCA
0200b5fc g     F .text	0000007c __swrite
020135ac g     O .rwdata	00000004 __malloc_trim_threshold
02010bd0 g     F .text	00000038 exit
020090b0 g     F .text	000000c8 _fwalk_reent
0200a5e4 g     F .text	0000018c __mdiff
02015374 g     O .bss	00000004 BPB_NumHeads
02004080 g     F .text	00000060 __modsi3
02800000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200853c g     F .text	00000004 __sfp_lock_release
02015378 g     O .bss	00000004 BS_VOLID_32
020116a4 g     O .rodata	00000101 _ctype_
020006fc g     F .text	00000010 I2C_Read_CMD
02013578 g     O .rwdata	00000005 cmd7
0201537c g     O .bss	00000001 BS_DrvNum_16
02010fa4 g     F .text	00000020 _exit
0200b4ec g     F .text	00000030 __isnand
0200fb0c g     F .text	00000154 alt_alarm_start
0200d088 g     F .text	00000124 __muldi3
02000830 g     F .text	00000030 FirstSectorofCluster
020092f4 g     F .text	00000194 __smakebuf_r
02015380 g     O .bss	00000004 prevsw
020049c8 g     F .text	00000074 strlen
02015384 g     O .bss	00000004 BPB_FSInfo
020104f8 g     F .text	0000018c open
02015388 g     O .bss	00000001 BPB_Media
0200cf78 g     F .text	00000088 __gedf2
0201538c g     O .bss	00000004 stop
02015390 g     O .bss	00000003 MBR_Start_Sector
0200311c g     F .text	00000160 init_audio_codec
0200ffb4 g     F .text	00000030 alt_icache_flush_all
0200292c g     F .text	00000154 normal_speed
020135cc g     O .rwdata	00000004 alt_priority_mask
02001d84 g     F .text	00000180 prevsong
02015394 g     O .bss	00000004 BPB_FSVer
02010034 g     F .text	0000009c alt_ic_irq_enable
02006958 g     F .text	00000024 __vfprintf_internal
0202fcdb g     O .bss	0000000b BS_VOLLab_16
02003ac4 g     F .text	00000080 __subdf3
02000760 g     F .text	00000010 I2C_Write_CMD
02009ec4 g     F .text	000000c4 __lo0bits
020135d8 g     O .rwdata	00000008 alt_alarm_list
0200feec g     F .text	00000064 _do_ctors
02000c2c g     F .text	00000024 Ncr
02001ca4 g     F .text	000000e0 build_cluster_chain
020026a8 g     F .text	00000154 double_speed
0200d1ac g     F .text	00000100 close
0200d754 g     F .text	00000080 alt_load
020041a8 g     F .text	00000314 __pack_d
02015398 g     O .bss	00000004 MBR_BS_Location
00000000  w      *UND*	00000000 free
02008540 g     F .text	00000004 __sinit_lock_acquire
0200ab4c g     F .text	0000012c __multadd
02009e2c g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406d14 	ori	at,at,436
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__reset-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c080f4 	movhi	r3,515
 2000134:	18ff3a04 	addi	r3,r3,-792
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c080f4 	movhi	r3,515
 200014c:	18ff3a04 	addi	r3,r3,-792
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b4:	06c0a034 	movhi	sp,640
    ori sp, sp, %lo(__alt_stack_pointer)
 20001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001bc:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001c0:	d6ad5914 	ori	gp,gp,46436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c4:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001c8:	1094a814 	ori	r2,r2,21152

    movhi r3, %hi(__bss_end)
 20001cc:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 20001d0:	18ffde14 	ori	r3,r3,65400

    beq r2, r3, 1f
 20001d4:	10c00326 	beq	r2,r3,20001e4 <_start+0x30>

0:
    stw zero, (r2)
 20001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e0:	10fffd36 	bltu	r2,r3,20001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e4:	200d7540 	call	200d754 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	200d9940 	call	200d994 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <LCD_Line2>:
 20001f0:	00c03004 	movi	r3,192
 20001f4:	00800404 	movi	r2,16
 20001f8:	10c00035 	stwio	r3,0(r2)
 20001fc:	0101f404 	movi	r4,2000
 2000200:	200dcf81 	jmpi	200dcf8 <usleep>

02000204 <LCD_Init>:
 2000204:	defffd04 	addi	sp,sp,-12
 2000208:	dc800115 	stw	r18,4(sp)
 200020c:	00800e04 	movi	r2,56
 2000210:	04800404 	movi	r18,16
 2000214:	dfc00215 	stw	ra,8(sp)
 2000218:	dc400015 	stw	r17,0(sp)
 200021c:	90800035 	stwio	r2,0(r18)
 2000220:	0441f404 	movi	r17,2000
 2000224:	8809883a 	mov	r4,r17
 2000228:	200dcf80 	call	200dcf8 <usleep>
 200022c:	00c00304 	movi	r3,12
 2000230:	90c00035 	stwio	r3,0(r18)
 2000234:	8809883a 	mov	r4,r17
 2000238:	200dcf80 	call	200dcf8 <usleep>
 200023c:	00c00044 	movi	r3,1
 2000240:	90c00035 	stwio	r3,0(r18)
 2000244:	8809883a 	mov	r4,r17
 2000248:	200dcf80 	call	200dcf8 <usleep>
 200024c:	00c00184 	movi	r3,6
 2000250:	90c00035 	stwio	r3,0(r18)
 2000254:	8809883a 	mov	r4,r17
 2000258:	200dcf80 	call	200dcf8 <usleep>
 200025c:	00c02004 	movi	r3,128
 2000260:	90c00035 	stwio	r3,0(r18)
 2000264:	8809883a 	mov	r4,r17
 2000268:	dfc00217 	ldw	ra,8(sp)
 200026c:	dc800117 	ldw	r18,4(sp)
 2000270:	dc400017 	ldw	r17,0(sp)
 2000274:	dec00304 	addi	sp,sp,12
 2000278:	200dcf81 	jmpi	200dcf8 <usleep>

0200027c <LCD_Show_Text>:
 200027c:	defffc04 	addi	sp,sp,-16
 2000280:	dc800215 	stw	r18,8(sp)
 2000284:	dc400115 	stw	r17,4(sp)
 2000288:	dc000015 	stw	r16,0(sp)
 200028c:	2023883a 	mov	r17,r4
 2000290:	0021883a 	mov	r16,zero
 2000294:	04800604 	movi	r18,24
 2000298:	dfc00315 	stw	ra,12(sp)
 200029c:	00000506 	br	20002b4 <LCD_Show_Text+0x38>
 20002a0:	18800007 	ldb	r2,0(r3)
 20002a4:	90800035 	stwio	r2,0(r18)
 20002a8:	0101f404 	movi	r4,2000
 20002ac:	200dcf80 	call	200dcf8 <usleep>
 20002b0:	84000044 	addi	r16,r16,1
 20002b4:	8809883a 	mov	r4,r17
 20002b8:	20049c80 	call	20049c8 <strlen>
 20002bc:	8c07883a 	add	r3,r17,r16
 20002c0:	80bff736 	bltu	r16,r2,20002a0 <LCD_Show_Text+0x24>
 20002c4:	dfc00317 	ldw	ra,12(sp)
 20002c8:	dc800217 	ldw	r18,8(sp)
 20002cc:	dc400117 	ldw	r17,4(sp)
 20002d0:	dc000017 	ldw	r16,0(sp)
 20002d4:	dec00404 	addi	sp,sp,16
 20002d8:	f800283a 	ret

020002dc <LCD_Test>:
 20002dc:	00808074 	movhi	r2,513
 20002e0:	10840d04 	addi	r2,r2,4148
 20002e4:	00c08074 	movhi	r3,513
 20002e8:	18c41204 	addi	r3,r3,4168
 20002ec:	12400317 	ldw	r9,12(r2)
 20002f0:	11000017 	ldw	r4,0(r2)
 20002f4:	11400117 	ldw	r5,4(r2)
 20002f8:	11800217 	ldw	r6,8(r2)
 20002fc:	1a800317 	ldw	r10,12(r3)
 2000300:	19c00017 	ldw	r7,0(r3)
 2000304:	18800117 	ldw	r2,4(r3)
 2000308:	1a000217 	ldw	r8,8(r3)
 200030c:	defff404 	addi	sp,sp,-48
 2000310:	dc800a15 	stw	r18,40(sp)
 2000314:	dc400915 	stw	r17,36(sp)
 2000318:	dc000815 	stw	r16,32(sp)
 200031c:	dfc00b15 	stw	ra,44(sp)
 2000320:	d9000415 	stw	r4,16(sp)
 2000324:	d9400515 	stw	r5,20(sp)
 2000328:	d9800615 	stw	r6,24(sp)
 200032c:	da400715 	stw	r9,28(sp)
 2000330:	d9c00015 	stw	r7,0(sp)
 2000334:	d8800115 	stw	r2,4(sp)
 2000338:	da000215 	stw	r8,8(sp)
 200033c:	da800315 	stw	r10,12(sp)
 2000340:	0021883a 	mov	r16,zero
 2000344:	20002040 	call	2000204 <LCD_Init>
 2000348:	dc400404 	addi	r17,sp,16
 200034c:	04800604 	movi	r18,24
 2000350:	00000506 	br	2000368 <LCD_Test+0x8c>
 2000354:	18800007 	ldb	r2,0(r3)
 2000358:	90800035 	stwio	r2,0(r18)
 200035c:	0101f404 	movi	r4,2000
 2000360:	200dcf80 	call	200dcf8 <usleep>
 2000364:	84000044 	addi	r16,r16,1
 2000368:	8809883a 	mov	r4,r17
 200036c:	20049c80 	call	20049c8 <strlen>
 2000370:	8c07883a 	add	r3,r17,r16
 2000374:	80bff736 	bltu	r16,r2,2000354 <LCD_Test+0x78>
 2000378:	00c03004 	movi	r3,192
 200037c:	00800404 	movi	r2,16
 2000380:	10c00035 	stwio	r3,0(r2)
 2000384:	0101f404 	movi	r4,2000
 2000388:	200dcf80 	call	200dcf8 <usleep>
 200038c:	0021883a 	mov	r16,zero
 2000390:	04400604 	movi	r17,24
 2000394:	00000506 	br	20003ac <LCD_Test+0xd0>
 2000398:	18800007 	ldb	r2,0(r3)
 200039c:	88800035 	stwio	r2,0(r17)
 20003a0:	0101f404 	movi	r4,2000
 20003a4:	200dcf80 	call	200dcf8 <usleep>
 20003a8:	84000044 	addi	r16,r16,1
 20003ac:	d809883a 	mov	r4,sp
 20003b0:	20049c80 	call	20049c8 <strlen>
 20003b4:	dc07883a 	add	r3,sp,r16
 20003b8:	80bff736 	bltu	r16,r2,2000398 <LCD_Test+0xbc>
 20003bc:	dfc00b17 	ldw	ra,44(sp)
 20003c0:	dc800a17 	ldw	r18,40(sp)
 20003c4:	dc400917 	ldw	r17,36(sp)
 20003c8:	dc000817 	ldw	r16,32(sp)
 20003cc:	dec00c04 	addi	sp,sp,48
 20003d0:	f800283a 	ret

020003d4 <LCD_File_Buffering>:
 20003d4:	defff504 	addi	sp,sp,-44
 20003d8:	dfc00a15 	stw	ra,40(sp)
 20003dc:	dc400815 	stw	r17,32(sp)
 20003e0:	dc800915 	stw	r18,36(sp)
 20003e4:	dc000715 	stw	r16,28(sp)
 20003e8:	00808074 	movhi	r2,513
 20003ec:	10841704 	addi	r2,r2,4188
 20003f0:	13c0020b 	ldhu	r15,8(r2)
 20003f4:	24000283 	ldbu	r16,10(r4)
 20003f8:	10c00017 	ldw	r3,0(r2)
 20003fc:	11400117 	ldw	r5,4(r2)
 2000400:	21800003 	ldbu	r6,0(r4)
 2000404:	20800043 	ldbu	r2,1(r4)
 2000408:	21c00083 	ldbu	r7,2(r4)
 200040c:	220000c3 	ldbu	r8,3(r4)
 2000410:	22400103 	ldbu	r9,4(r4)
 2000414:	22800143 	ldbu	r10,5(r4)
 2000418:	22c00183 	ldbu	r11,6(r4)
 200041c:	230001c3 	ldbu	r12,7(r4)
 2000420:	23400203 	ldbu	r13,8(r4)
 2000424:	23800243 	ldbu	r14,9(r4)
 2000428:	d8c00315 	stw	r3,12(sp)
 200042c:	d9400415 	stw	r5,16(sp)
 2000430:	dbc0050d 	sth	r15,20(sp)
 2000434:	d9800005 	stb	r6,0(sp)
 2000438:	d8800045 	stb	r2,1(sp)
 200043c:	d9c00085 	stb	r7,2(sp)
 2000440:	da0000c5 	stb	r8,3(sp)
 2000444:	da400105 	stb	r9,4(sp)
 2000448:	da800145 	stb	r10,5(sp)
 200044c:	dac00185 	stb	r11,6(sp)
 2000450:	db0001c5 	stb	r12,7(sp)
 2000454:	db400205 	stb	r13,8(sp)
 2000458:	db800245 	stb	r14,9(sp)
 200045c:	dc000285 	stb	r16,10(sp)
 2000460:	d800058d 	sth	zero,22(sp)
 2000464:	d800060d 	sth	zero,24(sp)
 2000468:	0021883a 	mov	r16,zero
 200046c:	d800068d 	sth	zero,26(sp)
 2000470:	d80002c5 	stb	zero,11(sp)
 2000474:	04400604 	movi	r17,24
 2000478:	20002040 	call	2000204 <LCD_Init>
 200047c:	00000506 	br	2000494 <LCD_File_Buffering+0xc0>
 2000480:	18800007 	ldb	r2,0(r3)
 2000484:	88800035 	stwio	r2,0(r17)
 2000488:	0101f404 	movi	r4,2000
 200048c:	200dcf80 	call	200dcf8 <usleep>
 2000490:	84000044 	addi	r16,r16,1
 2000494:	d809883a 	mov	r4,sp
 2000498:	20049c80 	call	20049c8 <strlen>
 200049c:	dc07883a 	add	r3,sp,r16
 20004a0:	80bff736 	bltu	r16,r2,2000480 <LCD_File_Buffering+0xac>
 20004a4:	00c03004 	movi	r3,192
 20004a8:	00800404 	movi	r2,16
 20004ac:	10c00035 	stwio	r3,0(r2)
 20004b0:	0101f404 	movi	r4,2000
 20004b4:	200dcf80 	call	200dcf8 <usleep>
 20004b8:	0021883a 	mov	r16,zero
 20004bc:	dc400304 	addi	r17,sp,12
 20004c0:	04800604 	movi	r18,24
 20004c4:	00000506 	br	20004dc <LCD_File_Buffering+0x108>
 20004c8:	18800007 	ldb	r2,0(r3)
 20004cc:	90800035 	stwio	r2,0(r18)
 20004d0:	0101f404 	movi	r4,2000
 20004d4:	200dcf80 	call	200dcf8 <usleep>
 20004d8:	84000044 	addi	r16,r16,1
 20004dc:	8809883a 	mov	r4,r17
 20004e0:	20049c80 	call	20049c8 <strlen>
 20004e4:	8c07883a 	add	r3,r17,r16
 20004e8:	80bff736 	bltu	r16,r2,20004c8 <LCD_File_Buffering+0xf4>
 20004ec:	dfc00a17 	ldw	ra,40(sp)
 20004f0:	dc800917 	ldw	r18,36(sp)
 20004f4:	dc400817 	ldw	r17,32(sp)
 20004f8:	dc000717 	ldw	r16,28(sp)
 20004fc:	dec00b04 	addi	sp,sp,44
 2000500:	f800283a 	ret

02000504 <LCD_Display>:
 2000504:	defff504 	addi	sp,sp,-44
 2000508:	dfc00a15 	stw	ra,40(sp)
 200050c:	dc800915 	stw	r18,36(sp)
 2000510:	dc400815 	stw	r17,32(sp)
 2000514:	dc000715 	stw	r16,28(sp)
 2000518:	23800283 	ldbu	r14,10(r4)
 200051c:	20800003 	ldbu	r2,0(r4)
 2000520:	20c00043 	ldbu	r3,1(r4)
 2000524:	21800083 	ldbu	r6,2(r4)
 2000528:	21c000c3 	ldbu	r7,3(r4)
 200052c:	22000103 	ldbu	r8,4(r4)
 2000530:	22400143 	ldbu	r9,5(r4)
 2000534:	22800183 	ldbu	r10,6(r4)
 2000538:	22c001c3 	ldbu	r11,7(r4)
 200053c:	23000203 	ldbu	r12,8(r4)
 2000540:	23400243 	ldbu	r13,9(r4)
 2000544:	01000084 	movi	r4,2
 2000548:	d8800005 	stb	r2,0(sp)
 200054c:	d8c00045 	stb	r3,1(sp)
 2000550:	d9800085 	stb	r6,2(sp)
 2000554:	d9c000c5 	stb	r7,3(sp)
 2000558:	da000105 	stb	r8,4(sp)
 200055c:	da400145 	stb	r9,5(sp)
 2000560:	da800185 	stb	r10,6(sp)
 2000564:	dac001c5 	stb	r11,7(sp)
 2000568:	db000205 	stb	r12,8(sp)
 200056c:	db400245 	stb	r13,9(sp)
 2000570:	db800285 	stb	r14,10(sp)
 2000574:	d8000315 	stw	zero,12(sp)
 2000578:	d8000415 	stw	zero,16(sp)
 200057c:	d8000515 	stw	zero,20(sp)
 2000580:	d8000615 	stw	zero,24(sp)
 2000584:	d80002c5 	stb	zero,11(sp)
 2000588:	29003e26 	beq	r5,r4,2000684 <LCD_Display+0x180>
 200058c:	21403116 	blt	r4,r5,2000654 <LCD_Display+0x150>
 2000590:	00800044 	movi	r2,1
 2000594:	28804d26 	beq	r5,r2,20006cc <LCD_Display+0x1c8>
 2000598:	009b5cb4 	movhi	r2,28018
 200059c:	109bd384 	addi	r2,r2,28494
 20005a0:	d8800315 	stw	r2,12(sp)
 20005a4:	00d4c834 	movhi	r3,21280
 20005a8:	18db1844 	addi	r3,r3,27745
 20005ac:	00991974 	movhi	r2,25701
 20005b0:	10995c04 	addi	r2,r2,25968
 20005b4:	d8c00415 	stw	r3,16(sp)
 20005b8:	d8800515 	stw	r2,20(sp)
 20005bc:	d8000605 	stb	zero,24(sp)
 20005c0:	dc800304 	addi	r18,sp,12
 20005c4:	20002040 	call	2000204 <LCD_Init>
 20005c8:	0021883a 	mov	r16,zero
 20005cc:	04400604 	movi	r17,24
 20005d0:	00000506 	br	20005e8 <LCD_Display+0xe4>
 20005d4:	18800007 	ldb	r2,0(r3)
 20005d8:	88800035 	stwio	r2,0(r17)
 20005dc:	0101f404 	movi	r4,2000
 20005e0:	200dcf80 	call	200dcf8 <usleep>
 20005e4:	84000044 	addi	r16,r16,1
 20005e8:	d809883a 	mov	r4,sp
 20005ec:	20049c80 	call	20049c8 <strlen>
 20005f0:	dc07883a 	add	r3,sp,r16
 20005f4:	80bff736 	bltu	r16,r2,20005d4 <LCD_Display+0xd0>
 20005f8:	00c03004 	movi	r3,192
 20005fc:	00800404 	movi	r2,16
 2000600:	10c00035 	stwio	r3,0(r2)
 2000604:	0101f404 	movi	r4,2000
 2000608:	200dcf80 	call	200dcf8 <usleep>
 200060c:	0021883a 	mov	r16,zero
 2000610:	04400604 	movi	r17,24
 2000614:	00000506 	br	200062c <LCD_Display+0x128>
 2000618:	18800007 	ldb	r2,0(r3)
 200061c:	88800035 	stwio	r2,0(r17)
 2000620:	0101f404 	movi	r4,2000
 2000624:	200dcf80 	call	200dcf8 <usleep>
 2000628:	84000044 	addi	r16,r16,1
 200062c:	9009883a 	mov	r4,r18
 2000630:	20049c80 	call	20049c8 <strlen>
 2000634:	9407883a 	add	r3,r18,r16
 2000638:	80bff736 	bltu	r16,r2,2000618 <LCD_Display+0x114>
 200063c:	dfc00a17 	ldw	ra,40(sp)
 2000640:	dc800917 	ldw	r18,36(sp)
 2000644:	dc400817 	ldw	r17,32(sp)
 2000648:	dc000717 	ldw	r16,28(sp)
 200064c:	dec00b04 	addi	sp,sp,44
 2000650:	f800283a 	ret
 2000654:	008000c4 	movi	r2,3
 2000658:	28801526 	beq	r5,r2,20006b0 <LCD_Display+0x1ac>
 200065c:	00800104 	movi	r2,4
 2000660:	28bfcd1e 	bne	r5,r2,2000598 <LCD_Display+0x94>
 2000664:	00995db4 	movhi	r2,25974
 2000668:	10995484 	addi	r2,r2,25938
 200066c:	00c01974 	movhi	r3,101
 2000670:	18dcdc84 	addi	r3,r3,29554
 2000674:	dc800304 	addi	r18,sp,12
 2000678:	d8800315 	stw	r2,12(sp)
 200067c:	d8c00415 	stw	r3,16(sp)
 2000680:	003fd006 	br	20005c4 <LCD_Display+0xc0>
 2000684:	00999b34 	movhi	r2,26220
 2000688:	10985204 	addi	r2,r2,24904
 200068c:	d8800315 	stw	r2,12(sp)
 2000690:	00d95c34 	movhi	r3,25968
 2000694:	18d4c804 	addi	r3,r3,21280
 2000698:	00991944 	movi	r2,25701
 200069c:	dc800304 	addi	r18,sp,12
 20006a0:	d8c00415 	stw	r3,16(sp)
 20006a4:	d880050d 	sth	r2,20(sp)
 20006a8:	d8000585 	stb	zero,22(sp)
 20006ac:	003fc506 	br	20005c4 <LCD_Display+0xc0>
 20006b0:	00985b34 	movhi	r2,24940
 20006b4:	10995104 	addi	r2,r2,25924
 20006b8:	00c01e44 	movi	r3,121
 20006bc:	dc800304 	addi	r18,sp,12
 20006c0:	d8800315 	stw	r2,12(sp)
 20006c4:	d8c0040d 	sth	r3,16(sp)
 20006c8:	003fbe06 	br	20005c4 <LCD_Display+0xc0>
 20006cc:	00989d74 	movhi	r2,25205
 20006d0:	109bd104 	addi	r2,r2,28484
 20006d4:	d8800315 	stw	r2,12(sp)
 20006d8:	00d4c834 	movhi	r3,21280
 20006dc:	18d95b04 	addi	r3,r3,25964
 20006e0:	00991974 	movhi	r2,25701
 20006e4:	10995c04 	addi	r2,r2,25968
 20006e8:	dc800304 	addi	r18,sp,12
 20006ec:	d8c00415 	stw	r3,16(sp)
 20006f0:	d8800515 	stw	r2,20(sp)
 20006f4:	d8000605 	stb	zero,24(sp)
 20006f8:	003fb206 	br	20005c4 <LCD_Display+0xc0>

020006fc <I2C_Read_CMD>:
 20006fc:	00c04404 	movi	r3,272
 2000700:	18800037 	ldwio	r2,0(r3)
 2000704:	10803fcc 	andi	r2,r2,255
 2000708:	f800283a 	ret

0200070c <I2C_Read_Status>:
 200070c:	00c04404 	movi	r3,272
 2000710:	18800037 	ldwio	r2,0(r3)
 2000714:	10803fcc 	andi	r2,r2,255
 2000718:	f800283a 	ret

0200071c <I2C_Read_RX>:
 200071c:	00c04304 	movi	r3,268
 2000720:	18800037 	ldwio	r2,0(r3)
 2000724:	10803fcc 	andi	r2,r2,255
 2000728:	f800283a 	ret

0200072c <I2C_Read_Ctrl>:
 200072c:	00c04204 	movi	r3,264
 2000730:	18800037 	ldwio	r2,0(r3)
 2000734:	10803fcc 	andi	r2,r2,255
 2000738:	f800283a 	ret

0200073c <I2C_Read_Period>:
 200073c:	00804004 	movi	r2,256
 2000740:	11000037 	ldwio	r4,0(r2)
 2000744:	00c04104 	movi	r3,260
 2000748:	18800037 	ldwio	r2,0(r3)
 200074c:	10803fcc 	andi	r2,r2,255
 2000750:	1004943a 	slli	r2,r2,16
 2000754:	21003fcc 	andi	r4,r4,255
 2000758:	1105883a 	add	r2,r2,r4
 200075c:	f800283a 	ret

02000760 <I2C_Write_CMD>:
 2000760:	21003fcc 	andi	r4,r4,255
 2000764:	00804404 	movi	r2,272
 2000768:	11000035 	stwio	r4,0(r2)
 200076c:	f800283a 	ret

02000770 <I2C_Write_TX>:
 2000770:	21003fcc 	andi	r4,r4,255
 2000774:	00804304 	movi	r2,268
 2000778:	11000035 	stwio	r4,0(r2)
 200077c:	f800283a 	ret

02000780 <I2C_Write_Ctrl>:
 2000780:	21003fcc 	andi	r4,r4,255
 2000784:	00804204 	movi	r2,264
 2000788:	11000035 	stwio	r4,0(r2)
 200078c:	f800283a 	ret

02000790 <I2C_Write_Period>:
 2000790:	20c03fcc 	andi	r3,r4,255
 2000794:	00804004 	movi	r2,256
 2000798:	10c00035 	stwio	r3,0(r2)
 200079c:	2008d43a 	srli	r4,r4,16
 20007a0:	00804104 	movi	r2,260
 20007a4:	11000035 	stwio	r4,0(r2)
 20007a8:	f800283a 	ret

020007ac <I2C_Send>:
 20007ac:	21003fcc 	andi	r4,r4,255
 20007b0:	00804304 	movi	r2,268
 20007b4:	11000035 	stwio	r4,0(r2)
 20007b8:	29403fcc 	andi	r5,r5,255
 20007bc:	0007883a 	mov	r3,zero
 20007c0:	28000126 	beq	r5,zero,20007c8 <I2C_Send+0x1c>
 20007c4:	00ffe004 	movi	r3,-128
 20007c8:	30803fcc 	andi	r2,r6,255
 20007cc:	10000126 	beq	r2,zero,20007d4 <I2C_Send+0x28>
 20007d0:	18c01014 	ori	r3,r3,64
 20007d4:	18c00414 	ori	r3,r3,16
 20007d8:	18c03fcc 	andi	r3,r3,255
 20007dc:	00804404 	movi	r2,272
 20007e0:	10c00035 	stwio	r3,0(r2)
 20007e4:	1009883a 	mov	r4,r2
 20007e8:	20800037 	ldwio	r2,0(r4)
 20007ec:	10803fcc 	andi	r2,r2,255
 20007f0:	10c0008c 	andi	r3,r2,2
 20007f4:	183ffc1e 	bne	r3,zero,20007e8 <I2C_Send+0x3c>
 20007f8:	0084303a 	nor	r2,zero,r2
 20007fc:	10803fcc 	andi	r2,r2,255
 2000800:	1004d1fa 	srli	r2,r2,7
 2000804:	f800283a 	ret

02000808 <I2C_Init>:
 2000808:	20c03fcc 	andi	r3,r4,255
 200080c:	00804004 	movi	r2,256
 2000810:	10c00035 	stwio	r3,0(r2)
 2000814:	2008d43a 	srli	r4,r4,16
 2000818:	00804104 	movi	r2,260
 200081c:	11000035 	stwio	r4,0(r2)
 2000820:	00c03004 	movi	r3,192
 2000824:	00804204 	movi	r2,264
 2000828:	10c00035 	stwio	r3,0(r2)
 200082c:	f800283a 	ret

02000830 <FirstSectorofCluster>:
 2000830:	d1675543 	ldbu	r5,-25259(gp)
 2000834:	deffff04 	addi	sp,sp,-4
 2000838:	213fff84 	addi	r4,r4,-2
 200083c:	dfc00015 	stw	ra,0(sp)
 2000840:	20040f00 	call	20040f0 <__mulsi3>
 2000844:	d0e76217 	ldw	r3,-25208(gp)
 2000848:	d1278d17 	ldw	r4,-25036(gp)
 200084c:	1907883a 	add	r3,r3,r4
 2000850:	10c5883a 	add	r2,r2,r3
 2000854:	dfc00017 	ldw	ra,0(sp)
 2000858:	dec00104 	addi	sp,sp,4
 200085c:	f800283a 	ret

02000860 <isEOF>:
 2000860:	d1677e17 	ldw	r5,-25096(gp)
 2000864:	0083fdc4 	movi	r2,4087
 2000868:	00c3fd04 	movi	r3,4084
 200086c:	1105803a 	cmpltu	r2,r2,r4
 2000870:	1940082e 	bgeu	r3,r5,2000894 <isEOF+0x34>
 2000874:	00c40034 	movhi	r3,4096
 2000878:	18fffdc4 	addi	r3,r3,-9
 200087c:	00bffdd4 	movui	r2,65527
 2000880:	1105803a 	cmpltu	r2,r2,r4
 2000884:	1909803a 	cmpltu	r4,r3,r4
 2000888:	00fffd14 	movui	r3,65524
 200088c:	1940012e 	bgeu	r3,r5,2000894 <isEOF+0x34>
 2000890:	2005883a 	mov	r2,r4
 2000894:	10803fcc 	andi	r2,r2,255
 2000898:	f800283a 	ret

0200089c <handle_button_interrupts>:
 200089c:	00801304 	movi	r2,76
 20008a0:	10c00037 	ldwio	r3,0(r2)
 20008a4:	10000035 	stwio	zero,0(r2)
 20008a8:	00800084 	movi	r2,2
 20008ac:	18800a26 	beq	r3,r2,20008d8 <handle_button_interrupts+0x3c>
 20008b0:	10c0050e 	bge	r2,r3,20008c8 <handle_button_interrupts+0x2c>
 20008b4:	00800104 	movi	r2,4
 20008b8:	18800b26 	beq	r3,r2,20008e8 <handle_button_interrupts+0x4c>
 20008bc:	00800204 	movi	r2,8
 20008c0:	18800726 	beq	r3,r2,20008e0 <handle_button_interrupts+0x44>
 20008c4:	f800283a 	ret
 20008c8:	00800044 	movi	r2,1
 20008cc:	18bffd1e 	bne	r3,r2,20008c4 <handle_button_interrupts+0x28>
 20008d0:	d0e78a15 	stw	r3,-25048(gp)
 20008d4:	f800283a 	ret
 20008d8:	d0278015 	stw	zero,-25088(gp)
 20008dc:	f800283a 	ret
 20008e0:	d0277715 	stw	zero,-25124(gp)
 20008e4:	f800283a 	ret
 20008e8:	d0276f15 	stw	zero,-25156(gp)
 20008ec:	f800283a 	ret

020008f0 <send_cmd>:
 20008f0:	00c00044 	movi	r3,1
 20008f4:	00804d04 	movi	r2,308
 20008f8:	10c00035 	stwio	r3,0(r2)
 20008fc:	0019883a 	mov	r12,zero
 2000900:	000f883a 	mov	r7,zero
 2000904:	02405004 	movi	r9,320
 2000908:	02c04c04 	movi	r11,304
 200090c:	02800204 	movi	r10,8
 2000910:	03400144 	movi	r13,5
 2000914:	6105883a 	add	r2,r12,r4
 2000918:	11800003 	ldbu	r6,0(r2)
 200091c:	0011883a 	mov	r8,zero
 2000920:	48000035 	stwio	zero,0(r9)
 2000924:	30803fcc 	andi	r2,r6,255
 2000928:	1080201c 	xori	r2,r2,128
 200092c:	10bfe004 	addi	r2,r2,-128
 2000930:	10002e16 	blt	r2,zero,20009ec <send_cmd+0xfc>
 2000934:	58000035 	stwio	zero,0(r11)
 2000938:	39cb883a 	add	r5,r7,r7
 200093c:	280f883a 	mov	r7,r5
 2000940:	48c00035 	stwio	r3,0(r9)
 2000944:	2984f03a 	xor	r2,r5,r6
 2000948:	10803fcc 	andi	r2,r2,255
 200094c:	1080201c 	xori	r2,r2,128
 2000950:	10bfe004 	addi	r2,r2,-128
 2000954:	318d883a 	add	r6,r6,r6
 2000958:	42000044 	addi	r8,r8,1
 200095c:	10002016 	blt	r2,zero,20009e0 <send_cmd+0xf0>
 2000960:	42bfef1e 	bne	r8,r10,2000920 <send_cmd+0x30>
 2000964:	63000044 	addi	r12,r12,1
 2000968:	39c01fcc 	andi	r7,r7,127
 200096c:	637fe91e 	bne	r12,r13,2000914 <send_cmd+0x24>
 2000970:	38803fcc 	andi	r2,r7,255
 2000974:	1085883a 	add	r2,r2,r2
 2000978:	10800054 	ori	r2,r2,1
 200097c:	1007883a 	mov	r3,r2
 2000980:	1013883a 	mov	r9,r2
 2000984:	0009883a 	mov	r4,zero
 2000988:	01405004 	movi	r5,320
 200098c:	02004c04 	movi	r8,304
 2000990:	01800044 	movi	r6,1
 2000994:	01c00204 	movi	r7,8
 2000998:	00000506 	br	20009b0 <send_cmd+0xc0>
 200099c:	40000035 	stwio	zero,0(r8)
 20009a0:	29800035 	stwio	r6,0(r5)
 20009a4:	21000044 	addi	r4,r4,1
 20009a8:	18c7883a 	add	r3,r3,r3
 20009ac:	21c00a26 	beq	r4,r7,20009d8 <send_cmd+0xe8>
 20009b0:	28000035 	stwio	zero,0(r5)
 20009b4:	18803fcc 	andi	r2,r3,255
 20009b8:	1080201c 	xori	r2,r2,128
 20009bc:	10bfe004 	addi	r2,r2,-128
 20009c0:	103ff60e 	bge	r2,zero,200099c <send_cmd+0xac>
 20009c4:	41800035 	stwio	r6,0(r8)
 20009c8:	29800035 	stwio	r6,0(r5)
 20009cc:	21000044 	addi	r4,r4,1
 20009d0:	18c7883a 	add	r3,r3,r3
 20009d4:	21fff61e 	bne	r4,r7,20009b0 <send_cmd+0xc0>
 20009d8:	48803fcc 	andi	r2,r9,255
 20009dc:	f800283a 	ret
 20009e0:	29c0025c 	xori	r7,r5,9
 20009e4:	42bfce1e 	bne	r8,r10,2000920 <send_cmd+0x30>
 20009e8:	003fde06 	br	2000964 <send_cmd+0x74>
 20009ec:	58c00035 	stwio	r3,0(r11)
 20009f0:	003fd106 	br	2000938 <send_cmd+0x48>

020009f4 <response_R>:
 20009f4:	defffc04 	addi	sp,sp,-16
 20009f8:	000b883a 	mov	r5,zero
 20009fc:	01805004 	movi	r6,320
 2000a00:	02400044 	movi	r9,1
 2000a04:	02004c04 	movi	r8,304
 2000a08:	01c01944 	movi	r7,101
 2000a0c:	dcc00315 	stw	r19,12(sp)
 2000a10:	dc800215 	stw	r18,8(sp)
 2000a14:	dc400115 	stw	r17,4(sp)
 2000a18:	dc000015 	stw	r16,0(sp)
 2000a1c:	00000106 	br	2000a24 <response_R+0x30>
 2000a20:	19c06626 	beq	r3,r7,2000bbc <response_R+0x1c8>
 2000a24:	30000035 	stwio	zero,0(r6)
 2000a28:	32400035 	stwio	r9,0(r6)
 2000a2c:	40800037 	ldwio	r2,0(r8)
 2000a30:	28c03fcc 	andi	r3,r5,255
 2000a34:	29400044 	addi	r5,r5,1
 2000a38:	103ff91e 	bne	r2,zero,2000a20 <response_R+0x2c>
 2000a3c:	24003fcc 	andi	r16,r4,255
 2000a40:	00800084 	movi	r2,2
 2000a44:	80806426 	beq	r16,r2,2000bd8 <response_R+0x1e4>
 2000a48:	00800184 	movi	r2,6
 2000a4c:	14403fcc 	andi	r17,r2,255
 2000a50:	0027883a 	mov	r19,zero
 2000a54:	000b883a 	mov	r5,zero
 2000a58:	0015883a 	mov	r10,zero
 2000a5c:	0017883a 	mov	r11,zero
 2000a60:	0009883a 	mov	r4,zero
 2000a64:	048080b4 	movhi	r18,514
 2000a68:	94a88604 	addi	r18,r18,-24040
 2000a6c:	23003fcc 	andi	r12,r4,255
 2000a70:	60000226 	beq	r12,zero,2000a7c <response_R+0x88>
 2000a74:	6485883a 	add	r2,r12,r18
 2000a78:	12ffffc3 	ldbu	r11,-1(r2)
 2000a7c:	000d883a 	mov	r6,zero
 2000a80:	0011883a 	mov	r8,zero
 2000a84:	02405004 	movi	r9,320
 2000a88:	03800044 	movi	r14,1
 2000a8c:	03404c04 	movi	r13,304
 2000a90:	03c001c4 	movi	r15,7
 2000a94:	60001e1e 	bne	r12,zero,2000b10 <response_R+0x11c>
 2000a98:	48000035 	stwio	zero,0(r9)
 2000a9c:	50803fcc 	andi	r2,r10,255
 2000aa0:	10003526 	beq	r2,zero,2000b78 <response_R+0x184>
 2000aa4:	4211883a 	add	r8,r8,r8
 2000aa8:	52800044 	addi	r10,r10,1
 2000aac:	4b800035 	stwio	r14,0(r9)
 2000ab0:	69c00037 	ldwio	r7,0(r13)
 2000ab4:	31800044 	addi	r6,r6,1
 2000ab8:	30c03fcc 	andi	r3,r6,255
 2000abc:	38000126 	beq	r7,zero,2000ac4 <response_R+0xd0>
 2000ac0:	42000054 	ori	r8,r8,1
 2000ac4:	78fff42e 	bgeu	r15,r3,2000a98 <response_R+0xa4>
 2000ac8:	008000c4 	movi	r2,3
 2000acc:	80802e26 	beq	r16,r2,2000b88 <response_R+0x194>
 2000ad0:	21000044 	addi	r4,r4,1
 2000ad4:	6485883a 	add	r2,r12,r18
 2000ad8:	20c03fcc 	andi	r3,r4,255
 2000adc:	12000005 	stb	r8,0(r2)
 2000ae0:	1c7fe236 	bltu	r3,r17,2000a6c <response_R+0x78>
 2000ae4:	00800044 	movi	r2,1
 2000ae8:	80802f26 	beq	r16,r2,2000ba8 <response_R+0x1b4>
 2000aec:	00800184 	movi	r2,6
 2000af0:	80802d26 	beq	r16,r2,2000ba8 <response_R+0x1b4>
 2000af4:	98803fcc 	andi	r2,r19,255
 2000af8:	dcc00317 	ldw	r19,12(sp)
 2000afc:	dc800217 	ldw	r18,8(sp)
 2000b00:	dc400117 	ldw	r17,4(sp)
 2000b04:	dc000017 	ldw	r16,0(sp)
 2000b08:	dec00404 	addi	sp,sp,16
 2000b0c:	f800283a 	ret
 2000b10:	48000035 	stwio	zero,0(r9)
 2000b14:	50803fcc 	andi	r2,r10,255
 2000b18:	1000151e 	bne	r2,zero,2000b70 <response_R+0x17c>
 2000b1c:	31800044 	addi	r6,r6,1
 2000b20:	52800044 	addi	r10,r10,1
 2000b24:	4b800035 	stwio	r14,0(r9)
 2000b28:	69c00037 	ldwio	r7,0(r13)
 2000b2c:	294b883a 	add	r5,r5,r5
 2000b30:	2ac4f03a 	xor	r2,r5,r11
 2000b34:	10803fcc 	andi	r2,r2,255
 2000b38:	31800044 	addi	r6,r6,1
 2000b3c:	1080201c 	xori	r2,r2,128
 2000b40:	10bfe004 	addi	r2,r2,-128
 2000b44:	30c03fcc 	andi	r3,r6,255
 2000b48:	38000126 	beq	r7,zero,2000b50 <response_R+0x15c>
 2000b4c:	42000054 	ori	r8,r8,1
 2000b50:	280f883a 	mov	r7,r5
 2000b54:	10000a16 	blt	r2,zero,2000b80 <response_R+0x18c>
 2000b58:	39401fcc 	andi	r5,r7,127
 2000b5c:	5ad7883a 	add	r11,r11,r11
 2000b60:	78ffd936 	bltu	r15,r3,2000ac8 <response_R+0xd4>
 2000b64:	48000035 	stwio	zero,0(r9)
 2000b68:	50803fcc 	andi	r2,r10,255
 2000b6c:	103feb26 	beq	r2,zero,2000b1c <response_R+0x128>
 2000b70:	4211883a 	add	r8,r8,r8
 2000b74:	003fea06 	br	2000b20 <response_R+0x12c>
 2000b78:	31800044 	addi	r6,r6,1
 2000b7c:	003fca06 	br	2000aa8 <response_R+0xb4>
 2000b80:	29c0025c 	xori	r7,r5,9
 2000b84:	003ff406 	br	2000b58 <response_R+0x164>
 2000b88:	00800044 	movi	r2,1
 2000b8c:	60bfd01e 	bne	r12,r2,2000ad0 <response_R+0xdc>
 2000b90:	40803fcc 	andi	r2,r8,255
 2000b94:	1080201c 	xori	r2,r2,128
 2000b98:	10bfe004 	addi	r2,r2,-128
 2000b9c:	103fcc16 	blt	r2,zero,2000ad0 <response_R+0xdc>
 2000ba0:	6027883a 	mov	r19,r12
 2000ba4:	003fca06 	br	2000ad0 <response_R+0xdc>
 2000ba8:	28803fcc 	andi	r2,r5,255
 2000bac:	1085883a 	add	r2,r2,r2
 2000bb0:	40c03fcc 	andi	r3,r8,255
 2000bb4:	10800044 	addi	r2,r2,1
 2000bb8:	18bfce26 	beq	r3,r2,2000af4 <response_R+0x100>
 2000bbc:	00800084 	movi	r2,2
 2000bc0:	dcc00317 	ldw	r19,12(sp)
 2000bc4:	dc800217 	ldw	r18,8(sp)
 2000bc8:	dc400117 	ldw	r17,4(sp)
 2000bcc:	dc000017 	ldw	r16,0(sp)
 2000bd0:	dec00404 	addi	sp,sp,16
 2000bd4:	f800283a 	ret
 2000bd8:	00800444 	movi	r2,17
 2000bdc:	003f9b06 	br	2000a4c <response_R+0x58>

02000be0 <Ncc>:
 2000be0:	00805004 	movi	r2,320
 2000be4:	10000035 	stwio	zero,0(r2)
 2000be8:	00c00044 	movi	r3,1
 2000bec:	10c00035 	stwio	r3,0(r2)
 2000bf0:	10000035 	stwio	zero,0(r2)
 2000bf4:	10c00035 	stwio	r3,0(r2)
 2000bf8:	10000035 	stwio	zero,0(r2)
 2000bfc:	10c00035 	stwio	r3,0(r2)
 2000c00:	10000035 	stwio	zero,0(r2)
 2000c04:	10c00035 	stwio	r3,0(r2)
 2000c08:	10000035 	stwio	zero,0(r2)
 2000c0c:	10c00035 	stwio	r3,0(r2)
 2000c10:	10000035 	stwio	zero,0(r2)
 2000c14:	10c00035 	stwio	r3,0(r2)
 2000c18:	10000035 	stwio	zero,0(r2)
 2000c1c:	10c00035 	stwio	r3,0(r2)
 2000c20:	10000035 	stwio	zero,0(r2)
 2000c24:	10c00035 	stwio	r3,0(r2)
 2000c28:	f800283a 	ret

02000c2c <Ncr>:
 2000c2c:	00804d04 	movi	r2,308
 2000c30:	10000035 	stwio	zero,0(r2)
 2000c34:	00c05004 	movi	r3,320
 2000c38:	18000035 	stwio	zero,0(r3)
 2000c3c:	00800044 	movi	r2,1
 2000c40:	18800035 	stwio	r2,0(r3)
 2000c44:	18000035 	stwio	zero,0(r3)
 2000c48:	18800035 	stwio	r2,0(r3)
 2000c4c:	f800283a 	ret

02000c50 <info_bs>:
 2000c50:	deffff04 	addi	sp,sp,-4
 2000c54:	01008074 	movhi	r4,513
 2000c58:	21041b04 	addi	r4,r4,4204
 2000c5c:	dfc00015 	stw	ra,0(sp)
 2000c60:	20047540 	call	2004754 <printf>
 2000c64:	d0e76144 	addi	r3,gp,-25211
 2000c68:	19800043 	ldbu	r6,1(r3)
 2000c6c:	19c00083 	ldbu	r7,2(r3)
 2000c70:	d1676143 	ldbu	r5,-25211(gp)
 2000c74:	01008074 	movhi	r4,513
 2000c78:	21042504 	addi	r4,r4,4244
 2000c7c:	20047540 	call	2004754 <printf>
 2000c80:	01008074 	movhi	r4,513
 2000c84:	21042e04 	addi	r4,r4,4280
 2000c88:	d1677284 	addi	r5,gp,-25142
 2000c8c:	20047540 	call	2004754 <printf>
 2000c90:	d1676817 	ldw	r5,-25184(gp)
 2000c94:	01008074 	movhi	r4,513
 2000c98:	21043204 	addi	r4,r4,4296
 2000c9c:	20047540 	call	2004754 <printf>
 2000ca0:	d1675543 	ldbu	r5,-25259(gp)
 2000ca4:	01008074 	movhi	r4,513
 2000ca8:	21043704 	addi	r4,r4,4316
 2000cac:	20047540 	call	2004754 <printf>
 2000cb0:	d1678217 	ldw	r5,-25080(gp)
 2000cb4:	01008074 	movhi	r4,513
 2000cb8:	21043c04 	addi	r4,r4,4336
 2000cbc:	20047540 	call	2004754 <printf>
 2000cc0:	d1676303 	ldbu	r5,-25204(gp)
 2000cc4:	01008074 	movhi	r4,513
 2000cc8:	21044104 	addi	r4,r4,4356
 2000ccc:	20047540 	call	2004754 <printf>
 2000cd0:	d1675617 	ldw	r5,-25256(gp)
 2000cd4:	01008074 	movhi	r4,513
 2000cd8:	21044604 	addi	r4,r4,4376
 2000cdc:	20047540 	call	2004754 <printf>
 2000ce0:	d1677017 	ldw	r5,-25152(gp)
 2000ce4:	01008074 	movhi	r4,513
 2000ce8:	21044b04 	addi	r4,r4,4396
 2000cec:	20047540 	call	2004754 <printf>
 2000cf0:	d1678903 	ldbu	r5,-25052(gp)
 2000cf4:	01008074 	movhi	r4,513
 2000cf8:	21045004 	addi	r4,r4,4416
 2000cfc:	20047540 	call	2004754 <printf>
 2000d00:	d1676417 	ldw	r5,-25200(gp)
 2000d04:	01008074 	movhi	r4,513
 2000d08:	21045404 	addi	r4,r4,4432
 2000d0c:	20047540 	call	2004754 <printf>
 2000d10:	d1675c17 	ldw	r5,-25232(gp)
 2000d14:	01008074 	movhi	r4,513
 2000d18:	21045904 	addi	r4,r4,4452
 2000d1c:	20047540 	call	2004754 <printf>
 2000d20:	d1678417 	ldw	r5,-25072(gp)
 2000d24:	01008074 	movhi	r4,513
 2000d28:	21045e04 	addi	r4,r4,4472
 2000d2c:	20047540 	call	2004754 <printf>
 2000d30:	d1675d17 	ldw	r5,-25228(gp)
 2000d34:	01008074 	movhi	r4,513
 2000d38:	21046304 	addi	r4,r4,4492
 2000d3c:	20047540 	call	2004754 <printf>
 2000d40:	d1677b17 	ldw	r5,-25108(gp)
 2000d44:	01008074 	movhi	r4,513
 2000d48:	21046804 	addi	r4,r4,4512
 2000d4c:	20047540 	call	2004754 <printf>
 2000d50:	d1678117 	ldw	r5,-25084(gp)
 2000d54:	01008074 	movhi	r4,513
 2000d58:	21046d04 	addi	r4,r4,4532
 2000d5c:	280d883a 	mov	r6,r5
 2000d60:	20047540 	call	2004754 <printf>
 2000d64:	d1676a17 	ldw	r5,-25176(gp)
 2000d68:	01008074 	movhi	r4,513
 2000d6c:	21047504 	addi	r4,r4,4564
 2000d70:	280d883a 	mov	r6,r5
 2000d74:	20047540 	call	2004754 <printf>
 2000d78:	d1676217 	ldw	r5,-25208(gp)
 2000d7c:	01008074 	movhi	r4,513
 2000d80:	21047b04 	addi	r4,r4,4588
 2000d84:	280d883a 	mov	r6,r5
 2000d88:	20047540 	call	2004754 <printf>
 2000d8c:	d1677d17 	ldw	r5,-25100(gp)
 2000d90:	01008074 	movhi	r4,513
 2000d94:	21048304 	addi	r4,r4,4620
 2000d98:	280d883a 	mov	r6,r5
 2000d9c:	20047540 	call	2004754 <printf>
 2000da0:	d1677c17 	ldw	r5,-25104(gp)
 2000da4:	01008074 	movhi	r4,513
 2000da8:	21048904 	addi	r4,r4,4644
 2000dac:	280d883a 	mov	r6,r5
 2000db0:	20047540 	call	2004754 <printf>
 2000db4:	d1677e17 	ldw	r5,-25096(gp)
 2000db8:	01008074 	movhi	r4,513
 2000dbc:	21048f04 	addi	r4,r4,4668
 2000dc0:	280d883a 	mov	r6,r5
 2000dc4:	20047540 	call	2004754 <printf>
 2000dc8:	d1675a17 	ldw	r5,-25240(gp)
 2000dcc:	01008074 	movhi	r4,513
 2000dd0:	21049704 	addi	r4,r4,4700
 2000dd4:	280d883a 	mov	r6,r5
 2000dd8:	dfc00017 	ldw	ra,0(sp)
 2000ddc:	dec00104 	addi	sp,sp,4
 2000de0:	20047541 	jmpi	2004754 <printf>

02000de4 <SD_card_init>:
 2000de4:	defff904 	addi	sp,sp,-28
 2000de8:	01804d04 	movi	r6,308
 2000dec:	01000044 	movi	r4,1
 2000df0:	dfc00615 	stw	ra,24(sp)
 2000df4:	dd400515 	stw	r21,20(sp)
 2000df8:	dd000415 	stw	r20,16(sp)
 2000dfc:	dcc00315 	stw	r19,12(sp)
 2000e00:	dc800215 	stw	r18,8(sp)
 2000e04:	dc400115 	stw	r17,4(sp)
 2000e08:	dc000015 	stw	r16,0(sp)
 2000e0c:	31000035 	stwio	r4,0(r6)
 2000e10:	00804904 	movi	r2,292
 2000e14:	10000035 	stwio	zero,0(r2)
 2000e18:	01405004 	movi	r5,320
 2000e1c:	29000035 	stwio	r4,0(r5)
 2000e20:	00804c04 	movi	r2,304
 2000e24:	11000035 	stwio	r4,0(r2)
 2000e28:	00c04804 	movi	r3,288
 2000e2c:	18000035 	stwio	zero,0(r3)
 2000e30:	0007883a 	mov	r3,zero
 2000e34:	d0277245 	stb	zero,-25143(gp)
 2000e38:	01c00a04 	movi	r7,40
 2000e3c:	30000035 	stwio	zero,0(r6)
 2000e40:	28000035 	stwio	zero,0(r5)
 2000e44:	29000035 	stwio	r4,0(r5)
 2000e48:	28000035 	stwio	zero,0(r5)
 2000e4c:	29000035 	stwio	r4,0(r5)
 2000e50:	18c00044 	addi	r3,r3,1
 2000e54:	18803fcc 	andi	r2,r3,255
 2000e58:	11fff81e 	bne	r2,r7,2000e3c <SD_card_init+0x58>
 2000e5c:	d4e77104 	addi	r19,gp,-25148
 2000e60:	00801004 	movi	r2,64
 2000e64:	9809883a 	mov	r4,r19
 2000e68:	d0a77105 	stb	r2,-25148(gp)
 2000e6c:	98000045 	stb	zero,1(r19)
 2000e70:	98000085 	stb	zero,2(r19)
 2000e74:	980000c5 	stb	zero,3(r19)
 2000e78:	98000105 	stb	zero,4(r19)
 2000e7c:	04005004 	movi	r16,320
 2000e80:	20008f00 	call	20008f0 <send_cmd>
 2000e84:	04400044 	movi	r17,1
 2000e88:	9825883a 	mov	r18,r19
 2000e8c:	05004d04 	movi	r20,308
 2000e90:	80000035 	stwio	zero,0(r16)
 2000e94:	84400035 	stwio	r17,0(r16)
 2000e98:	80000035 	stwio	zero,0(r16)
 2000e9c:	84400035 	stwio	r17,0(r16)
 2000ea0:	80000035 	stwio	zero,0(r16)
 2000ea4:	84400035 	stwio	r17,0(r16)
 2000ea8:	80000035 	stwio	zero,0(r16)
 2000eac:	84400035 	stwio	r17,0(r16)
 2000eb0:	80000035 	stwio	zero,0(r16)
 2000eb4:	84400035 	stwio	r17,0(r16)
 2000eb8:	80000035 	stwio	zero,0(r16)
 2000ebc:	84400035 	stwio	r17,0(r16)
 2000ec0:	80000035 	stwio	zero,0(r16)
 2000ec4:	84400035 	stwio	r17,0(r16)
 2000ec8:	80000035 	stwio	zero,0(r16)
 2000ecc:	84400035 	stwio	r17,0(r16)
 2000ed0:	d1277104 	addi	r4,gp,-25148
 2000ed4:	00801dc4 	movi	r2,119
 2000ed8:	98000045 	stb	zero,1(r19)
 2000edc:	98000085 	stb	zero,2(r19)
 2000ee0:	980000c5 	stb	zero,3(r19)
 2000ee4:	98000105 	stb	zero,4(r19)
 2000ee8:	d0a77105 	stb	r2,-25148(gp)
 2000eec:	20008f00 	call	20008f0 <send_cmd>
 2000ef0:	a0000035 	stwio	zero,0(r20)
 2000ef4:	80000035 	stwio	zero,0(r16)
 2000ef8:	84400035 	stwio	r17,0(r16)
 2000efc:	80000035 	stwio	zero,0(r16)
 2000f00:	84400035 	stwio	r17,0(r16)
 2000f04:	01000044 	movi	r4,1
 2000f08:	20009f40 	call	20009f4 <response_R>
 2000f0c:	10803fcc 	andi	r2,r2,255
 2000f10:	88804436 	bltu	r17,r2,2001024 <SD_card_init+0x240>
 2000f14:	80000035 	stwio	zero,0(r16)
 2000f18:	84400035 	stwio	r17,0(r16)
 2000f1c:	80000035 	stwio	zero,0(r16)
 2000f20:	84400035 	stwio	r17,0(r16)
 2000f24:	80000035 	stwio	zero,0(r16)
 2000f28:	84400035 	stwio	r17,0(r16)
 2000f2c:	80000035 	stwio	zero,0(r16)
 2000f30:	84400035 	stwio	r17,0(r16)
 2000f34:	80000035 	stwio	zero,0(r16)
 2000f38:	84400035 	stwio	r17,0(r16)
 2000f3c:	80000035 	stwio	zero,0(r16)
 2000f40:	84400035 	stwio	r17,0(r16)
 2000f44:	80000035 	stwio	zero,0(r16)
 2000f48:	84400035 	stwio	r17,0(r16)
 2000f4c:	80000035 	stwio	zero,0(r16)
 2000f50:	84400035 	stwio	r17,0(r16)
 2000f54:	00801a44 	movi	r2,105
 2000f58:	00c003c4 	movi	r3,15
 2000f5c:	d0a77105 	stb	r2,-25148(gp)
 2000f60:	00bffc04 	movi	r2,-16
 2000f64:	d1277104 	addi	r4,gp,-25148
 2000f68:	90c00045 	stb	r3,1(r18)
 2000f6c:	90800085 	stb	r2,2(r18)
 2000f70:	900000c5 	stb	zero,3(r18)
 2000f74:	90000105 	stb	zero,4(r18)
 2000f78:	20008f00 	call	20008f0 <send_cmd>
 2000f7c:	a0000035 	stwio	zero,0(r20)
 2000f80:	80000035 	stwio	zero,0(r16)
 2000f84:	84400035 	stwio	r17,0(r16)
 2000f88:	80000035 	stwio	zero,0(r16)
 2000f8c:	84400035 	stwio	r17,0(r16)
 2000f90:	010000c4 	movi	r4,3
 2000f94:	20009f40 	call	20009f4 <response_R>
 2000f98:	10803fcc 	andi	r2,r2,255
 2000f9c:	147fbc26 	beq	r2,r17,2000e90 <SD_card_init+0xac>
 2000fa0:	80000035 	stwio	zero,0(r16)
 2000fa4:	84400035 	stwio	r17,0(r16)
 2000fa8:	80000035 	stwio	zero,0(r16)
 2000fac:	84400035 	stwio	r17,0(r16)
 2000fb0:	80000035 	stwio	zero,0(r16)
 2000fb4:	84400035 	stwio	r17,0(r16)
 2000fb8:	80000035 	stwio	zero,0(r16)
 2000fbc:	84400035 	stwio	r17,0(r16)
 2000fc0:	80000035 	stwio	zero,0(r16)
 2000fc4:	84400035 	stwio	r17,0(r16)
 2000fc8:	80000035 	stwio	zero,0(r16)
 2000fcc:	84400035 	stwio	r17,0(r16)
 2000fd0:	80000035 	stwio	zero,0(r16)
 2000fd4:	84400035 	stwio	r17,0(r16)
 2000fd8:	80000035 	stwio	zero,0(r16)
 2000fdc:	84400035 	stwio	r17,0(r16)
 2000fe0:	d1277104 	addi	r4,gp,-25148
 2000fe4:	00801084 	movi	r2,66
 2000fe8:	90000045 	stb	zero,1(r18)
 2000fec:	90000085 	stb	zero,2(r18)
 2000ff0:	900000c5 	stb	zero,3(r18)
 2000ff4:	90000105 	stb	zero,4(r18)
 2000ff8:	d0a77105 	stb	r2,-25148(gp)
 2000ffc:	20008f00 	call	20008f0 <send_cmd>
 2001000:	a0000035 	stwio	zero,0(r20)
 2001004:	80000035 	stwio	zero,0(r16)
 2001008:	84400035 	stwio	r17,0(r16)
 200100c:	80000035 	stwio	zero,0(r16)
 2001010:	84400035 	stwio	r17,0(r16)
 2001014:	01000084 	movi	r4,2
 2001018:	20009f40 	call	20009f4 <response_R>
 200101c:	10803fcc 	andi	r2,r2,255
 2001020:	88800a2e 	bgeu	r17,r2,200104c <SD_card_init+0x268>
 2001024:	00800044 	movi	r2,1
 2001028:	dfc00617 	ldw	ra,24(sp)
 200102c:	dd400517 	ldw	r21,20(sp)
 2001030:	dd000417 	ldw	r20,16(sp)
 2001034:	dcc00317 	ldw	r19,12(sp)
 2001038:	dc800217 	ldw	r18,8(sp)
 200103c:	dc400117 	ldw	r17,4(sp)
 2001040:	dc000017 	ldw	r16,0(sp)
 2001044:	dec00704 	addi	sp,sp,28
 2001048:	f800283a 	ret
 200104c:	80000035 	stwio	zero,0(r16)
 2001050:	84400035 	stwio	r17,0(r16)
 2001054:	80000035 	stwio	zero,0(r16)
 2001058:	84400035 	stwio	r17,0(r16)
 200105c:	80000035 	stwio	zero,0(r16)
 2001060:	84400035 	stwio	r17,0(r16)
 2001064:	80000035 	stwio	zero,0(r16)
 2001068:	84400035 	stwio	r17,0(r16)
 200106c:	80000035 	stwio	zero,0(r16)
 2001070:	84400035 	stwio	r17,0(r16)
 2001074:	80000035 	stwio	zero,0(r16)
 2001078:	84400035 	stwio	r17,0(r16)
 200107c:	80000035 	stwio	zero,0(r16)
 2001080:	84400035 	stwio	r17,0(r16)
 2001084:	80000035 	stwio	zero,0(r16)
 2001088:	84400035 	stwio	r17,0(r16)
 200108c:	d1277104 	addi	r4,gp,-25148
 2001090:	008010c4 	movi	r2,67
 2001094:	90000045 	stb	zero,1(r18)
 2001098:	90000085 	stb	zero,2(r18)
 200109c:	900000c5 	stb	zero,3(r18)
 20010a0:	90000105 	stb	zero,4(r18)
 20010a4:	d0a77105 	stb	r2,-25148(gp)
 20010a8:	20008f00 	call	20008f0 <send_cmd>
 20010ac:	a0000035 	stwio	zero,0(r20)
 20010b0:	80000035 	stwio	zero,0(r16)
 20010b4:	84400035 	stwio	r17,0(r16)
 20010b8:	80000035 	stwio	zero,0(r16)
 20010bc:	84400035 	stwio	r17,0(r16)
 20010c0:	01000184 	movi	r4,6
 20010c4:	20009f40 	call	20009f4 <response_R>
 20010c8:	10803fcc 	andi	r2,r2,255
 20010cc:	88bfd536 	bltu	r17,r2,2001024 <SD_card_init+0x240>
 20010d0:	008080b4 	movhi	r2,514
 20010d4:	10a88604 	addi	r2,r2,-24040
 20010d8:	10c00083 	ldbu	r3,2(r2)
 20010dc:	11400043 	ldbu	r5,1(r2)
 20010e0:	d5678304 	addi	r21,gp,-25076
 20010e4:	a8c00045 	stb	r3,1(r21)
 20010e8:	d1678305 	stb	r5,-25076(gp)
 20010ec:	80000035 	stwio	zero,0(r16)
 20010f0:	84400035 	stwio	r17,0(r16)
 20010f4:	80000035 	stwio	zero,0(r16)
 20010f8:	84400035 	stwio	r17,0(r16)
 20010fc:	80000035 	stwio	zero,0(r16)
 2001100:	84400035 	stwio	r17,0(r16)
 2001104:	80000035 	stwio	zero,0(r16)
 2001108:	84400035 	stwio	r17,0(r16)
 200110c:	80000035 	stwio	zero,0(r16)
 2001110:	84400035 	stwio	r17,0(r16)
 2001114:	80000035 	stwio	zero,0(r16)
 2001118:	84400035 	stwio	r17,0(r16)
 200111c:	80000035 	stwio	zero,0(r16)
 2001120:	84400035 	stwio	r17,0(r16)
 2001124:	80000035 	stwio	zero,0(r16)
 2001128:	84400035 	stwio	r17,0(r16)
 200112c:	d1277104 	addi	r4,gp,-25148
 2001130:	90c00085 	stb	r3,2(r18)
 2001134:	00801244 	movi	r2,73
 2001138:	91400045 	stb	r5,1(r18)
 200113c:	900000c5 	stb	zero,3(r18)
 2001140:	90000105 	stb	zero,4(r18)
 2001144:	d0a77105 	stb	r2,-25148(gp)
 2001148:	20008f00 	call	20008f0 <send_cmd>
 200114c:	a0000035 	stwio	zero,0(r20)
 2001150:	80000035 	stwio	zero,0(r16)
 2001154:	84400035 	stwio	r17,0(r16)
 2001158:	80000035 	stwio	zero,0(r16)
 200115c:	84400035 	stwio	r17,0(r16)
 2001160:	01000084 	movi	r4,2
 2001164:	20009f40 	call	20009f4 <response_R>
 2001168:	10803fcc 	andi	r2,r2,255
 200116c:	88bfad36 	bltu	r17,r2,2001024 <SD_card_init+0x240>
 2001170:	0005883a 	mov	r2,zero
 2001174:	04005004 	movi	r16,320
 2001178:	04400044 	movi	r17,1
 200117c:	00c00204 	movi	r3,8
 2001180:	80000035 	stwio	zero,0(r16)
 2001184:	84400035 	stwio	r17,0(r16)
 2001188:	10800044 	addi	r2,r2,1
 200118c:	10fffc1e 	bne	r2,r3,2001180 <SD_card_init+0x39c>
 2001190:	a9400043 	ldbu	r5,1(r21)
 2001194:	d0e78303 	ldbu	r3,-25076(gp)
 2001198:	d1277104 	addi	r4,gp,-25148
 200119c:	008011c4 	movi	r2,71
 20011a0:	98c00045 	stb	r3,1(r19)
 20011a4:	99400085 	stb	r5,2(r19)
 20011a8:	980000c5 	stb	zero,3(r19)
 20011ac:	98000105 	stb	zero,4(r19)
 20011b0:	d0a77105 	stb	r2,-25148(gp)
 20011b4:	20008f00 	call	20008f0 <send_cmd>
 20011b8:	00c04d04 	movi	r3,308
 20011bc:	18000035 	stwio	zero,0(r3)
 20011c0:	80000035 	stwio	zero,0(r16)
 20011c4:	84400035 	stwio	r17,0(r16)
 20011c8:	80000035 	stwio	zero,0(r16)
 20011cc:	84400035 	stwio	r17,0(r16)
 20011d0:	01000044 	movi	r4,1
 20011d4:	20009f40 	call	20009f4 <response_R>
 20011d8:	10803fcc 	andi	r2,r2,255
 20011dc:	88bf9136 	bltu	r17,r2,2001024 <SD_card_init+0x240>
 20011e0:	0005883a 	mov	r2,zero
 20011e4:	04005004 	movi	r16,320
 20011e8:	04400044 	movi	r17,1
 20011ec:	00c00204 	movi	r3,8
 20011f0:	80000035 	stwio	zero,0(r16)
 20011f4:	84400035 	stwio	r17,0(r16)
 20011f8:	10800044 	addi	r2,r2,1
 20011fc:	10fffc1e 	bne	r2,r3,20011f0 <SD_card_init+0x40c>
 2001200:	00c00084 	movi	r3,2
 2001204:	d1277104 	addi	r4,gp,-25148
 2001208:	00801404 	movi	r2,80
 200120c:	98c000c5 	stb	r3,3(r19)
 2001210:	98000105 	stb	zero,4(r19)
 2001214:	98000045 	stb	zero,1(r19)
 2001218:	98000085 	stb	zero,2(r19)
 200121c:	d0a77105 	stb	r2,-25148(gp)
 2001220:	20008f00 	call	20008f0 <send_cmd>
 2001224:	00c04d04 	movi	r3,308
 2001228:	18000035 	stwio	zero,0(r3)
 200122c:	80000035 	stwio	zero,0(r16)
 2001230:	84400035 	stwio	r17,0(r16)
 2001234:	80000035 	stwio	zero,0(r16)
 2001238:	84400035 	stwio	r17,0(r16)
 200123c:	01000044 	movi	r4,1
 2001240:	20009f40 	call	20009f4 <response_R>
 2001244:	10803fcc 	andi	r2,r2,255
 2001248:	88bf7636 	bltu	r17,r2,2001024 <SD_card_init+0x240>
 200124c:	0005883a 	mov	r2,zero
 2001250:	d4677245 	stb	r17,-25143(gp)
 2001254:	003f7406 	br	2001028 <SD_card_init+0x244>

02001258 <SD_read_lba>:
 2001258:	defff704 	addi	sp,sp,-36
 200125c:	ddc00715 	stw	r23,28(sp)
 2001260:	dd400515 	stw	r21,20(sp)
 2001264:	dcc00315 	stw	r19,12(sp)
 2001268:	dfc00815 	stw	ra,32(sp)
 200126c:	dd800615 	stw	r22,24(sp)
 2001270:	dd000415 	stw	r20,16(sp)
 2001274:	dc800215 	stw	r18,8(sp)
 2001278:	dc400115 	stw	r17,4(sp)
 200127c:	dc000015 	stw	r16,0(sp)
 2001280:	302f883a 	mov	r23,r6
 2001284:	202b883a 	mov	r21,r4
 2001288:	2827883a 	mov	r19,r5
 200128c:	30007b26 	beq	r6,zero,200147c <SD_read_lba+0x224>
 2001290:	0025883a 	mov	r18,zero
 2001294:	0029883a 	mov	r20,zero
 2001298:	d5a77104 	addi	r22,gp,-25148
 200129c:	04005004 	movi	r16,320
 20012a0:	80000035 	stwio	zero,0(r16)
 20012a4:	04400044 	movi	r17,1
 20012a8:	84400035 	stwio	r17,0(r16)
 20012ac:	80000035 	stwio	zero,0(r16)
 20012b0:	84400035 	stwio	r17,0(r16)
 20012b4:	80000035 	stwio	zero,0(r16)
 20012b8:	84400035 	stwio	r17,0(r16)
 20012bc:	80000035 	stwio	zero,0(r16)
 20012c0:	84400035 	stwio	r17,0(r16)
 20012c4:	80000035 	stwio	zero,0(r16)
 20012c8:	84400035 	stwio	r17,0(r16)
 20012cc:	80000035 	stwio	zero,0(r16)
 20012d0:	84400035 	stwio	r17,0(r16)
 20012d4:	80000035 	stwio	zero,0(r16)
 20012d8:	84400035 	stwio	r17,0(r16)
 20012dc:	80000035 	stwio	zero,0(r16)
 20012e0:	84400035 	stwio	r17,0(r16)
 20012e4:	9806d3fa 	srli	r3,r19,15
 20012e8:	980ad1fa 	srli	r5,r19,7
 20012ec:	9ccd883a 	add	r6,r19,r19
 20012f0:	d1277104 	addi	r4,gp,-25148
 20012f4:	00801444 	movi	r2,81
 20012f8:	b0c00045 	stb	r3,1(r22)
 20012fc:	b1400085 	stb	r5,2(r22)
 2001300:	b18000c5 	stb	r6,3(r22)
 2001304:	b0000105 	stb	zero,4(r22)
 2001308:	d0a77105 	stb	r2,-25148(gp)
 200130c:	20008f00 	call	20008f0 <send_cmd>
 2001310:	00c04d04 	movi	r3,308
 2001314:	18000035 	stwio	zero,0(r3)
 2001318:	80000035 	stwio	zero,0(r16)
 200131c:	84400035 	stwio	r17,0(r16)
 2001320:	80000035 	stwio	zero,0(r16)
 2001324:	84400035 	stwio	r17,0(r16)
 2001328:	01005004 	movi	r4,320
 200132c:	20000035 	stwio	zero,0(r4)
 2001330:	00800044 	movi	r2,1
 2001334:	20800035 	stwio	r2,0(r4)
 2001338:	00c04804 	movi	r3,288
 200133c:	18800037 	ldwio	r2,0(r3)
 2001340:	103ff91e 	bne	r2,zero,2001328 <SD_read_lba+0xd0>
 2001344:	a813883a 	mov	r9,r21
 2001348:	0011883a 	mov	r8,zero
 200134c:	01005004 	movi	r4,320
 2001350:	20000035 	stwio	zero,0(r4)
 2001354:	01c00044 	movi	r7,1
 2001358:	21c00035 	stwio	r7,0(r4)
 200135c:	948b883a 	add	r5,r18,r18
 2001360:	2807883a 	mov	r3,r5
 2001364:	01804804 	movi	r6,288
 2001368:	30800037 	ldwio	r2,0(r6)
 200136c:	10000126 	beq	r2,zero,2001374 <SD_read_lba+0x11c>
 2001370:	29c6b03a 	or	r3,r5,r7
 2001374:	20000035 	stwio	zero,0(r4)
 2001378:	21c00035 	stwio	r7,0(r4)
 200137c:	18cb883a 	add	r5,r3,r3
 2001380:	2807883a 	mov	r3,r5
 2001384:	30800037 	ldwio	r2,0(r6)
 2001388:	10000126 	beq	r2,zero,2001390 <SD_read_lba+0x138>
 200138c:	28c00054 	ori	r3,r5,1
 2001390:	20000035 	stwio	zero,0(r4)
 2001394:	21c00035 	stwio	r7,0(r4)
 2001398:	18cb883a 	add	r5,r3,r3
 200139c:	2807883a 	mov	r3,r5
 20013a0:	30800037 	ldwio	r2,0(r6)
 20013a4:	10000126 	beq	r2,zero,20013ac <SD_read_lba+0x154>
 20013a8:	28c00054 	ori	r3,r5,1
 20013ac:	20000035 	stwio	zero,0(r4)
 20013b0:	21c00035 	stwio	r7,0(r4)
 20013b4:	18cb883a 	add	r5,r3,r3
 20013b8:	2807883a 	mov	r3,r5
 20013bc:	30800037 	ldwio	r2,0(r6)
 20013c0:	10000126 	beq	r2,zero,20013c8 <SD_read_lba+0x170>
 20013c4:	28c00054 	ori	r3,r5,1
 20013c8:	20000035 	stwio	zero,0(r4)
 20013cc:	21c00035 	stwio	r7,0(r4)
 20013d0:	18cb883a 	add	r5,r3,r3
 20013d4:	2807883a 	mov	r3,r5
 20013d8:	30800037 	ldwio	r2,0(r6)
 20013dc:	10000126 	beq	r2,zero,20013e4 <SD_read_lba+0x18c>
 20013e0:	28c00054 	ori	r3,r5,1
 20013e4:	20000035 	stwio	zero,0(r4)
 20013e8:	21c00035 	stwio	r7,0(r4)
 20013ec:	18cb883a 	add	r5,r3,r3
 20013f0:	2807883a 	mov	r3,r5
 20013f4:	30800037 	ldwio	r2,0(r6)
 20013f8:	10000126 	beq	r2,zero,2001400 <SD_read_lba+0x1a8>
 20013fc:	28c00054 	ori	r3,r5,1
 2001400:	20000035 	stwio	zero,0(r4)
 2001404:	21c00035 	stwio	r7,0(r4)
 2001408:	18cb883a 	add	r5,r3,r3
 200140c:	2807883a 	mov	r3,r5
 2001410:	30800037 	ldwio	r2,0(r6)
 2001414:	10000126 	beq	r2,zero,200141c <SD_read_lba+0x1c4>
 2001418:	28c00054 	ori	r3,r5,1
 200141c:	20000035 	stwio	zero,0(r4)
 2001420:	21c00035 	stwio	r7,0(r4)
 2001424:	18e5883a 	add	r18,r3,r3
 2001428:	30800037 	ldwio	r2,0(r6)
 200142c:	10000126 	beq	r2,zero,2001434 <SD_read_lba+0x1dc>
 2001430:	94800054 	ori	r18,r18,1
 2001434:	42000044 	addi	r8,r8,1
 2001438:	00808004 	movi	r2,512
 200143c:	4c800005 	stb	r18,0(r9)
 2001440:	4a400044 	addi	r9,r9,1
 2001444:	40bfc11e 	bne	r8,r2,200134c <SD_read_lba+0xf4>
 2001448:	aa2b883a 	add	r21,r21,r8
 200144c:	0005883a 	mov	r2,zero
 2001450:	00c05004 	movi	r3,320
 2001454:	01400044 	movi	r5,1
 2001458:	01000404 	movi	r4,16
 200145c:	18000035 	stwio	zero,0(r3)
 2001460:	19400035 	stwio	r5,0(r3)
 2001464:	10800044 	addi	r2,r2,1
 2001468:	113ffc1e 	bne	r2,r4,200145c <SD_read_lba+0x204>
 200146c:	a5000044 	addi	r20,r20,1
 2001470:	bd000226 	beq	r23,r20,200147c <SD_read_lba+0x224>
 2001474:	9cc00044 	addi	r19,r19,1
 2001478:	003f8806 	br	200129c <SD_read_lba+0x44>
 200147c:	00800044 	movi	r2,1
 2001480:	d0a77245 	stb	r2,-25143(gp)
 2001484:	0005883a 	mov	r2,zero
 2001488:	dfc00817 	ldw	ra,32(sp)
 200148c:	ddc00717 	ldw	r23,28(sp)
 2001490:	dd800617 	ldw	r22,24(sp)
 2001494:	dd400517 	ldw	r21,20(sp)
 2001498:	dd000417 	ldw	r20,16(sp)
 200149c:	dcc00317 	ldw	r19,12(sp)
 20014a0:	dc800217 	ldw	r18,8(sp)
 20014a4:	dc400117 	ldw	r17,4(sp)
 20014a8:	dc000017 	ldw	r16,0(sp)
 20014ac:	dec00904 	addi	sp,sp,36
 20014b0:	f800283a 	ret

020014b4 <get_rel_sector>:
 20014b4:	defff604 	addi	sp,sp,-40
 20014b8:	dd000415 	stw	r20,16(sp)
 20014bc:	dc800215 	stw	r18,8(sp)
 20014c0:	2829883a 	mov	r20,r5
 20014c4:	2025883a 	mov	r18,r4
 20014c8:	d1676817 	ldw	r5,-25184(gp)
 20014cc:	21000417 	ldw	r4,16(r4)
 20014d0:	dfc00915 	stw	ra,36(sp)
 20014d4:	dcc00315 	stw	r19,12(sp)
 20014d8:	dc400115 	stw	r17,4(sp)
 20014dc:	3027883a 	mov	r19,r6
 20014e0:	dc000015 	stw	r16,0(sp)
 20014e4:	df000815 	stw	fp,32(sp)
 20014e8:	3821883a 	mov	r16,r7
 20014ec:	ddc00715 	stw	r23,28(sp)
 20014f0:	dd800615 	stw	r22,24(sp)
 20014f4:	dd400515 	stw	r21,20(sp)
 20014f8:	20040e00 	call	20040e0 <__udivsi3>
 20014fc:	1009883a 	mov	r4,r2
 2001500:	2003e100 	call	2003e10 <__floatunsidf>
 2001504:	180b883a 	mov	r5,r3
 2001508:	1009883a 	mov	r4,r2
 200150c:	200327c0 	call	200327c <ceil>
 2001510:	180b883a 	mov	r5,r3
 2001514:	1009883a 	mov	r4,r2
 2001518:	2003d380 	call	2003d38 <__fixdfsi>
 200151c:	1023883a 	mov	r17,r2
 2001520:	80800d16 	blt	r16,r2,2001558 <get_rel_sector+0xa4>
 2001524:	00bfffc4 	movi	r2,-1
 2001528:	dfc00917 	ldw	ra,36(sp)
 200152c:	df000817 	ldw	fp,32(sp)
 2001530:	ddc00717 	ldw	r23,28(sp)
 2001534:	dd800617 	ldw	r22,24(sp)
 2001538:	dd400517 	ldw	r21,20(sp)
 200153c:	dd000417 	ldw	r20,16(sp)
 2001540:	dcc00317 	ldw	r19,12(sp)
 2001544:	dc800217 	ldw	r18,8(sp)
 2001548:	dc400117 	ldw	r17,4(sp)
 200154c:	dc000017 	ldw	r16,0(sp)
 2001550:	dec00a04 	addi	sp,sp,40
 2001554:	f800283a 	ret
 2001558:	803ff216 	blt	r16,zero,2001524 <get_rel_sector+0x70>
 200155c:	d5675543 	ldbu	r21,-25259(gp)
 2001560:	d0a76217 	ldw	r2,-25208(gp)
 2001564:	d0e78d17 	ldw	r3,-25036(gp)
 2001568:	856cb03a 	or	r22,r16,r21
 200156c:	010003c4 	movi	r4,15
 2001570:	10f9883a 	add	fp,r2,r3
 2001574:	25802836 	bltu	r4,r22,2001618 <get_rel_sector+0x164>
 2001578:	8004913a 	slli	r2,r16,4
 200157c:	00c08074 	movhi	r3,513
 2001580:	18c64a04 	addi	r3,r3,6440
 2001584:	1544b03a 	or	r2,r2,r21
 2001588:	10c5883a 	add	r2,r2,r3
 200158c:	11000003 	ldbu	r4,0(r2)
 2001590:	a80b883a 	mov	r5,r21
 2001594:	20040f00 	call	20040f0 <__mulsi3>
 2001598:	80afc83a 	sub	r23,r16,r2
 200159c:	008003c4 	movi	r2,15
 20015a0:	15802236 	bltu	r2,r22,200162c <get_rel_sector+0x178>
 20015a4:	8004913a 	slli	r2,r16,4
 20015a8:	00c08074 	movhi	r3,513
 20015ac:	18c64a04 	addi	r3,r3,6440
 20015b0:	1544b03a 	or	r2,r2,r21
 20015b4:	10c5883a 	add	r2,r2,r3
 20015b8:	11000003 	ldbu	r4,0(r2)
 20015bc:	2003c400 	call	2003c40 <__floatsidf>
 20015c0:	180b883a 	mov	r5,r3
 20015c4:	1009883a 	mov	r4,r2
 20015c8:	20034900 	call	2003490 <floor>
 20015cc:	180b883a 	mov	r5,r3
 20015d0:	1009883a 	mov	r4,r2
 20015d4:	2003d380 	call	2003d38 <__fixdfsi>
 20015d8:	1085883a 	add	r2,r2,r2
 20015dc:	1085883a 	add	r2,r2,r2
 20015e0:	14c5883a 	add	r2,r2,r19
 20015e4:	11000017 	ldw	r4,0(r2)
 20015e8:	a80b883a 	mov	r5,r21
 20015ec:	213fff84 	addi	r4,r4,-2
 20015f0:	20040f00 	call	20040f0 <__mulsi3>
 20015f4:	b885883a 	add	r2,r23,r2
 20015f8:	e08b883a 	add	r5,fp,r2
 20015fc:	a009883a 	mov	r4,r20
 2001600:	01800044 	movi	r6,1
 2001604:	20012580 	call	2001258 <SD_read_lba>
 2001608:	88ffffc4 	addi	r3,r17,-1
 200160c:	80c00c26 	beq	r16,r3,2001640 <get_rel_sector+0x18c>
 2001610:	0005883a 	mov	r2,zero
 2001614:	003fc406 	br	2001528 <get_rel_sector+0x74>
 2001618:	8009883a 	mov	r4,r16
 200161c:	a80b883a 	mov	r5,r21
 2001620:	20040200 	call	2004020 <__divsi3>
 2001624:	1009883a 	mov	r4,r2
 2001628:	003fd906 	br	2001590 <get_rel_sector+0xdc>
 200162c:	8009883a 	mov	r4,r16
 2001630:	a80b883a 	mov	r5,r21
 2001634:	20040200 	call	2004020 <__divsi3>
 2001638:	1009883a 	mov	r4,r2
 200163c:	003fdf06 	br	20015bc <get_rel_sector+0x108>
 2001640:	d1676817 	ldw	r5,-25184(gp)
 2001644:	8809883a 	mov	r4,r17
 2001648:	20040f00 	call	20040f0 <__mulsi3>
 200164c:	90c00417 	ldw	r3,16(r18)
 2001650:	1885c83a 	sub	r2,r3,r2
 2001654:	003fb406 	br	2001528 <get_rel_sector+0x74>

02001658 <search_for_filetype>:
 2001658:	deff7004 	addi	sp,sp,-576
 200165c:	dcc08915 	stw	r19,548(sp)
 2001660:	dcc00404 	addi	r19,sp,16
 2001664:	ddc08d15 	stw	r23,564(sp)
 2001668:	dc008615 	stw	r16,536(sp)
 200166c:	d9408415 	stw	r5,528(sp)
 2001670:	202f883a 	mov	r23,r4
 2001674:	3021883a 	mov	r16,r6
 2001678:	9809883a 	mov	r4,r19
 200167c:	000b883a 	mov	r5,zero
 2001680:	01808004 	movi	r6,512
 2001684:	dfc08f15 	stw	ra,572(sp)
 2001688:	df008e15 	stw	fp,568(sp)
 200168c:	dd808c15 	stw	r22,560(sp)
 2001690:	dd408b15 	stw	r21,556(sp)
 2001694:	dd008a15 	stw	r20,552(sp)
 2001698:	dc808815 	stw	r18,544(sp)
 200169c:	dc408715 	stw	r17,540(sp)
 20016a0:	d9c08515 	stw	r7,532(sp)
 20016a4:	20046bc0 	call	20046bc <memset>
 20016a8:	d8808517 	ldw	r2,532(sp)
 20016ac:	1000b526 	beq	r2,zero,2001984 <search_for_filetype+0x32c>
 20016b0:	d0e78d17 	ldw	r3,-25036(gp)
 20016b4:	d0a75a17 	ldw	r2,-25240(gp)
 20016b8:	9809883a 	mov	r4,r19
 20016bc:	01800044 	movi	r6,1
 20016c0:	18ab883a 	add	r21,r3,r2
 20016c4:	a80b883a 	mov	r5,r21
 20016c8:	20012580 	call	2001258 <SD_read_lba>
 20016cc:	0025883a 	mov	r18,zero
 20016d0:	0029883a 	mov	r20,zero
 20016d4:	91403fcc 	andi	r5,r18,255
 20016d8:	2822917a 	slli	r17,r5,5
 20016dc:	9c45883a 	add	r2,r19,r17
 20016e0:	11800003 	ldbu	r6,0(r2)
 20016e4:	30005926 	beq	r6,zero,200184c <search_for_filetype+0x1f4>
 20016e8:	894002c4 	addi	r5,r17,11
 20016ec:	9945883a 	add	r2,r19,r5
 20016f0:	11000003 	ldbu	r4,0(r2)
 20016f4:	20c003cc 	andi	r3,r4,15
 20016f8:	20800fcc 	andi	r2,r4,63
 20016fc:	18806a26 	beq	r3,r2,20018a8 <search_for_filetype+0x250>
 2001700:	9945883a 	add	r2,r19,r5
 2001704:	14000003 	ldbu	r16,0(r2)
 2001708:	81003fcc 	andi	r4,r16,255
 200170c:	2080020c 	andi	r2,r4,8
 2001710:	10003e1e 	bne	r2,zero,200180c <search_for_filetype+0x1b4>
 2001714:	9c45883a 	add	r2,r19,r17
 2001718:	13c00003 	ldbu	r15,0(r2)
 200171c:	00803944 	movi	r2,229
 2001720:	78c03fcc 	andi	r3,r15,255
 2001724:	18803926 	beq	r3,r2,200180c <search_for_filetype+0x1b4>
 2001728:	2080040c 	andi	r2,r4,16
 200172c:	1000771e 	bne	r2,zero,200190c <search_for_filetype+0x2b4>
 2001730:	dac00484 	addi	r11,sp,18
 2001734:	dd800444 	addi	r22,sp,17
 2001738:	df0004c4 	addi	fp,sp,19
 200173c:	da000504 	addi	r8,sp,20
 2001740:	d9c00544 	addi	r7,sp,21
 2001744:	d9800584 	addi	r6,sp,22
 2001748:	d94005c4 	addi	r5,sp,23
 200174c:	d9000604 	addi	r4,sp,24
 2001750:	d8c00644 	addi	r3,sp,25
 2001754:	d8800684 	addi	r2,sp,26
 2001758:	5c55883a 	add	r10,r11,r17
 200175c:	4451883a 	add	r8,r8,r17
 2001760:	3c4f883a 	add	r7,r7,r17
 2001764:	2c4b883a 	add	r5,r5,r17
 2001768:	2449883a 	add	r4,r4,r17
 200176c:	1c47883a 	add	r3,r3,r17
 2001770:	1445883a 	add	r2,r2,r17
 2001774:	b453883a 	add	r9,r22,r17
 2001778:	344d883a 	add	r6,r6,r17
 200177c:	e457883a 	add	r11,fp,r17
 2001780:	23000003 	ldbu	r12,0(r4)
 2001784:	1b400003 	ldbu	r13,0(r3)
 2001788:	13800003 	ldbu	r14,0(r2)
 200178c:	48c00003 	ldbu	r3,0(r9)
 2001790:	50800003 	ldbu	r2,0(r10)
 2001794:	59000003 	ldbu	r4,0(r11)
 2001798:	42400003 	ldbu	r9,0(r8)
 200179c:	3a800003 	ldbu	r10,0(r7)
 20017a0:	32000003 	ldbu	r8,0(r6)
 20017a4:	29c00003 	ldbu	r7,0(r5)
 20017a8:	d90001c5 	stb	r4,7(sp)
 20017ac:	dbc00105 	stb	r15,4(sp)
 20017b0:	d8c00145 	stb	r3,5(sp)
 20017b4:	d8800185 	stb	r2,6(sp)
 20017b8:	da400205 	stb	r9,8(sp)
 20017bc:	da800245 	stb	r10,9(sp)
 20017c0:	da000285 	stb	r8,10(sp)
 20017c4:	d9c002c5 	stb	r7,11(sp)
 20017c8:	db000005 	stb	r12,0(sp)
 20017cc:	db400045 	stb	r13,1(sp)
 20017d0:	db800085 	stb	r14,2(sp)
 20017d4:	db000305 	stb	r12,12(sp)
 20017d8:	db400345 	stb	r13,13(sp)
 20017dc:	db800385 	stb	r14,14(sp)
 20017e0:	d80003c5 	stb	zero,15(sp)
 20017e4:	d80000c5 	stb	zero,3(sp)
 20017e8:	b809883a 	mov	r4,r23
 20017ec:	d80b883a 	mov	r5,sp
 20017f0:	20048800 	call	2004880 <strcmp>
 20017f4:	1000051e 	bne	r2,zero,200180c <search_for_filetype+0x1b4>
 20017f8:	d0e74f17 	ldw	r3,-25284(gp)
 20017fc:	d0a75017 	ldw	r2,-25280(gp)
 2001800:	18806f26 	beq	r3,r2,20019c0 <search_for_filetype+0x368>
 2001804:	18800044 	addi	r2,r3,1
 2001808:	d0a74f15 	stw	r2,-25284(gp)
 200180c:	94800044 	addi	r18,r18,1
 2001810:	91403fcc 	andi	r5,r18,255
 2001814:	2806917a 	slli	r3,r5,5
 2001818:	d0a76817 	ldw	r2,-25184(gp)
 200181c:	18bfae36 	bltu	r3,r2,20016d8 <search_for_filetype+0x80>
 2001820:	a5000044 	addi	r20,r20,1
 2001824:	a54b883a 	add	r5,r20,r21
 2001828:	01800044 	movi	r6,1
 200182c:	9809883a 	mov	r4,r19
 2001830:	20012580 	call	2001258 <SD_read_lba>
 2001834:	000b883a 	mov	r5,zero
 2001838:	2822917a 	slli	r17,r5,5
 200183c:	0025883a 	mov	r18,zero
 2001840:	9c45883a 	add	r2,r19,r17
 2001844:	11800003 	ldbu	r6,0(r2)
 2001848:	303fa71e 	bne	r6,zero,20016e8 <search_for_filetype+0x90>
 200184c:	d8808517 	ldw	r2,532(sp)
 2001850:	10005826 	beq	r2,zero,20019b4 <search_for_filetype+0x35c>
 2001854:	d0a75017 	ldw	r2,-25280(gp)
 2001858:	10005126 	beq	r2,zero,20019a0 <search_for_filetype+0x348>
 200185c:	d9408417 	ldw	r5,528(sp)
 2001860:	b809883a 	mov	r4,r23
 2001864:	000d883a 	mov	r6,zero
 2001868:	01c00044 	movi	r7,1
 200186c:	d0275015 	stw	zero,-25280(gp)
 2001870:	d0274f15 	stw	zero,-25284(gp)
 2001874:	20016580 	call	2001658 <search_for_filetype>
 2001878:	dfc08f17 	ldw	ra,572(sp)
 200187c:	df008e17 	ldw	fp,568(sp)
 2001880:	ddc08d17 	ldw	r23,564(sp)
 2001884:	dd808c17 	ldw	r22,560(sp)
 2001888:	dd408b17 	ldw	r21,556(sp)
 200188c:	dd008a17 	ldw	r20,552(sp)
 2001890:	dcc08917 	ldw	r19,548(sp)
 2001894:	dc808817 	ldw	r18,544(sp)
 2001898:	dc408717 	ldw	r17,540(sp)
 200189c:	dc008617 	ldw	r16,536(sp)
 20018a0:	dec09004 	addi	sp,sp,576
 20018a4:	f800283a 	ret
 20018a8:	00800204 	movi	r2,8
 20018ac:	20bfd726 	beq	r4,r2,200180c <search_for_filetype+0x1b4>
 20018b0:	00803944 	movi	r2,229
 20018b4:	30bf9226 	beq	r6,r2,2001700 <search_for_filetype+0xa8>
 20018b8:	34002fcc 	andi	r16,r6,191
 20018bc:	803f9026 	beq	r16,zero,2001700 <search_for_filetype+0xa8>
 20018c0:	94800044 	addi	r18,r18,1
 20018c4:	90c03fcc 	andi	r3,r18,255
 20018c8:	1806917a 	slli	r3,r3,5
 20018cc:	d0a76817 	ldw	r2,-25184(gp)
 20018d0:	9809883a 	mov	r4,r19
 20018d4:	01800044 	movi	r6,1
 20018d8:	843fffc4 	addi	r16,r16,-1
 20018dc:	1880052e 	bgeu	r3,r2,20018f4 <search_for_filetype+0x29c>
 20018e0:	803ff71e 	bne	r16,zero,20018c0 <search_for_filetype+0x268>
 20018e4:	90803fcc 	andi	r2,r18,255
 20018e8:	1022917a 	slli	r17,r2,5
 20018ec:	894002c4 	addi	r5,r17,11
 20018f0:	003f8306 	br	2001700 <search_for_filetype+0xa8>
 20018f4:	a1a9883a 	add	r20,r20,r6
 20018f8:	ad0b883a 	add	r5,r21,r20
 20018fc:	0025883a 	mov	r18,zero
 2001900:	20012580 	call	2001258 <SD_read_lba>
 2001904:	803fee1e 	bne	r16,zero,20018c0 <search_for_filetype+0x268>
 2001908:	003ff606 	br	20018e4 <search_for_filetype+0x28c>
 200190c:	89800504 	addi	r6,r17,20
 2001910:	89400684 	addi	r5,r17,26
 2001914:	d8800444 	addi	r2,sp,17
 2001918:	1189883a 	add	r4,r2,r6
 200191c:	1145883a 	add	r2,r2,r5
 2001920:	11c00003 	ldbu	r7,0(r2)
 2001924:	20c00003 	ldbu	r3,0(r4)
 2001928:	998d883a 	add	r6,r19,r6
 200192c:	994b883a 	add	r5,r19,r5
 2001930:	19c7883a 	add	r3,r3,r7
 2001934:	30800003 	ldbu	r2,0(r6)
 2001938:	29000003 	ldbu	r4,0(r5)
 200193c:	1806923a 	slli	r3,r3,8
 2001940:	d1675543 	ldbu	r5,-25259(gp)
 2001944:	2089883a 	add	r4,r4,r2
 2001948:	20c9883a 	add	r4,r4,r3
 200194c:	213fff84 	addi	r4,r4,-2
 2001950:	20040f00 	call	20040f0 <__mulsi3>
 2001954:	d1a76217 	ldw	r6,-25208(gp)
 2001958:	d0e78d17 	ldw	r3,-25036(gp)
 200195c:	d9408417 	ldw	r5,528(sp)
 2001960:	b809883a 	mov	r4,r23
 2001964:	30cd883a 	add	r6,r6,r3
 2001968:	118d883a 	add	r6,r2,r6
 200196c:	000f883a 	mov	r7,zero
 2001970:	20016580 	call	2001658 <search_for_filetype>
 2001974:	103fa51e 	bne	r2,zero,200180c <search_for_filetype+0x1b4>
 2001978:	000b883a 	mov	r5,zero
 200197c:	2805883a 	mov	r2,r5
 2001980:	003fbd06 	br	2001878 <search_for_filetype+0x220>
 2001984:	9809883a 	mov	r4,r19
 2001988:	800b883a 	mov	r5,r16
 200198c:	01800044 	movi	r6,1
 2001990:	20012580 	call	2001258 <SD_read_lba>
 2001994:	802b883a 	mov	r21,r16
 2001998:	04800084 	movi	r18,2
 200199c:	003f4c06 	br	20016d0 <search_for_filetype+0x78>
 20019a0:	b80b883a 	mov	r5,r23
 20019a4:	01008074 	movhi	r4,513
 20019a8:	2104a004 	addi	r4,r4,4736
 20019ac:	20047540 	call	2004754 <printf>
 20019b0:	003fb106 	br	2001878 <search_for_filetype+0x220>
 20019b4:	01400044 	movi	r5,1
 20019b8:	2805883a 	mov	r2,r5
 20019bc:	003fae06 	br	2001878 <search_for_filetype+0x220>
 20019c0:	d9008417 	ldw	r4,528(sp)
 20019c4:	d9400104 	addi	r5,sp,4
 20019c8:	200493c0 	call	200493c <strcpy>
 20019cc:	88c00704 	addi	r3,r17,28
 20019d0:	88800684 	addi	r2,r17,26
 20019d4:	89400504 	addi	r5,r17,20
 20019d8:	d9800484 	addi	r6,sp,18
 20019dc:	30d3883a 	add	r9,r6,r3
 20019e0:	e0d7883a 	add	r11,fp,r3
 20019e4:	b089883a 	add	r4,r22,r2
 20019e8:	b14f883a 	add	r7,r22,r5
 20019ec:	b0d1883a 	add	r8,r22,r3
 20019f0:	23000003 	ldbu	r12,0(r4)
 20019f4:	39800003 	ldbu	r6,0(r7)
 20019f8:	42800003 	ldbu	r10,0(r8)
 20019fc:	49c00003 	ldbu	r7,0(r9)
 2001a00:	5a000003 	ldbu	r8,0(r11)
 2001a04:	98c7883a 	add	r3,r19,r3
 2001a08:	dac08417 	ldw	r11,528(sp)
 2001a0c:	9885883a 	add	r2,r19,r2
 2001a10:	994b883a 	add	r5,r19,r5
 2001a14:	2a400003 	ldbu	r9,0(r5)
 2001a18:	11000003 	ldbu	r4,0(r2)
 2001a1c:	330d883a 	add	r6,r6,r12
 2001a20:	18800003 	ldbu	r2,0(r3)
 2001a24:	5014923a 	slli	r10,r10,8
 2001a28:	4010963a 	slli	r8,r8,24
 2001a2c:	380e943a 	slli	r7,r7,16
 2001a30:	300c923a 	slli	r6,r6,8
 2001a34:	5c0002c5 	stb	r16,11(r11)
 2001a38:	d1675543 	ldbu	r5,-25259(gp)
 2001a3c:	2249883a 	add	r4,r4,r9
 2001a40:	1284b03a 	or	r2,r2,r10
 2001a44:	3a0eb03a 	or	r7,r7,r8
 2001a48:	2189883a 	add	r4,r4,r6
 2001a4c:	11c4b03a 	or	r2,r2,r7
 2001a50:	59000315 	stw	r4,12(r11)
 2001a54:	58800415 	stw	r2,16(r11)
 2001a58:	213fff84 	addi	r4,r4,-2
 2001a5c:	20040f00 	call	20040f0 <__mulsi3>
 2001a60:	d1278d17 	ldw	r4,-25036(gp)
 2001a64:	d0e76217 	ldw	r3,-25208(gp)
 2001a68:	000b883a 	mov	r5,zero
 2001a6c:	d0274f15 	stw	zero,-25284(gp)
 2001a70:	1907883a 	add	r3,r3,r4
 2001a74:	10c5883a 	add	r2,r2,r3
 2001a78:	d1275017 	ldw	r4,-25280(gp)
 2001a7c:	d8c08417 	ldw	r3,528(sp)
 2001a80:	21000044 	addi	r4,r4,1
 2001a84:	18800515 	stw	r2,20(r3)
 2001a88:	2805883a 	mov	r2,r5
 2001a8c:	18000615 	stw	zero,24(r3)
 2001a90:	d1275015 	stw	r4,-25280(gp)
 2001a94:	003f7806 	br	2001878 <search_for_filetype+0x220>

02001a98 <CalcFATSecAndOffset>:
 2001a98:	d0e77e17 	ldw	r3,-25096(gp)
 2001a9c:	deff7c04 	addi	sp,sp,-528
 2001aa0:	0083fd04 	movi	r2,4084
 2001aa4:	dc008015 	stw	r16,512(sp)
 2001aa8:	dfc08315 	stw	ra,524(sp)
 2001aac:	dcc08215 	stw	r19,520(sp)
 2001ab0:	dc408115 	stw	r17,516(sp)
 2001ab4:	2021883a 	mov	r16,r4
 2001ab8:	10c03036 	bltu	r2,r3,2001b7c <CalcFATSecAndOffset+0xe4>
 2001abc:	2004d07a 	srli	r2,r4,1
 2001ac0:	2085883a 	add	r2,r4,r2
 2001ac4:	d0a75715 	stw	r2,-25252(gp)
 2001ac8:	1023883a 	mov	r17,r2
 2001acc:	d4e76817 	ldw	r19,-25184(gp)
 2001ad0:	8809883a 	mov	r4,r17
 2001ad4:	980b883a 	mov	r5,r19
 2001ad8:	20040e00 	call	20040e0 <__udivsi3>
 2001adc:	d0e78217 	ldw	r3,-25080(gp)
 2001ae0:	8809883a 	mov	r4,r17
 2001ae4:	980b883a 	mov	r5,r19
 2001ae8:	10e3883a 	add	r17,r2,r3
 2001aec:	d4677615 	stw	r17,-25128(gp)
 2001af0:	20040e80 	call	20040e8 <__umodsi3>
 2001af4:	d0e78d17 	ldw	r3,-25036(gp)
 2001af8:	01808004 	movi	r6,512
 2001afc:	d809883a 	mov	r4,sp
 2001b00:	88e3883a 	add	r17,r17,r3
 2001b04:	000b883a 	mov	r5,zero
 2001b08:	d0a76615 	stw	r2,-25192(gp)
 2001b0c:	20046bc0 	call	20046bc <memset>
 2001b10:	d809883a 	mov	r4,sp
 2001b14:	880b883a 	mov	r5,r17
 2001b18:	01800044 	movi	r6,1
 2001b1c:	20012580 	call	2001258 <SD_read_lba>
 2001b20:	d0e77e17 	ldw	r3,-25096(gp)
 2001b24:	0083fd04 	movi	r2,4084
 2001b28:	10c01b36 	bltu	r2,r3,2001b98 <CalcFATSecAndOffset+0x100>
 2001b2c:	d0e76617 	ldw	r3,-25192(gp)
 2001b30:	00807fc4 	movi	r2,511
 2001b34:	18804a26 	beq	r3,r2,2001c60 <CalcFATSecAndOffset+0x1c8>
 2001b38:	8080004c 	andi	r2,r16,1
 2001b3c:	1005003a 	cmpeq	r2,r2,zero
 2001b40:	10003e1e 	bne	r2,zero,2001c3c <CalcFATSecAndOffset+0x1a4>
 2001b44:	d8c5883a 	add	r2,sp,r3
 2001b48:	10c00043 	ldbu	r3,1(r2)
 2001b4c:	11000003 	ldbu	r4,0(r2)
 2001b50:	1806923a 	slli	r3,r3,8
 2001b54:	20c8b03a 	or	r4,r4,r3
 2001b58:	200ed13a 	srli	r7,r4,4
 2001b5c:	d1e76c15 	stw	r7,-25168(gp)
 2001b60:	d1e76e15 	stw	r7,-25160(gp)
 2001b64:	dfc08317 	ldw	ra,524(sp)
 2001b68:	dcc08217 	ldw	r19,520(sp)
 2001b6c:	dc408117 	ldw	r17,516(sp)
 2001b70:	dc008017 	ldw	r16,512(sp)
 2001b74:	dec08404 	addi	sp,sp,528
 2001b78:	f800283a 	ret
 2001b7c:	00bffd14 	movui	r2,65524
 2001b80:	10c02a2e 	bgeu	r2,r3,2001c2c <CalcFATSecAndOffset+0x194>
 2001b84:	2105883a 	add	r2,r4,r4
 2001b88:	1085883a 	add	r2,r2,r2
 2001b8c:	1023883a 	mov	r17,r2
 2001b90:	d0a75715 	stw	r2,-25252(gp)
 2001b94:	003fcd06 	br	2001acc <CalcFATSecAndOffset+0x34>
 2001b98:	00bffd14 	movui	r2,65524
 2001b9c:	10c00e36 	bltu	r2,r3,2001bd8 <CalcFATSecAndOffset+0x140>
 2001ba0:	d0e76617 	ldw	r3,-25192(gp)
 2001ba4:	d8c9883a 	add	r4,sp,r3
 2001ba8:	20800043 	ldbu	r2,1(r4)
 2001bac:	20c00003 	ldbu	r3,0(r4)
 2001bb0:	1004923a 	slli	r2,r2,8
 2001bb4:	1886b03a 	or	r3,r3,r2
 2001bb8:	d0e76e15 	stw	r3,-25160(gp)
 2001bbc:	d0e76515 	stw	r3,-25196(gp)
 2001bc0:	dfc08317 	ldw	ra,524(sp)
 2001bc4:	dcc08217 	ldw	r19,520(sp)
 2001bc8:	dc408117 	ldw	r17,516(sp)
 2001bcc:	dc008017 	ldw	r16,512(sp)
 2001bd0:	dec08404 	addi	sp,sp,528
 2001bd4:	f800283a 	ret
 2001bd8:	d0a76617 	ldw	r2,-25192(gp)
 2001bdc:	d889883a 	add	r4,sp,r2
 2001be0:	214000c3 	ldbu	r5,3(r4)
 2001be4:	20800083 	ldbu	r2,2(r4)
 2001be8:	21800043 	ldbu	r6,1(r4)
 2001bec:	280a963a 	slli	r5,r5,24
 2001bf0:	1004943a 	slli	r2,r2,16
 2001bf4:	300c923a 	slli	r6,r6,8
 2001bf8:	20c00003 	ldbu	r3,0(r4)
 2001bfc:	1144b03a 	or	r2,r2,r5
 2001c00:	1083ffec 	andhi	r2,r2,4095
 2001c04:	1986b03a 	or	r3,r3,r6
 2001c08:	10c4b03a 	or	r2,r2,r3
 2001c0c:	d0a76e15 	stw	r2,-25160(gp)
 2001c10:	d0a75215 	stw	r2,-25272(gp)
 2001c14:	dfc08317 	ldw	ra,524(sp)
 2001c18:	dcc08217 	ldw	r19,520(sp)
 2001c1c:	dc408117 	ldw	r17,516(sp)
 2001c20:	dc008017 	ldw	r16,512(sp)
 2001c24:	dec08404 	addi	sp,sp,528
 2001c28:	f800283a 	ret
 2001c2c:	2105883a 	add	r2,r4,r4
 2001c30:	1023883a 	mov	r17,r2
 2001c34:	d0a75715 	stw	r2,-25252(gp)
 2001c38:	003fa406 	br	2001acc <CalcFATSecAndOffset+0x34>
 2001c3c:	d8c5883a 	add	r2,sp,r3
 2001c40:	10c00043 	ldbu	r3,1(r2)
 2001c44:	11000003 	ldbu	r4,0(r2)
 2001c48:	1806923a 	slli	r3,r3,8
 2001c4c:	20c8b03a 	or	r4,r4,r3
 2001c50:	21c3ffcc 	andi	r7,r4,4095
 2001c54:	d1e76c15 	stw	r7,-25168(gp)
 2001c58:	d1e76e15 	stw	r7,-25160(gp)
 2001c5c:	003fc106 	br	2001b64 <CalcFATSecAndOffset+0xcc>
 2001c60:	d1678d17 	ldw	r5,-25036(gp)
 2001c64:	d0a77617 	ldw	r2,-25128(gp)
 2001c68:	d9c07fc3 	ldbu	r7,511(sp)
 2001c6c:	29400044 	addi	r5,r5,1
 2001c70:	288b883a 	add	r5,r5,r2
 2001c74:	d809883a 	mov	r4,sp
 2001c78:	01800044 	movi	r6,1
 2001c7c:	d1e76c15 	stw	r7,-25168(gp)
 2001c80:	20012580 	call	2001258 <SD_read_lba>
 2001c84:	d8c00003 	ldbu	r3,0(sp)
 2001c88:	d1e76c17 	ldw	r7,-25168(gp)
 2001c8c:	18c003cc 	andi	r3,r3,15
 2001c90:	1806923a 	slli	r3,r3,8
 2001c94:	38ceb03a 	or	r7,r7,r3
 2001c98:	d1e76c15 	stw	r7,-25168(gp)
 2001c9c:	d1e76e15 	stw	r7,-25160(gp)
 2001ca0:	003fb006 	br	2001b64 <CalcFATSecAndOffset+0xcc>

02001ca4 <build_cluster_chain>:
 2001ca4:	30c00317 	ldw	r3,12(r6)
 2001ca8:	defff704 	addi	sp,sp,-36
 2001cac:	dc000015 	stw	r16,0(sp)
 2001cb0:	20c00015 	stw	r3,0(r4)
 2001cb4:	2021883a 	mov	r16,r4
 2001cb8:	1809883a 	mov	r4,r3
 2001cbc:	dc800215 	stw	r18,8(sp)
 2001cc0:	dfc00815 	stw	ra,32(sp)
 2001cc4:	ddc00715 	stw	r23,28(sp)
 2001cc8:	dd800615 	stw	r22,24(sp)
 2001ccc:	dd400515 	stw	r21,20(sp)
 2001cd0:	dd000415 	stw	r20,16(sp)
 2001cd4:	dcc00315 	stw	r19,12(sp)
 2001cd8:	dc400115 	stw	r17,4(sp)
 2001cdc:	2825883a 	mov	r18,r5
 2001ce0:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2001ce4:	00800044 	movi	r2,1
 2001ce8:	14800f2e 	bgeu	r2,r18,2001d28 <build_cluster_chain+0x84>
 2001cec:	1023883a 	mov	r17,r2
 2001cf0:	04c3fd04 	movi	r19,4084
 2001cf4:	0543fdc4 	movi	r21,4087
 2001cf8:	053ffd14 	movui	r20,65524
 2001cfc:	05fffdd4 	movui	r23,65527
 2001d00:	05840034 	movhi	r22,4096
 2001d04:	b5bffdc4 	addi	r22,r22,-9
 2001d08:	d1276e17 	ldw	r4,-25160(gp)
 2001d0c:	d0a77e17 	ldw	r2,-25096(gp)
 2001d10:	81000115 	stw	r4,4(r16)
 2001d14:	98800f36 	bltu	r19,r2,2001d54 <build_cluster_chain+0xb0>
 2001d18:	a900102e 	bgeu	r21,r4,2001d5c <build_cluster_chain+0xb8>
 2001d1c:	8c400044 	addi	r17,r17,1
 2001d20:	84000104 	addi	r16,r16,4
 2001d24:	8cbff81e 	bne	r17,r18,2001d08 <build_cluster_chain+0x64>
 2001d28:	dfc00817 	ldw	ra,32(sp)
 2001d2c:	ddc00717 	ldw	r23,28(sp)
 2001d30:	dd800617 	ldw	r22,24(sp)
 2001d34:	dd400517 	ldw	r21,20(sp)
 2001d38:	dd000417 	ldw	r20,16(sp)
 2001d3c:	dcc00317 	ldw	r19,12(sp)
 2001d40:	dc800217 	ldw	r18,8(sp)
 2001d44:	dc400117 	ldw	r17,4(sp)
 2001d48:	dc000017 	ldw	r16,0(sp)
 2001d4c:	dec00904 	addi	sp,sp,36
 2001d50:	f800283a 	ret
 2001d54:	a0800636 	bltu	r20,r2,2001d70 <build_cluster_chain+0xcc>
 2001d58:	b93ff036 	bltu	r23,r4,2001d1c <build_cluster_chain+0x78>
 2001d5c:	8c400044 	addi	r17,r17,1
 2001d60:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2001d64:	84000104 	addi	r16,r16,4
 2001d68:	8cbfe71e 	bne	r17,r18,2001d08 <build_cluster_chain+0x64>
 2001d6c:	003fee06 	br	2001d28 <build_cluster_chain+0x84>
 2001d70:	b13ffa2e 	bgeu	r22,r4,2001d5c <build_cluster_chain+0xb8>
 2001d74:	8c400044 	addi	r17,r17,1
 2001d78:	84000104 	addi	r16,r16,4
 2001d7c:	8cbfe21e 	bne	r17,r18,2001d08 <build_cluster_chain+0x64>
 2001d80:	003fe906 	br	2001d28 <build_cluster_chain+0x84>

02001d84 <prevsong>:
 2001d84:	d0a75017 	ldw	r2,-25280(gp)
 2001d88:	defff704 	addi	sp,sp,-36
 2001d8c:	dcc00315 	stw	r19,12(sp)
 2001d90:	dc000015 	stw	r16,0(sp)
 2001d94:	04c00044 	movi	r19,1
 2001d98:	040080b4 	movhi	r16,514
 2001d9c:	84288b04 	addi	r16,r16,-24020
 2001da0:	000d883a 	mov	r6,zero
 2001da4:	980f883a 	mov	r7,r19
 2001da8:	800b883a 	mov	r5,r16
 2001dac:	10bfff84 	addi	r2,r2,-2
 2001db0:	01008074 	movhi	r4,513
 2001db4:	2104a804 	addi	r4,r4,4768
 2001db8:	dfc00815 	stw	ra,32(sp)
 2001dbc:	dc800215 	stw	r18,8(sp)
 2001dc0:	dc400115 	stw	r17,4(sp)
 2001dc4:	ddc00715 	stw	r23,28(sp)
 2001dc8:	dd800615 	stw	r22,24(sp)
 2001dcc:	dd400515 	stw	r21,20(sp)
 2001dd0:	dd000415 	stw	r20,16(sp)
 2001dd4:	d0a75015 	stw	r2,-25280(gp)
 2001dd8:	20016580 	call	2001658 <search_for_filetype>
 2001ddc:	8009883a 	mov	r4,r16
 2001de0:	20003d40 	call	20003d4 <LCD_File_Buffering>
 2001de4:	d1275543 	ldbu	r4,-25259(gp)
 2001de8:	d1676817 	ldw	r5,-25184(gp)
 2001dec:	04408074 	movhi	r17,513
 2001df0:	8c54fe04 	addi	r17,r17,21496
 2001df4:	20040f00 	call	20040f0 <__mulsi3>
 2001df8:	81000417 	ldw	r4,16(r16)
 2001dfc:	100b883a 	mov	r5,r2
 2001e00:	20040e00 	call	20040e0 <__udivsi3>
 2001e04:	1009883a 	mov	r4,r2
 2001e08:	2003e100 	call	2003e10 <__floatunsidf>
 2001e0c:	180b883a 	mov	r5,r3
 2001e10:	1009883a 	mov	r4,r2
 2001e14:	200327c0 	call	200327c <ceil>
 2001e18:	0011883a 	mov	r8,zero
 2001e1c:	024ffc34 	movhi	r9,16368
 2001e20:	180b883a 	mov	r5,r3
 2001e24:	480f883a 	mov	r7,r9
 2001e28:	1009883a 	mov	r4,r2
 2001e2c:	400d883a 	mov	r6,r8
 2001e30:	2003b440 	call	2003b44 <__adddf3>
 2001e34:	1009883a 	mov	r4,r2
 2001e38:	180b883a 	mov	r5,r3
 2001e3c:	2003d380 	call	2003d38 <__fixdfsi>
 2001e40:	1025883a 	mov	r18,r2
 2001e44:	80800317 	ldw	r2,12(r16)
 2001e48:	d4a77f15 	stw	r18,-25092(gp)
 2001e4c:	1009883a 	mov	r4,r2
 2001e50:	88800015 	stw	r2,0(r17)
 2001e54:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2001e58:	9c80102e 	bgeu	r19,r18,2001e9c <prevsong+0x118>
 2001e5c:	9821883a 	mov	r16,r19
 2001e60:	8c400104 	addi	r17,r17,4
 2001e64:	04c3fd04 	movi	r19,4084
 2001e68:	0543fdc4 	movi	r21,4087
 2001e6c:	053ffd14 	movui	r20,65524
 2001e70:	05fffdd4 	movui	r23,65527
 2001e74:	05840034 	movhi	r22,4096
 2001e78:	b5bffdc4 	addi	r22,r22,-9
 2001e7c:	d1276e17 	ldw	r4,-25160(gp)
 2001e80:	d0a77e17 	ldw	r2,-25096(gp)
 2001e84:	89000015 	stw	r4,0(r17)
 2001e88:	98801236 	bltu	r19,r2,2001ed4 <prevsong+0x150>
 2001e8c:	a900132e 	bgeu	r21,r4,2001edc <prevsong+0x158>
 2001e90:	84000044 	addi	r16,r16,1
 2001e94:	8c400104 	addi	r17,r17,4
 2001e98:	943ff81e 	bne	r18,r16,2001e7c <prevsong+0xf8>
 2001e9c:	d1677a17 	ldw	r5,-25112(gp)
 2001ea0:	010080b4 	movhi	r4,514
 2001ea4:	21288b04 	addi	r4,r4,-24020
 2001ea8:	dfc00817 	ldw	ra,32(sp)
 2001eac:	ddc00717 	ldw	r23,28(sp)
 2001eb0:	dd800617 	ldw	r22,24(sp)
 2001eb4:	dd400517 	ldw	r21,20(sp)
 2001eb8:	dd000417 	ldw	r20,16(sp)
 2001ebc:	dcc00317 	ldw	r19,12(sp)
 2001ec0:	dc800217 	ldw	r18,8(sp)
 2001ec4:	dc400117 	ldw	r17,4(sp)
 2001ec8:	dc000017 	ldw	r16,0(sp)
 2001ecc:	dec00904 	addi	sp,sp,36
 2001ed0:	20005041 	jmpi	2000504 <LCD_Display>
 2001ed4:	a0800636 	bltu	r20,r2,2001ef0 <prevsong+0x16c>
 2001ed8:	b93fed36 	bltu	r23,r4,2001e90 <prevsong+0x10c>
 2001edc:	84000044 	addi	r16,r16,1
 2001ee0:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2001ee4:	8c400104 	addi	r17,r17,4
 2001ee8:	943fe41e 	bne	r18,r16,2001e7c <prevsong+0xf8>
 2001eec:	003feb06 	br	2001e9c <prevsong+0x118>
 2001ef0:	b13ffa2e 	bgeu	r22,r4,2001edc <prevsong+0x158>
 2001ef4:	84000044 	addi	r16,r16,1
 2001ef8:	8c400104 	addi	r17,r17,4
 2001efc:	943fdf1e 	bne	r18,r16,2001e7c <prevsong+0xf8>
 2001f00:	003fe606 	br	2001e9c <prevsong+0x118>

02001f04 <nextsong>:
 2001f04:	defff704 	addi	sp,sp,-36
 2001f08:	dcc00315 	stw	r19,12(sp)
 2001f0c:	dc000015 	stw	r16,0(sp)
 2001f10:	04c00044 	movi	r19,1
 2001f14:	040080b4 	movhi	r16,514
 2001f18:	84288b04 	addi	r16,r16,-24020
 2001f1c:	000d883a 	mov	r6,zero
 2001f20:	980f883a 	mov	r7,r19
 2001f24:	800b883a 	mov	r5,r16
 2001f28:	01008074 	movhi	r4,513
 2001f2c:	2104a804 	addi	r4,r4,4768
 2001f30:	dfc00815 	stw	ra,32(sp)
 2001f34:	dc800215 	stw	r18,8(sp)
 2001f38:	dc400115 	stw	r17,4(sp)
 2001f3c:	ddc00715 	stw	r23,28(sp)
 2001f40:	dd800615 	stw	r22,24(sp)
 2001f44:	dd400515 	stw	r21,20(sp)
 2001f48:	dd000415 	stw	r20,16(sp)
 2001f4c:	20016580 	call	2001658 <search_for_filetype>
 2001f50:	8009883a 	mov	r4,r16
 2001f54:	20003d40 	call	20003d4 <LCD_File_Buffering>
 2001f58:	d1275543 	ldbu	r4,-25259(gp)
 2001f5c:	d1676817 	ldw	r5,-25184(gp)
 2001f60:	04408074 	movhi	r17,513
 2001f64:	8c54fe04 	addi	r17,r17,21496
 2001f68:	20040f00 	call	20040f0 <__mulsi3>
 2001f6c:	81000417 	ldw	r4,16(r16)
 2001f70:	100b883a 	mov	r5,r2
 2001f74:	20040e00 	call	20040e0 <__udivsi3>
 2001f78:	1009883a 	mov	r4,r2
 2001f7c:	2003e100 	call	2003e10 <__floatunsidf>
 2001f80:	180b883a 	mov	r5,r3
 2001f84:	1009883a 	mov	r4,r2
 2001f88:	200327c0 	call	200327c <ceil>
 2001f8c:	0011883a 	mov	r8,zero
 2001f90:	024ffc34 	movhi	r9,16368
 2001f94:	180b883a 	mov	r5,r3
 2001f98:	480f883a 	mov	r7,r9
 2001f9c:	1009883a 	mov	r4,r2
 2001fa0:	400d883a 	mov	r6,r8
 2001fa4:	2003b440 	call	2003b44 <__adddf3>
 2001fa8:	1009883a 	mov	r4,r2
 2001fac:	180b883a 	mov	r5,r3
 2001fb0:	2003d380 	call	2003d38 <__fixdfsi>
 2001fb4:	1025883a 	mov	r18,r2
 2001fb8:	80800317 	ldw	r2,12(r16)
 2001fbc:	d4a77f15 	stw	r18,-25092(gp)
 2001fc0:	1009883a 	mov	r4,r2
 2001fc4:	88800015 	stw	r2,0(r17)
 2001fc8:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2001fcc:	9c80102e 	bgeu	r19,r18,2002010 <nextsong+0x10c>
 2001fd0:	9821883a 	mov	r16,r19
 2001fd4:	8c400104 	addi	r17,r17,4
 2001fd8:	04c3fd04 	movi	r19,4084
 2001fdc:	0543fdc4 	movi	r21,4087
 2001fe0:	053ffd14 	movui	r20,65524
 2001fe4:	05fffdd4 	movui	r23,65527
 2001fe8:	05840034 	movhi	r22,4096
 2001fec:	b5bffdc4 	addi	r22,r22,-9
 2001ff0:	d1276e17 	ldw	r4,-25160(gp)
 2001ff4:	d0a77e17 	ldw	r2,-25096(gp)
 2001ff8:	89000015 	stw	r4,0(r17)
 2001ffc:	98801236 	bltu	r19,r2,2002048 <nextsong+0x144>
 2002000:	a900132e 	bgeu	r21,r4,2002050 <nextsong+0x14c>
 2002004:	84000044 	addi	r16,r16,1
 2002008:	8c400104 	addi	r17,r17,4
 200200c:	943ff81e 	bne	r18,r16,2001ff0 <nextsong+0xec>
 2002010:	d1677a17 	ldw	r5,-25112(gp)
 2002014:	010080b4 	movhi	r4,514
 2002018:	21288b04 	addi	r4,r4,-24020
 200201c:	dfc00817 	ldw	ra,32(sp)
 2002020:	ddc00717 	ldw	r23,28(sp)
 2002024:	dd800617 	ldw	r22,24(sp)
 2002028:	dd400517 	ldw	r21,20(sp)
 200202c:	dd000417 	ldw	r20,16(sp)
 2002030:	dcc00317 	ldw	r19,12(sp)
 2002034:	dc800217 	ldw	r18,8(sp)
 2002038:	dc400117 	ldw	r17,4(sp)
 200203c:	dc000017 	ldw	r16,0(sp)
 2002040:	dec00904 	addi	sp,sp,36
 2002044:	20005041 	jmpi	2000504 <LCD_Display>
 2002048:	a0800636 	bltu	r20,r2,2002064 <nextsong+0x160>
 200204c:	b93fed36 	bltu	r23,r4,2002004 <nextsong+0x100>
 2002050:	84000044 	addi	r16,r16,1
 2002054:	2001a980 	call	2001a98 <CalcFATSecAndOffset>
 2002058:	8c400104 	addi	r17,r17,4
 200205c:	943fe41e 	bne	r18,r16,2001ff0 <nextsong+0xec>
 2002060:	003feb06 	br	2002010 <nextsong+0x10c>
 2002064:	b13ffa2e 	bgeu	r22,r4,2002050 <nextsong+0x14c>
 2002068:	84000044 	addi	r16,r16,1
 200206c:	8c400104 	addi	r17,r17,4
 2002070:	943fdf1e 	bne	r18,r16,2001ff0 <nextsong+0xec>
 2002074:	003fe606 	br	2002010 <nextsong+0x10c>

02002078 <init_bs>:
 2002078:	deff7404 	addi	sp,sp,-560
 200207c:	000b883a 	mov	r5,zero
 2002080:	01808004 	movi	r6,512
 2002084:	d809883a 	mov	r4,sp
 2002088:	dfc08b15 	stw	ra,556(sp)
 200208c:	df008a15 	stw	fp,552(sp)
 2002090:	ddc08915 	stw	r23,548(sp)
 2002094:	dd808815 	stw	r22,544(sp)
 2002098:	dd408715 	stw	r21,540(sp)
 200209c:	dd008615 	stw	r20,536(sp)
 20020a0:	dcc08515 	stw	r19,532(sp)
 20020a4:	dc808415 	stw	r18,528(sp)
 20020a8:	dc408315 	stw	r17,524(sp)
 20020ac:	dc008215 	stw	r16,520(sp)
 20020b0:	20046bc0 	call	20046bc <memset>
 20020b4:	d1678d17 	ldw	r5,-25036(gp)
 20020b8:	d809883a 	mov	r4,sp
 20020bc:	01800044 	movi	r6,1
 20020c0:	20012580 	call	2001258 <SD_read_lba>
 20020c4:	d8c07f83 	ldbu	r3,510(sp)
 20020c8:	00801544 	movi	r2,85
 20020cc:	18800e26 	beq	r3,r2,2002108 <init_bs+0x90>
 20020d0:	00c00044 	movi	r3,1
 20020d4:	1805883a 	mov	r2,r3
 20020d8:	dfc08b17 	ldw	ra,556(sp)
 20020dc:	df008a17 	ldw	fp,552(sp)
 20020e0:	ddc08917 	ldw	r23,548(sp)
 20020e4:	dd808817 	ldw	r22,544(sp)
 20020e8:	dd408717 	ldw	r21,540(sp)
 20020ec:	dd008617 	ldw	r20,536(sp)
 20020f0:	dcc08517 	ldw	r19,532(sp)
 20020f4:	dc808417 	ldw	r18,528(sp)
 20020f8:	dc408317 	ldw	r17,524(sp)
 20020fc:	dc008217 	ldw	r16,520(sp)
 2002100:	dec08c04 	addi	sp,sp,560
 2002104:	f800283a 	ret
 2002108:	d8c07fc3 	ldbu	r3,511(sp)
 200210c:	00802a84 	movi	r2,170
 2002110:	18bfef1e 	bne	r3,r2,20020d0 <init_bs+0x58>
 2002114:	d8800303 	ldbu	r2,12(sp)
 2002118:	d8c003c3 	ldbu	r3,15(sp)
 200211c:	d94002c3 	ldbu	r5,11(sp)
 2002120:	1004923a 	slli	r2,r2,8
 2002124:	da000383 	ldbu	r8,14(sp)
 2002128:	1806923a 	slli	r3,r3,8
 200212c:	288b883a 	add	r5,r5,r2
 2002130:	d8800083 	ldbu	r2,2(sp)
 2002134:	40f9883a 	add	fp,r8,r3
 2002138:	d2276144 	addi	r8,gp,-25211
 200213c:	40800085 	stb	r2,2(r8)
 2002140:	d8800003 	ldbu	r2,0(sp)
 2002144:	d8c00283 	ldbu	r3,10(sp)
 2002148:	d1a77284 	addi	r6,gp,-25142
 200214c:	d0a76145 	stb	r2,-25211(gp)
 2002150:	d88000c3 	ldbu	r2,3(sp)
 2002154:	30c001c5 	stb	r3,7(r6)
 2002158:	d8c00043 	ldbu	r3,1(sp)
 200215c:	d0a77285 	stb	r2,-25142(gp)
 2002160:	d8800143 	ldbu	r2,5(sp)
 2002164:	40c00045 	stb	r3,1(r8)
 2002168:	d8c00103 	ldbu	r3,4(sp)
 200216c:	30800085 	stb	r2,2(r6)
 2002170:	d88001c3 	ldbu	r2,7(sp)
 2002174:	d9000343 	ldbu	r4,13(sp)
 2002178:	30c00045 	stb	r3,1(r6)
 200217c:	d8c00183 	ldbu	r3,6(sp)
 2002180:	30800105 	stb	r2,4(r6)
 2002184:	d8800243 	ldbu	r2,9(sp)
 2002188:	d9008145 	stb	r4,517(sp)
 200218c:	30c000c5 	stb	r3,3(r6)
 2002190:	d9000403 	ldbu	r4,16(sp)
 2002194:	d8c00203 	ldbu	r3,8(sp)
 2002198:	30800185 	stb	r2,6(r6)
 200219c:	d8808143 	ldbu	r2,517(sp)
 20021a0:	30c00145 	stb	r3,5(r6)
 20021a4:	d9008105 	stb	r4,516(sp)
 20021a8:	d1676815 	stw	r5,-25184(gp)
 20021ac:	d9c00483 	ldbu	r7,18(sp)
 20021b0:	d9000443 	ldbu	r4,17(sp)
 20021b4:	d0a75545 	stb	r2,-25259(gp)
 20021b8:	d8808103 	ldbu	r2,516(sp)
 20021bc:	db000843 	ldbu	r12,33(sp)
 20021c0:	da000883 	ldbu	r8,34(sp)
 20021c4:	da8008c3 	ldbu	r10,35(sp)
 20021c8:	d0a76305 	stb	r2,-25204(gp)
 20021cc:	6018923a 	slli	r12,r12,8
 20021d0:	5014963a 	slli	r10,r10,24
 20021d4:	4010943a 	slli	r8,r8,16
 20021d8:	d8800803 	ldbu	r2,32(sp)
 20021dc:	380e923a 	slli	r7,r7,8
 20021e0:	4291883a 	add	r8,r8,r10
 20021e4:	1305883a 	add	r2,r2,r12
 20021e8:	dc400743 	ldbu	r17,29(sp)
 20021ec:	da400783 	ldbu	r9,30(sp)
 20021f0:	dac007c3 	ldbu	r11,31(sp)
 20021f4:	1205883a 	add	r2,r2,r8
 20021f8:	db400503 	ldbu	r13,20(sp)
 20021fc:	db8005c3 	ldbu	r14,23(sp)
 2002200:	dbc00643 	ldbu	r15,25(sp)
 2002204:	dc0006c3 	ldbu	r16,27(sp)
 2002208:	21c9883a 	add	r4,r4,r7
 200220c:	d8808015 	stw	r2,512(sp)
 2002210:	d8800543 	ldbu	r2,21(sp)
 2002214:	d1275615 	stw	r4,-25256(gp)
 2002218:	5816963a 	slli	r11,r11,24
 200221c:	8822923a 	slli	r17,r17,8
 2002220:	4812943a 	slli	r9,r9,16
 2002224:	2008917a 	slli	r4,r4,5
 2002228:	d9c00703 	ldbu	r7,28(sp)
 200222c:	681a923a 	slli	r13,r13,8
 2002230:	701c923a 	slli	r14,r14,8
 2002234:	781e923a 	slli	r15,r15,8
 2002238:	dc8004c3 	ldbu	r18,19(sp)
 200223c:	8020923a 	slli	r16,r16,8
 2002240:	dcc00583 	ldbu	r19,22(sp)
 2002244:	d8c00603 	ldbu	r3,24(sp)
 2002248:	d9800683 	ldbu	r6,26(sp)
 200224c:	d0a78905 	stb	r2,-25052(gp)
 2002250:	d8808017 	ldw	r2,512(sp)
 2002254:	4ad3883a 	add	r9,r9,r11
 2002258:	2909883a 	add	r4,r5,r4
 200225c:	3c4f883a 	add	r7,r7,r17
 2002260:	936f883a 	add	r23,r18,r13
 2002264:	1bc7883a 	add	r3,r3,r15
 2002268:	9ba5883a 	add	r18,r19,r14
 200226c:	340d883a 	add	r6,r6,r16
 2002270:	3a4f883a 	add	r7,r7,r9
 2002274:	213fffc4 	addi	r4,r4,-1
 2002278:	d7278215 	stw	fp,-25080(gp)
 200227c:	d0e75c15 	stw	r3,-25232(gp)
 2002280:	d1a78415 	stw	r6,-25072(gp)
 2002284:	d1e75d15 	stw	r7,-25228(gp)
 2002288:	d5e77015 	stw	r23,-25152(gp)
 200228c:	d4a76415 	stw	r18,-25200(gp)
 2002290:	d0a77b15 	stw	r2,-25108(gp)
 2002294:	20040e00 	call	20040e0 <__udivsi3>
 2002298:	102d883a 	mov	r22,r2
 200229c:	d0a78115 	stw	r2,-25084(gp)
 20022a0:	90007b1e 	bne	r18,zero,2002490 <init_bs+0x418>
 20022a4:	dd400943 	ldbu	r21,37(sp)
 20022a8:	d8800983 	ldbu	r2,38(sp)
 20022ac:	dc4009c3 	ldbu	r17,39(sp)
 20022b0:	d9000903 	ldbu	r4,36(sp)
 20022b4:	a82a923a 	slli	r21,r21,8
 20022b8:	1004943a 	slli	r2,r2,16
 20022bc:	8822963a 	slli	r17,r17,24
 20022c0:	dc800b43 	ldbu	r18,45(sp)
 20022c4:	da800b83 	ldbu	r10,46(sp)
 20022c8:	db400bc3 	ldbu	r13,47(sp)
 20022cc:	1445883a 	add	r2,r2,r17
 20022d0:	2549883a 	add	r4,r4,r21
 20022d4:	2089883a 	add	r4,r4,r2
 20022d8:	db801103 	ldbu	r14,68(sp)
 20022dc:	d0a76917 	ldw	r2,-25180(gp)
 20022e0:	dac01143 	ldbu	r11,69(sp)
 20022e4:	db001183 	ldbu	r12,70(sp)
 20022e8:	681a963a 	slli	r13,r13,24
 20022ec:	d8c00b03 	ldbu	r3,44(sp)
 20022f0:	9024923a 	slli	r18,r18,8
 20022f4:	5014943a 	slli	r10,r10,16
 20022f8:	dbc00a43 	ldbu	r15,41(sp)
 20022fc:	dc000ac3 	ldbu	r16,43(sp)
 2002300:	dcc00c43 	ldbu	r19,49(sp)
 2002304:	dd000cc3 	ldbu	r20,51(sp)
 2002308:	701c923a 	slli	r14,r14,8
 200230c:	6018963a 	slli	r12,r12,24
 2002310:	da4010c3 	ldbu	r9,67(sp)
 2002314:	5355883a 	add	r10,r10,r13
 2002318:	d0a76a15 	stw	r2,-25176(gp)
 200231c:	5816943a 	slli	r11,r11,16
 2002320:	d8801003 	ldbu	r2,64(sp)
 2002324:	1c87883a 	add	r3,r3,r18
 2002328:	1a87883a 	add	r3,r3,r10
 200232c:	781e923a 	slli	r15,r15,8
 2002330:	8020923a 	slli	r16,r16,8
 2002334:	d9400a03 	ldbu	r5,40(sp)
 2002338:	d9800a83 	ldbu	r6,42(sp)
 200233c:	d9c00c03 	ldbu	r7,48(sp)
 2002340:	da000c83 	ldbu	r8,50(sp)
 2002344:	9826923a 	slli	r19,r19,8
 2002348:	a028923a 	slli	r20,r20,8
 200234c:	d0e75815 	stw	r3,-25248(gp)
 2002350:	d8c01083 	ldbu	r3,66(sp)
 2002354:	4b93883a 	add	r9,r9,r14
 2002358:	5b17883a 	add	r11,r11,r12
 200235c:	d0a75b05 	stb	r2,-25236(gp)
 2002360:	d88011c3 	ldbu	r2,71(sp)
 2002364:	2bcb883a 	add	r5,r5,r15
 2002368:	340d883a 	add	r6,r6,r16
 200236c:	3ccf883a 	add	r7,r7,r19
 2002370:	4511883a 	add	r8,r8,r20
 2002374:	4ad3883a 	add	r9,r9,r11
 2002378:	d1675915 	stw	r5,-25244(gp)
 200237c:	d1a78c15 	stw	r6,-25040(gp)
 2002380:	014080b4 	movhi	r5,514
 2002384:	29689204 	addi	r5,r5,-23992
 2002388:	d1e78815 	stw	r7,-25056(gp)
 200238c:	d2276b15 	stw	r8,-25172(gp)
 2002390:	d0e75105 	stb	r3,-25276(gp)
 2002394:	d2678515 	stw	r9,-25068(gp)
 2002398:	d1276915 	stw	r4,-25180(gp)
 200239c:	28800005 	stb	r2,0(r5)
 20023a0:	d8801443 	ldbu	r2,81(sp)
 20023a4:	d8c01203 	ldbu	r3,72(sp)
 20023a8:	d1a75f04 	addi	r6,gp,-25220
 20023ac:	28800285 	stb	r2,10(r5)
 20023b0:	d8801243 	ldbu	r2,73(sp)
 20023b4:	28c00045 	stb	r3,1(r5)
 20023b8:	d8c01283 	ldbu	r3,74(sp)
 20023bc:	28800085 	stb	r2,2(r5)
 20023c0:	d88012c3 	ldbu	r2,75(sp)
 20023c4:	28c000c5 	stb	r3,3(r5)
 20023c8:	d8c01303 	ldbu	r3,76(sp)
 20023cc:	28800105 	stb	r2,4(r5)
 20023d0:	d8801343 	ldbu	r2,77(sp)
 20023d4:	28c00145 	stb	r3,5(r5)
 20023d8:	d8c01383 	ldbu	r3,78(sp)
 20023dc:	28800185 	stb	r2,6(r5)
 20023e0:	d88013c3 	ldbu	r2,79(sp)
 20023e4:	28c001c5 	stb	r3,7(r5)
 20023e8:	d8c01403 	ldbu	r3,80(sp)
 20023ec:	28800205 	stb	r2,8(r5)
 20023f0:	d8801483 	ldbu	r2,82(sp)
 20023f4:	28c00245 	stb	r3,9(r5)
 20023f8:	d8c014c3 	ldbu	r3,83(sp)
 20023fc:	d0a75f05 	stb	r2,-25220(gp)
 2002400:	d8801503 	ldbu	r2,84(sp)
 2002404:	30c00045 	stb	r3,1(r6)
 2002408:	d8c01543 	ldbu	r3,85(sp)
 200240c:	30800085 	stb	r2,2(r6)
 2002410:	d8801583 	ldbu	r2,86(sp)
 2002414:	30c000c5 	stb	r3,3(r6)
 2002418:	d8c015c3 	ldbu	r3,87(sp)
 200241c:	30800105 	stb	r2,4(r6)
 2002420:	d8801603 	ldbu	r2,88(sp)
 2002424:	30c00145 	stb	r3,5(r6)
 2002428:	30800185 	stb	r2,6(r6)
 200242c:	d8801643 	ldbu	r2,89(sp)
 2002430:	dc008103 	ldbu	r16,516(sp)
 2002434:	308001c5 	stb	r2,7(r6)
 2002438:	800b883a 	mov	r5,r16
 200243c:	20040f00 	call	20040f0 <__mulsi3>
 2002440:	e085883a 	add	r2,fp,r2
 2002444:	b087883a 	add	r3,r22,r2
 2002448:	d0e76215 	stw	r3,-25208(gp)
 200244c:	d0a75a15 	stw	r2,-25240(gp)
 2002450:	b8005026 	beq	r23,zero,2002594 <init_bs+0x51c>
 2002454:	d5e77d15 	stw	r23,-25100(gp)
 2002458:	d1676a17 	ldw	r5,-25176(gp)
 200245c:	8009883a 	mov	r4,r16
 2002460:	20040f00 	call	20040f0 <__mulsi3>
 2002464:	d0e77d17 	ldw	r3,-25100(gp)
 2002468:	e085883a 	add	r2,fp,r2
 200246c:	b085883a 	add	r2,r22,r2
 2002470:	d9408143 	ldbu	r5,517(sp)
 2002474:	1887c83a 	sub	r3,r3,r2
 2002478:	1809883a 	mov	r4,r3
 200247c:	d0e77c15 	stw	r3,-25104(gp)
 2002480:	20040e00 	call	20040e0 <__udivsi3>
 2002484:	0007883a 	mov	r3,zero
 2002488:	d0a77e15 	stw	r2,-25096(gp)
 200248c:	003f1106 	br	20020d4 <init_bs+0x5c>
 2002490:	d9000a03 	ldbu	r4,40(sp)
 2002494:	d8800a43 	ldbu	r2,41(sp)
 2002498:	d8c00a83 	ldbu	r3,42(sp)
 200249c:	2008923a 	slli	r4,r4,8
 20024a0:	d94009c3 	ldbu	r5,39(sp)
 20024a4:	1806963a 	slli	r3,r3,24
 20024a8:	1004943a 	slli	r2,r2,16
 20024ac:	290b883a 	add	r5,r5,r4
 20024b0:	010080f4 	movhi	r4,515
 20024b4:	213f36c4 	addi	r4,r4,-805
 20024b8:	10c5883a 	add	r2,r2,r3
 20024bc:	288b883a 	add	r5,r5,r2
 20024c0:	d8800d43 	ldbu	r2,53(sp)
 20024c4:	d8c00903 	ldbu	r3,36(sp)
 20024c8:	d1676715 	stw	r5,-25188(gp)
 20024cc:	20800285 	stb	r2,10(r4)
 20024d0:	d8800983 	ldbu	r2,38(sp)
 20024d4:	d0e78605 	stb	r3,-25064(gp)
 20024d8:	d8c00b03 	ldbu	r3,44(sp)
 20024dc:	d0a76d05 	stb	r2,-25164(gp)
 20024e0:	d8800ac3 	ldbu	r2,43(sp)
 20024e4:	20c00045 	stb	r3,1(r4)
 20024e8:	d8c00b83 	ldbu	r3,46(sp)
 20024ec:	20800005 	stb	r2,0(r4)
 20024f0:	d8800b43 	ldbu	r2,45(sp)
 20024f4:	20c000c5 	stb	r3,3(r4)
 20024f8:	d8c00c03 	ldbu	r3,48(sp)
 20024fc:	20800085 	stb	r2,2(r4)
 2002500:	d8800bc3 	ldbu	r2,47(sp)
 2002504:	20c00145 	stb	r3,5(r4)
 2002508:	d8c00c83 	ldbu	r3,50(sp)
 200250c:	20800105 	stb	r2,4(r4)
 2002510:	d8800c43 	ldbu	r2,49(sp)
 2002514:	20c001c5 	stb	r3,7(r4)
 2002518:	d8c00d03 	ldbu	r3,52(sp)
 200251c:	20800185 	stb	r2,6(r4)
 2002520:	d8800cc3 	ldbu	r2,51(sp)
 2002524:	20c00245 	stb	r3,9(r4)
 2002528:	d4a76a15 	stw	r18,-25176(gp)
 200252c:	20800205 	stb	r2,8(r4)
 2002530:	d8800d83 	ldbu	r2,54(sp)
 2002534:	d1a75344 	addi	r6,gp,-25267
 2002538:	9009883a 	mov	r4,r18
 200253c:	d0a75345 	stb	r2,-25267(gp)
 2002540:	d8800f43 	ldbu	r2,61(sp)
 2002544:	d8c00dc3 	ldbu	r3,55(sp)
 2002548:	dc408103 	ldbu	r17,516(sp)
 200254c:	30800185 	stb	r2,6(r6)
 2002550:	30c00045 	stb	r3,1(r6)
 2002554:	d8800e03 	ldbu	r2,56(sp)
 2002558:	d8c00e43 	ldbu	r3,57(sp)
 200255c:	880b883a 	mov	r5,r17
 2002560:	30800085 	stb	r2,2(r6)
 2002564:	30c000c5 	stb	r3,3(r6)
 2002568:	d8800e83 	ldbu	r2,58(sp)
 200256c:	d8c00ec3 	ldbu	r3,59(sp)
 2002570:	8821883a 	mov	r16,r17
 2002574:	30800105 	stb	r2,4(r6)
 2002578:	30c00145 	stb	r3,5(r6)
 200257c:	20040f00 	call	20040f0 <__mulsi3>
 2002580:	e085883a 	add	r2,fp,r2
 2002584:	b087883a 	add	r3,r22,r2
 2002588:	d0e76215 	stw	r3,-25208(gp)
 200258c:	d0a75a15 	stw	r2,-25240(gp)
 2002590:	b83fb01e 	bne	r23,zero,2002454 <init_bs+0x3dc>
 2002594:	d9008017 	ldw	r4,512(sp)
 2002598:	d1277d15 	stw	r4,-25100(gp)
 200259c:	003fae06 	br	2002458 <init_bs+0x3e0>

020025a0 <init_mbr>:
 20025a0:	deff7f04 	addi	sp,sp,-516
 20025a4:	d809883a 	mov	r4,sp
 20025a8:	000b883a 	mov	r5,zero
 20025ac:	01808004 	movi	r6,512
 20025b0:	dfc08015 	stw	ra,512(sp)
 20025b4:	20046bc0 	call	20046bc <memset>
 20025b8:	d809883a 	mov	r4,sp
 20025bc:	000b883a 	mov	r5,zero
 20025c0:	01800044 	movi	r6,1
 20025c4:	20012580 	call	2001258 <SD_read_lba>
 20025c8:	d8c07f83 	ldbu	r3,510(sp)
 20025cc:	00801544 	movi	r2,85
 20025d0:	18800526 	beq	r3,r2,20025e8 <init_mbr+0x48>
 20025d4:	02800044 	movi	r10,1
 20025d8:	5005883a 	mov	r2,r10
 20025dc:	dfc08017 	ldw	ra,512(sp)
 20025e0:	dec08104 	addi	sp,sp,516
 20025e4:	f800283a 	ret
 20025e8:	d8c07fc3 	ldbu	r3,511(sp)
 20025ec:	00802a84 	movi	r2,170
 20025f0:	d2e78b04 	addi	r11,gp,-25044
 20025f4:	d3277904 	addi	r12,gp,-25116
 20025f8:	0015883a 	mov	r10,zero
 20025fc:	18bff51e 	bne	r3,r2,20025d4 <init_mbr+0x34>
 2002600:	d9c071c3 	ldbu	r7,455(sp)
 2002604:	d8807203 	ldbu	r2,456(sp)
 2002608:	d9407243 	ldbu	r5,457(sp)
 200260c:	d98072c3 	ldbu	r6,459(sp)
 2002610:	d8c07303 	ldbu	r3,460(sp)
 2002614:	d9007343 	ldbu	r4,461(sp)
 2002618:	380e923a 	slli	r7,r7,8
 200261c:	280a963a 	slli	r5,r5,24
 2002620:	da007183 	ldbu	r8,454(sp)
 2002624:	1004943a 	slli	r2,r2,16
 2002628:	300c923a 	slli	r6,r6,8
 200262c:	2008963a 	slli	r4,r4,24
 2002630:	da407283 	ldbu	r9,458(sp)
 2002634:	1806943a 	slli	r3,r3,16
 2002638:	1145883a 	add	r2,r2,r5
 200263c:	41d1883a 	add	r8,r8,r7
 2002640:	1907883a 	add	r3,r3,r4
 2002644:	4091883a 	add	r8,r8,r2
 2002648:	4993883a 	add	r9,r9,r6
 200264c:	d8807043 	ldbu	r2,449(sp)
 2002650:	48d3883a 	add	r9,r9,r3
 2002654:	d8c07143 	ldbu	r3,453(sp)
 2002658:	58800085 	stb	r2,2(r11)
 200265c:	d8806f83 	ldbu	r2,446(sp)
 2002660:	60c00085 	stb	r3,2(r12)
 2002664:	d8c06fc3 	ldbu	r3,447(sp)
 2002668:	d0a75305 	stb	r2,-25268(gp)
 200266c:	d8807003 	ldbu	r2,448(sp)
 2002670:	d0e78b05 	stb	r3,-25044(gp)
 2002674:	d8c07083 	ldbu	r3,450(sp)
 2002678:	58800045 	stb	r2,1(r11)
 200267c:	d88070c3 	ldbu	r2,451(sp)
 2002680:	d0e76105 	stb	r3,-25212(gp)
 2002684:	d8c07103 	ldbu	r3,452(sp)
 2002688:	d0a77905 	stb	r2,-25116(gp)
 200268c:	5005883a 	mov	r2,r10
 2002690:	60c00045 	stb	r3,1(r12)
 2002694:	d2278d15 	stw	r8,-25036(gp)
 2002698:	d2677815 	stw	r9,-25120(gp)
 200269c:	dfc08017 	ldw	ra,512(sp)
 20026a0:	dec08104 	addi	sp,sp,516
 20026a4:	f800283a 	ret

020026a8 <double_speed>:
 20026a8:	d1275543 	ldbu	r4,-25259(gp)
 20026ac:	d1677f17 	ldw	r5,-25092(gp)
 20026b0:	defffa04 	addi	sp,sp,-24
 20026b4:	dfc00515 	stw	ra,20(sp)
 20026b8:	dd000415 	stw	r20,16(sp)
 20026bc:	dcc00315 	stw	r19,12(sp)
 20026c0:	dc800215 	stw	r18,8(sp)
 20026c4:	dc400115 	stw	r17,4(sp)
 20026c8:	dc000015 	stw	r16,0(sp)
 20026cc:	20040f00 	call	20040f0 <__mulsi3>
 20026d0:	0080220e 	bge	zero,r2,200275c <double_speed+0xb4>
 20026d4:	05000044 	movi	r20,1
 20026d8:	044080b4 	movhi	r17,514
 20026dc:	8c6894c4 	addi	r17,r17,-23981
 20026e0:	04003c04 	movi	r16,240
 20026e4:	04c03804 	movi	r19,224
 20026e8:	04808004 	movi	r18,512
 20026ec:	014080b4 	movhi	r5,514
 20026f0:	296894c4 	addi	r5,r5,-23981
 20026f4:	010080b4 	movhi	r4,514
 20026f8:	21288b04 	addi	r4,r4,-24020
 20026fc:	01808074 	movhi	r6,513
 2002700:	3194fe04 	addi	r6,r6,21496
 2002704:	a00f883a 	mov	r7,r20
 2002708:	20014b40 	call	20014b4 <get_rel_sector>
 200270c:	01400044 	movi	r5,1
 2002710:	80800037 	ldwio	r2,0(r16)
 2002714:	2c49883a 	add	r4,r5,r17
 2002718:	103ffd1e 	bne	r2,zero,2002710 <double_speed+0x68>
 200271c:	d0a78a17 	ldw	r2,-25048(gp)
 2002720:	20c00043 	ldbu	r3,1(r4)
 2002724:	21000003 	ldbu	r4,0(r4)
 2002728:	10001f1e 	bne	r2,zero,20027a8 <double_speed+0x100>
 200272c:	20803fcc 	andi	r2,r4,255
 2002730:	1004923a 	slli	r2,r2,8
 2002734:	18c03fcc 	andi	r3,r3,255
 2002738:	10c4b03a 	or	r2,r2,r3
 200273c:	98800035 	stwio	r2,0(r19)
 2002740:	29400104 	addi	r5,r5,4
 2002744:	917ff20e 	bge	r18,r5,2002710 <double_speed+0x68>
 2002748:	d1275543 	ldbu	r4,-25259(gp)
 200274c:	d1677f17 	ldw	r5,-25092(gp)
 2002750:	a5000044 	addi	r20,r20,1
 2002754:	20040f00 	call	20040f0 <__mulsi3>
 2002758:	153fe40e 	bge	r2,r20,20026ec <double_speed+0x44>
 200275c:	00803fc4 	movi	r2,255
 2002760:	01001304 	movi	r4,76
 2002764:	d0a75e15 	stw	r2,-25224(gp)
 2002768:	20000035 	stwio	zero,0(r4)
 200276c:	00c01204 	movi	r3,72
 2002770:	18800035 	stwio	r2,0(r3)
 2002774:	20000035 	stwio	zero,0(r4)
 2002778:	01000044 	movi	r4,1
 200277c:	000b883a 	mov	r5,zero
 2002780:	01808034 	movhi	r6,512
 2002784:	31822704 	addi	r6,r6,2204
 2002788:	dfc00517 	ldw	ra,20(sp)
 200278c:	dd000417 	ldw	r20,16(sp)
 2002790:	dcc00317 	ldw	r19,12(sp)
 2002794:	dc800217 	ldw	r18,8(sp)
 2002798:	dc400117 	ldw	r17,4(sp)
 200279c:	dc000017 	ldw	r16,0(sp)
 20027a0:	dec00604 	addi	sp,sp,24
 20027a4:	200d4701 	jmpi	200d470 <alt_irq_register>
 20027a8:	00803fc4 	movi	r2,255
 20027ac:	01001304 	movi	r4,76
 20027b0:	d0a75e15 	stw	r2,-25224(gp)
 20027b4:	20000035 	stwio	zero,0(r4)
 20027b8:	00c01204 	movi	r3,72
 20027bc:	18800035 	stwio	r2,0(r3)
 20027c0:	20000035 	stwio	zero,0(r4)
 20027c4:	01000044 	movi	r4,1
 20027c8:	000b883a 	mov	r5,zero
 20027cc:	01808034 	movhi	r6,512
 20027d0:	31822704 	addi	r6,r6,2204
 20027d4:	200d4700 	call	200d470 <alt_irq_register>
 20027d8:	d0278a15 	stw	zero,-25048(gp)
 20027dc:	dfc00517 	ldw	ra,20(sp)
 20027e0:	dd000417 	ldw	r20,16(sp)
 20027e4:	dcc00317 	ldw	r19,12(sp)
 20027e8:	dc800217 	ldw	r18,8(sp)
 20027ec:	dc400117 	ldw	r17,4(sp)
 20027f0:	dc000017 	ldw	r16,0(sp)
 20027f4:	dec00604 	addi	sp,sp,24
 20027f8:	f800283a 	ret

020027fc <half_speed>:
 20027fc:	d1275543 	ldbu	r4,-25259(gp)
 2002800:	d1677f17 	ldw	r5,-25092(gp)
 2002804:	defffe04 	addi	sp,sp,-8
 2002808:	dfc00115 	stw	ra,4(sp)
 200280c:	dc000015 	stw	r16,0(sp)
 2002810:	20040f00 	call	20040f0 <__mulsi3>
 2002814:	0080250e 	bge	zero,r2,20028ac <half_speed+0xb0>
 2002818:	04000044 	movi	r16,1
 200281c:	01808074 	movhi	r6,513
 2002820:	3194fe04 	addi	r6,r6,21496
 2002824:	010080b4 	movhi	r4,514
 2002828:	21288b04 	addi	r4,r4,-24020
 200282c:	014080b4 	movhi	r5,514
 2002830:	296894c4 	addi	r5,r5,-23981
 2002834:	800f883a 	mov	r7,r16
 2002838:	20014b40 	call	20014b4 <get_rel_sector>
 200283c:	018080b4 	movhi	r6,514
 2002840:	31a89504 	addi	r6,r6,-23980
 2002844:	000b883a 	mov	r5,zero
 2002848:	00803c04 	movi	r2,240
 200284c:	10c00037 	ldwio	r3,0(r2)
 2002850:	183ffd1e 	bne	r3,zero,2002848 <half_speed+0x4c>
 2002854:	d0a78a17 	ldw	r2,-25048(gp)
 2002858:	30c00003 	ldbu	r3,0(r6)
 200285c:	31000043 	ldbu	r4,1(r6)
 2002860:	1000211e 	bne	r2,zero,20028e8 <half_speed+0xec>
 2002864:	18c03fcc 	andi	r3,r3,255
 2002868:	1806923a 	slli	r3,r3,8
 200286c:	21003fcc 	andi	r4,r4,255
 2002870:	00803804 	movi	r2,224
 2002874:	1906b03a 	or	r3,r3,r4
 2002878:	10c00035 	stwio	r3,0(r2)
 200287c:	29400044 	addi	r5,r5,1
 2002880:	00800044 	movi	r2,1
 2002884:	117ff02e 	bgeu	r2,r5,2002848 <half_speed+0x4c>
 2002888:	31800084 	addi	r6,r6,2
 200288c:	008080b4 	movhi	r2,514
 2002890:	10a91504 	addi	r2,r2,-23468
 2002894:	30bfeb1e 	bne	r6,r2,2002844 <half_speed+0x48>
 2002898:	d1275543 	ldbu	r4,-25259(gp)
 200289c:	d1677f17 	ldw	r5,-25092(gp)
 20028a0:	84000044 	addi	r16,r16,1
 20028a4:	20040f00 	call	20040f0 <__mulsi3>
 20028a8:	143fdc0e 	bge	r2,r16,200281c <half_speed+0x20>
 20028ac:	00803fc4 	movi	r2,255
 20028b0:	01001304 	movi	r4,76
 20028b4:	d0a75e15 	stw	r2,-25224(gp)
 20028b8:	20000035 	stwio	zero,0(r4)
 20028bc:	00c01204 	movi	r3,72
 20028c0:	18800035 	stwio	r2,0(r3)
 20028c4:	20000035 	stwio	zero,0(r4)
 20028c8:	01000044 	movi	r4,1
 20028cc:	000b883a 	mov	r5,zero
 20028d0:	01808034 	movhi	r6,512
 20028d4:	31822704 	addi	r6,r6,2204
 20028d8:	dfc00117 	ldw	ra,4(sp)
 20028dc:	dc000017 	ldw	r16,0(sp)
 20028e0:	dec00204 	addi	sp,sp,8
 20028e4:	200d4701 	jmpi	200d470 <alt_irq_register>
 20028e8:	00803fc4 	movi	r2,255
 20028ec:	01001304 	movi	r4,76
 20028f0:	d0a75e15 	stw	r2,-25224(gp)
 20028f4:	20000035 	stwio	zero,0(r4)
 20028f8:	00c01204 	movi	r3,72
 20028fc:	18800035 	stwio	r2,0(r3)
 2002900:	20000035 	stwio	zero,0(r4)
 2002904:	01000044 	movi	r4,1
 2002908:	000b883a 	mov	r5,zero
 200290c:	01808034 	movhi	r6,512
 2002910:	31822704 	addi	r6,r6,2204
 2002914:	200d4700 	call	200d470 <alt_irq_register>
 2002918:	d0278a15 	stw	zero,-25048(gp)
 200291c:	dfc00117 	ldw	ra,4(sp)
 2002920:	dc000017 	ldw	r16,0(sp)
 2002924:	dec00204 	addi	sp,sp,8
 2002928:	f800283a 	ret

0200292c <normal_speed>:
 200292c:	d1275543 	ldbu	r4,-25259(gp)
 2002930:	d1677f17 	ldw	r5,-25092(gp)
 2002934:	defffa04 	addi	sp,sp,-24
 2002938:	dfc00515 	stw	ra,20(sp)
 200293c:	dd000415 	stw	r20,16(sp)
 2002940:	dcc00315 	stw	r19,12(sp)
 2002944:	dc800215 	stw	r18,8(sp)
 2002948:	dc400115 	stw	r17,4(sp)
 200294c:	dc000015 	stw	r16,0(sp)
 2002950:	20040f00 	call	20040f0 <__mulsi3>
 2002954:	0080220e 	bge	zero,r2,20029e0 <normal_speed+0xb4>
 2002958:	05000044 	movi	r20,1
 200295c:	044080b4 	movhi	r17,514
 2002960:	8c6894c4 	addi	r17,r17,-23981
 2002964:	04003c04 	movi	r16,240
 2002968:	04c03804 	movi	r19,224
 200296c:	04808004 	movi	r18,512
 2002970:	014080b4 	movhi	r5,514
 2002974:	296894c4 	addi	r5,r5,-23981
 2002978:	010080b4 	movhi	r4,514
 200297c:	21288b04 	addi	r4,r4,-24020
 2002980:	01808074 	movhi	r6,513
 2002984:	3194fe04 	addi	r6,r6,21496
 2002988:	a00f883a 	mov	r7,r20
 200298c:	20014b40 	call	20014b4 <get_rel_sector>
 2002990:	01400044 	movi	r5,1
 2002994:	80800037 	ldwio	r2,0(r16)
 2002998:	2c49883a 	add	r4,r5,r17
 200299c:	103ffd1e 	bne	r2,zero,2002994 <normal_speed+0x68>
 20029a0:	d0a78a17 	ldw	r2,-25048(gp)
 20029a4:	20c00043 	ldbu	r3,1(r4)
 20029a8:	21000003 	ldbu	r4,0(r4)
 20029ac:	10001f1e 	bne	r2,zero,2002a2c <normal_speed+0x100>
 20029b0:	20803fcc 	andi	r2,r4,255
 20029b4:	1004923a 	slli	r2,r2,8
 20029b8:	18c03fcc 	andi	r3,r3,255
 20029bc:	10c4b03a 	or	r2,r2,r3
 20029c0:	98800035 	stwio	r2,0(r19)
 20029c4:	29400084 	addi	r5,r5,2
 20029c8:	917ff20e 	bge	r18,r5,2002994 <normal_speed+0x68>
 20029cc:	d1275543 	ldbu	r4,-25259(gp)
 20029d0:	d1677f17 	ldw	r5,-25092(gp)
 20029d4:	a5000044 	addi	r20,r20,1
 20029d8:	20040f00 	call	20040f0 <__mulsi3>
 20029dc:	153fe40e 	bge	r2,r20,2002970 <normal_speed+0x44>
 20029e0:	00803fc4 	movi	r2,255
 20029e4:	01001304 	movi	r4,76
 20029e8:	d0a75e15 	stw	r2,-25224(gp)
 20029ec:	20000035 	stwio	zero,0(r4)
 20029f0:	00c01204 	movi	r3,72
 20029f4:	18800035 	stwio	r2,0(r3)
 20029f8:	20000035 	stwio	zero,0(r4)
 20029fc:	01000044 	movi	r4,1
 2002a00:	000b883a 	mov	r5,zero
 2002a04:	01808034 	movhi	r6,512
 2002a08:	31822704 	addi	r6,r6,2204
 2002a0c:	dfc00517 	ldw	ra,20(sp)
 2002a10:	dd000417 	ldw	r20,16(sp)
 2002a14:	dcc00317 	ldw	r19,12(sp)
 2002a18:	dc800217 	ldw	r18,8(sp)
 2002a1c:	dc400117 	ldw	r17,4(sp)
 2002a20:	dc000017 	ldw	r16,0(sp)
 2002a24:	dec00604 	addi	sp,sp,24
 2002a28:	200d4701 	jmpi	200d470 <alt_irq_register>
 2002a2c:	00803fc4 	movi	r2,255
 2002a30:	01001304 	movi	r4,76
 2002a34:	d0a75e15 	stw	r2,-25224(gp)
 2002a38:	20000035 	stwio	zero,0(r4)
 2002a3c:	00c01204 	movi	r3,72
 2002a40:	18800035 	stwio	r2,0(r3)
 2002a44:	20000035 	stwio	zero,0(r4)
 2002a48:	01000044 	movi	r4,1
 2002a4c:	000b883a 	mov	r5,zero
 2002a50:	01808034 	movhi	r6,512
 2002a54:	31822704 	addi	r6,r6,2204
 2002a58:	200d4700 	call	200d470 <alt_irq_register>
 2002a5c:	d0278a15 	stw	zero,-25048(gp)
 2002a60:	dfc00517 	ldw	ra,20(sp)
 2002a64:	dd000417 	ldw	r20,16(sp)
 2002a68:	dcc00317 	ldw	r19,12(sp)
 2002a6c:	dc800217 	ldw	r18,8(sp)
 2002a70:	dc400117 	ldw	r17,4(sp)
 2002a74:	dc000017 	ldw	r16,0(sp)
 2002a78:	dec00604 	addi	sp,sp,24
 2002a7c:	f800283a 	ret

02002a80 <delay>:
 2002a80:	defff904 	addi	sp,sp,-28
 2002a84:	dfc00615 	stw	ra,24(sp)
 2002a88:	dd400515 	stw	r21,20(sp)
 2002a8c:	dd000415 	stw	r20,16(sp)
 2002a90:	dcc00315 	stw	r19,12(sp)
 2002a94:	dc800215 	stw	r18,8(sp)
 2002a98:	dc400115 	stw	r17,4(sp)
 2002a9c:	dc000015 	stw	r16,0(sp)
 2002aa0:	008080b4 	movhi	r2,514
 2002aa4:	10a91504 	addi	r2,r2,-23468
 2002aa8:	00c080f4 	movhi	r3,515
 2002aac:	18ff3704 	addi	r3,r3,-804
 2002ab0:	10000005 	stb	zero,0(r2)
 2002ab4:	10800044 	addi	r2,r2,1
 2002ab8:	10fffd1e 	bne	r2,r3,2002ab0 <delay+0x30>
 2002abc:	d1275543 	ldbu	r4,-25259(gp)
 2002ac0:	d1677f17 	ldw	r5,-25092(gp)
 2002ac4:	20040f00 	call	20040f0 <__mulsi3>
 2002ac8:	0080810e 	bge	zero,r2,2002cd0 <delay+0x250>
 2002acc:	04400044 	movi	r17,1
 2002ad0:	882b883a 	mov	r21,r17
 2002ad4:	04003c04 	movi	r16,240
 2002ad8:	04803804 	movi	r18,224
 2002adc:	04c00074 	movhi	r19,1
 2002ae0:	9cd62204 	addi	r19,r19,22664
 2002ae4:	050080b4 	movhi	r20,514
 2002ae8:	a5291504 	addi	r20,r20,-23468
 2002aec:	01808074 	movhi	r6,513
 2002af0:	3194fe04 	addi	r6,r6,21496
 2002af4:	010080b4 	movhi	r4,514
 2002af8:	21288b04 	addi	r4,r4,-24020
 2002afc:	014080b4 	movhi	r5,514
 2002b00:	296894c4 	addi	r5,r5,-23981
 2002b04:	a80f883a 	mov	r7,r21
 2002b08:	20014b40 	call	20014b4 <get_rel_sector>
 2002b0c:	018080b4 	movhi	r6,514
 2002b10:	31a89504 	addi	r6,r6,-23980
 2002b14:	30800003 	ldbu	r2,0(r6)
 2002b18:	30c00043 	ldbu	r3,1(r6)
 2002b1c:	1004923a 	slli	r2,r2,8
 2002b20:	10c6b03a 	or	r3,r2,r3
 2002b24:	80800037 	ldwio	r2,0(r16)
 2002b28:	103ffe1e 	bne	r2,zero,2002b24 <delay+0xa4>
 2002b2c:	d0a78a17 	ldw	r2,-25048(gp)
 2002b30:	1000511e 	bne	r2,zero,2002c78 <delay+0x1f8>
 2002b34:	90c00035 	stwio	r3,0(r18)
 2002b38:	01c080b4 	movhi	r7,514
 2002b3c:	39e914c4 	addi	r7,r7,-23469
 2002b40:	8a400084 	addi	r9,r17,2
 2002b44:	49c5883a 	add	r2,r9,r7
 2002b48:	10c00003 	ldbu	r3,0(r2)
 2002b4c:	8a0000c4 	addi	r8,r17,3
 2002b50:	41c5883a 	add	r2,r8,r7
 2002b54:	1806923a 	slli	r3,r3,8
 2002b58:	11000003 	ldbu	r4,0(r2)
 2002b5c:	01403c04 	movi	r5,240
 2002b60:	1906b03a 	or	r3,r3,r4
 2002b64:	28800037 	ldwio	r2,0(r5)
 2002b68:	103ffe1e 	bne	r2,zero,2002b64 <delay+0xe4>
 2002b6c:	d0a78a17 	ldw	r2,-25048(gp)
 2002b70:	1000411e 	bne	r2,zero,2002c78 <delay+0x1f8>
 2002b74:	90c00035 	stwio	r3,0(r18)
 2002b78:	31000083 	ldbu	r4,2(r6)
 2002b7c:	314000c3 	ldbu	r5,3(r6)
 2002b80:	49c5883a 	add	r2,r9,r7
 2002b84:	11000005 	stb	r4,0(r2)
 2002b88:	41c7883a 	add	r3,r8,r7
 2002b8c:	8c400104 	addi	r17,r17,4
 2002b90:	19400005 	stb	r5,0(r3)
 2002b94:	9c40010e 	bge	r19,r17,2002b9c <delay+0x11c>
 2002b98:	04400044 	movi	r17,1
 2002b9c:	31800104 	addi	r6,r6,4
 2002ba0:	353fdc1e 	bne	r6,r20,2002b14 <delay+0x94>
 2002ba4:	d1275543 	ldbu	r4,-25259(gp)
 2002ba8:	d1677f17 	ldw	r5,-25092(gp)
 2002bac:	ad400044 	addi	r21,r21,1
 2002bb0:	20040f00 	call	20040f0 <__mulsi3>
 2002bb4:	157fcd0e 	bge	r2,r21,2002aec <delay+0x6c>
 2002bb8:	01800044 	movi	r6,1
 2002bbc:	01c03c04 	movi	r7,240
 2002bc0:	02003804 	movi	r8,224
 2002bc4:	024080b4 	movhi	r9,514
 2002bc8:	4a6914c4 	addi	r9,r9,-23469
 2002bcc:	38800037 	ldwio	r2,0(r7)
 2002bd0:	103ffe1e 	bne	r2,zero,2002bcc <delay+0x14c>
 2002bd4:	d0a78a17 	ldw	r2,-25048(gp)
 2002bd8:	1000271e 	bne	r2,zero,2002c78 <delay+0x1f8>
 2002bdc:	40000035 	stwio	zero,0(r8)
 2002be0:	8a45883a 	add	r2,r17,r9
 2002be4:	10c00083 	ldbu	r3,2(r2)
 2002be8:	110000c3 	ldbu	r4,3(r2)
 2002bec:	01403c04 	movi	r5,240
 2002bf0:	1806923a 	slli	r3,r3,8
 2002bf4:	1906b03a 	or	r3,r3,r4
 2002bf8:	28800037 	ldwio	r2,0(r5)
 2002bfc:	103ffe1e 	bne	r2,zero,2002bf8 <delay+0x178>
 2002c00:	d0a78a17 	ldw	r2,-25048(gp)
 2002c04:	10001c1e 	bne	r2,zero,2002c78 <delay+0x1f8>
 2002c08:	40c00035 	stwio	r3,0(r8)
 2002c0c:	8c400104 	addi	r17,r17,4
 2002c10:	00800074 	movhi	r2,1
 2002c14:	10962204 	addi	r2,r2,22664
 2002c18:	1440010e 	bge	r2,r17,2002c20 <delay+0x1a0>
 2002c1c:	04400044 	movi	r17,1
 2002c20:	31800104 	addi	r6,r6,4
 2002c24:	11bfe90e 	bge	r2,r6,2002bcc <delay+0x14c>
 2002c28:	00803fc4 	movi	r2,255
 2002c2c:	01001304 	movi	r4,76
 2002c30:	d0a75e15 	stw	r2,-25224(gp)
 2002c34:	20000035 	stwio	zero,0(r4)
 2002c38:	00c01204 	movi	r3,72
 2002c3c:	18800035 	stwio	r2,0(r3)
 2002c40:	20000035 	stwio	zero,0(r4)
 2002c44:	01000044 	movi	r4,1
 2002c48:	000b883a 	mov	r5,zero
 2002c4c:	01808034 	movhi	r6,512
 2002c50:	31822704 	addi	r6,r6,2204
 2002c54:	dfc00617 	ldw	ra,24(sp)
 2002c58:	dd400517 	ldw	r21,20(sp)
 2002c5c:	dd000417 	ldw	r20,16(sp)
 2002c60:	dcc00317 	ldw	r19,12(sp)
 2002c64:	dc800217 	ldw	r18,8(sp)
 2002c68:	dc400117 	ldw	r17,4(sp)
 2002c6c:	dc000017 	ldw	r16,0(sp)
 2002c70:	dec00704 	addi	sp,sp,28
 2002c74:	200d4701 	jmpi	200d470 <alt_irq_register>
 2002c78:	00803fc4 	movi	r2,255
 2002c7c:	01001304 	movi	r4,76
 2002c80:	d0a75e15 	stw	r2,-25224(gp)
 2002c84:	20000035 	stwio	zero,0(r4)
 2002c88:	00c01204 	movi	r3,72
 2002c8c:	18800035 	stwio	r2,0(r3)
 2002c90:	20000035 	stwio	zero,0(r4)
 2002c94:	01000044 	movi	r4,1
 2002c98:	000b883a 	mov	r5,zero
 2002c9c:	01808034 	movhi	r6,512
 2002ca0:	31822704 	addi	r6,r6,2204
 2002ca4:	200d4700 	call	200d470 <alt_irq_register>
 2002ca8:	d0278a15 	stw	zero,-25048(gp)
 2002cac:	dfc00617 	ldw	ra,24(sp)
 2002cb0:	dd400517 	ldw	r21,20(sp)
 2002cb4:	dd000417 	ldw	r20,16(sp)
 2002cb8:	dcc00317 	ldw	r19,12(sp)
 2002cbc:	dc800217 	ldw	r18,8(sp)
 2002cc0:	dc400117 	ldw	r17,4(sp)
 2002cc4:	dc000017 	ldw	r16,0(sp)
 2002cc8:	dec00704 	addi	sp,sp,28
 2002ccc:	f800283a 	ret
 2002cd0:	04400044 	movi	r17,1
 2002cd4:	003fb806 	br	2002bb8 <delay+0x138>

02002cd8 <reverse>:
 2002cd8:	d1275543 	ldbu	r4,-25259(gp)
 2002cdc:	d1677f17 	ldw	r5,-25092(gp)
 2002ce0:	defffa04 	addi	sp,sp,-24
 2002ce4:	dc800215 	stw	r18,8(sp)
 2002ce8:	dfc00515 	stw	ra,20(sp)
 2002cec:	dd000415 	stw	r20,16(sp)
 2002cf0:	dcc00315 	stw	r19,12(sp)
 2002cf4:	dc400115 	stw	r17,4(sp)
 2002cf8:	dc000015 	stw	r16,0(sp)
 2002cfc:	20040f00 	call	20040f0 <__mulsi3>
 2002d00:	1025883a 	mov	r18,r2
 2002d04:	10001e16 	blt	r2,zero,2002d80 <reverse+0xa8>
 2002d08:	044080b4 	movhi	r17,514
 2002d0c:	8c6894c4 	addi	r17,r17,-23981
 2002d10:	04003c04 	movi	r16,240
 2002d14:	04c03804 	movi	r19,224
 2002d18:	053fffc4 	movi	r20,-1
 2002d1c:	014080b4 	movhi	r5,514
 2002d20:	296894c4 	addi	r5,r5,-23981
 2002d24:	010080b4 	movhi	r4,514
 2002d28:	21288b04 	addi	r4,r4,-24020
 2002d2c:	01808074 	movhi	r6,513
 2002d30:	3194fe04 	addi	r6,r6,21496
 2002d34:	900f883a 	mov	r7,r18
 2002d38:	20014b40 	call	20014b4 <get_rel_sector>
 2002d3c:	01407fc4 	movi	r5,511
 2002d40:	80800037 	ldwio	r2,0(r16)
 2002d44:	2c49883a 	add	r4,r5,r17
 2002d48:	103ffd1e 	bne	r2,zero,2002d40 <reverse+0x68>
 2002d4c:	d0a78a17 	ldw	r2,-25048(gp)
 2002d50:	20c00043 	ldbu	r3,1(r4)
 2002d54:	21000003 	ldbu	r4,0(r4)
 2002d58:	10001c1e 	bne	r2,zero,2002dcc <reverse+0xf4>
 2002d5c:	20803fcc 	andi	r2,r4,255
 2002d60:	1004923a 	slli	r2,r2,8
 2002d64:	18c03fcc 	andi	r3,r3,255
 2002d68:	10c4b03a 	or	r2,r2,r3
 2002d6c:	98800035 	stwio	r2,0(r19)
 2002d70:	297fff84 	addi	r5,r5,-2
 2002d74:	017ff216 	blt	zero,r5,2002d40 <reverse+0x68>
 2002d78:	94bfffc4 	addi	r18,r18,-1
 2002d7c:	953fe71e 	bne	r18,r20,2002d1c <reverse+0x44>
 2002d80:	00803fc4 	movi	r2,255
 2002d84:	01001304 	movi	r4,76
 2002d88:	d0a75e15 	stw	r2,-25224(gp)
 2002d8c:	20000035 	stwio	zero,0(r4)
 2002d90:	00c01204 	movi	r3,72
 2002d94:	18800035 	stwio	r2,0(r3)
 2002d98:	20000035 	stwio	zero,0(r4)
 2002d9c:	01000044 	movi	r4,1
 2002da0:	000b883a 	mov	r5,zero
 2002da4:	01808034 	movhi	r6,512
 2002da8:	31822704 	addi	r6,r6,2204
 2002dac:	dfc00517 	ldw	ra,20(sp)
 2002db0:	dd000417 	ldw	r20,16(sp)
 2002db4:	dcc00317 	ldw	r19,12(sp)
 2002db8:	dc800217 	ldw	r18,8(sp)
 2002dbc:	dc400117 	ldw	r17,4(sp)
 2002dc0:	dc000017 	ldw	r16,0(sp)
 2002dc4:	dec00604 	addi	sp,sp,24
 2002dc8:	200d4701 	jmpi	200d470 <alt_irq_register>
 2002dcc:	00803fc4 	movi	r2,255
 2002dd0:	01001304 	movi	r4,76
 2002dd4:	d0a75e15 	stw	r2,-25224(gp)
 2002dd8:	20000035 	stwio	zero,0(r4)
 2002ddc:	00c01204 	movi	r3,72
 2002de0:	18800035 	stwio	r2,0(r3)
 2002de4:	20000035 	stwio	zero,0(r4)
 2002de8:	01000044 	movi	r4,1
 2002dec:	000b883a 	mov	r5,zero
 2002df0:	01808034 	movhi	r6,512
 2002df4:	31822704 	addi	r6,r6,2204
 2002df8:	200d4700 	call	200d470 <alt_irq_register>
 2002dfc:	d0278a15 	stw	zero,-25048(gp)
 2002e00:	dfc00517 	ldw	ra,20(sp)
 2002e04:	dd000417 	ldw	r20,16(sp)
 2002e08:	dcc00317 	ldw	r19,12(sp)
 2002e0c:	dc800217 	ldw	r18,8(sp)
 2002e10:	dc400117 	ldw	r17,4(sp)
 2002e14:	dc000017 	ldw	r16,0(sp)
 2002e18:	dec00604 	addi	sp,sp,24
 2002e1c:	f800283a 	ret

02002e20 <main>:
 2002e20:	deff7c04 	addi	sp,sp,-528
 2002e24:	dfc08315 	stw	ra,524(sp)
 2002e28:	dc808215 	stw	r18,520(sp)
 2002e2c:	dc408115 	stw	r17,516(sp)
 2002e30:	dc008015 	stw	r16,512(sp)
 2002e34:	2000de40 	call	2000de4 <SD_card_init>
 2002e38:	10803fcc 	andi	r2,r2,255
 2002e3c:	1000861e 	bne	r2,zero,2003058 <main+0x238>
 2002e40:	01408074 	movhi	r5,513
 2002e44:	2944a904 	addi	r5,r5,4772
 2002e48:	01008074 	movhi	r4,513
 2002e4c:	2104ae04 	addi	r4,r4,4792
 2002e50:	20047540 	call	2004754 <printf>
 2002e54:	01808004 	movi	r6,512
 2002e58:	d809883a 	mov	r4,sp
 2002e5c:	000b883a 	mov	r5,zero
 2002e60:	20046bc0 	call	20046bc <memset>
 2002e64:	d809883a 	mov	r4,sp
 2002e68:	000b883a 	mov	r5,zero
 2002e6c:	01800044 	movi	r6,1
 2002e70:	20012580 	call	2001258 <SD_read_lba>
 2002e74:	d8c07f83 	ldbu	r3,510(sp)
 2002e78:	00801544 	movi	r2,85
 2002e7c:	18807926 	beq	r3,r2,2003064 <main+0x244>
 2002e80:	01808074 	movhi	r6,513
 2002e84:	3184ac04 	addi	r6,r6,4784
 2002e88:	300b883a 	mov	r5,r6
 2002e8c:	01008074 	movhi	r4,513
 2002e90:	2104b304 	addi	r4,r4,4812
 2002e94:	20047540 	call	2004754 <printf>
 2002e98:	20020780 	call	2002078 <init_bs>
 2002e9c:	10803fcc 	andi	r2,r2,255
 2002ea0:	10006a1e 	bne	r2,zero,200304c <main+0x22c>
 2002ea4:	01408074 	movhi	r5,513
 2002ea8:	2944a904 	addi	r5,r5,4772
 2002eac:	01008074 	movhi	r4,513
 2002eb0:	2104b704 	addi	r4,r4,4828
 2002eb4:	20047540 	call	2004754 <printf>
 2002eb8:	200311c0 	call	200311c <init_audio_codec>
 2002ebc:	20002040 	call	2000204 <LCD_Init>
 2002ec0:	2001f040 	call	2001f04 <nextsong>
 2002ec4:	00c03fc4 	movi	r3,255
 2002ec8:	04401304 	movi	r17,76
 2002ecc:	d0e75e15 	stw	r3,-25224(gp)
 2002ed0:	d0278a15 	stw	zero,-25048(gp)
 2002ed4:	88000035 	stwio	zero,0(r17)
 2002ed8:	00801204 	movi	r2,72
 2002edc:	10c00035 	stwio	r3,0(r2)
 2002ee0:	88000035 	stwio	zero,0(r17)
 2002ee4:	04000044 	movi	r16,1
 2002ee8:	8009883a 	mov	r4,r16
 2002eec:	000b883a 	mov	r5,zero
 2002ef0:	01808034 	movhi	r6,512
 2002ef4:	31822704 	addi	r6,r6,2204
 2002ef8:	200d4700 	call	200d470 <alt_irq_register>
 2002efc:	d4278015 	stw	r16,-25088(gp)
 2002f00:	d4276f15 	stw	r16,-25156(gp)
 2002f04:	d4277715 	stw	r16,-25124(gp)
 2002f08:	00bfffc4 	movi	r2,-1
 2002f0c:	d0a78715 	stw	r2,-25060(gp)
 2002f10:	8825883a 	mov	r18,r17
 2002f14:	d0a77a15 	stw	r2,-25112(gp)
 2002f18:	8023883a 	mov	r17,r16
 2002f1c:	d0a78017 	ldw	r2,-25088(gp)
 2002f20:	10001226 	beq	r2,zero,2002f6c <main+0x14c>
 2002f24:	d0a76f17 	ldw	r2,-25156(gp)
 2002f28:	10002926 	beq	r2,zero,2002fd0 <main+0x1b0>
 2002f2c:	d0a77717 	ldw	r2,-25124(gp)
 2002f30:	10003026 	beq	r2,zero,2002ff4 <main+0x1d4>
 2002f34:	00803404 	movi	r2,208
 2002f38:	10c00037 	ldwio	r3,0(r2)
 2002f3c:	d0e77a15 	stw	r3,-25112(gp)
 2002f40:	d1278717 	ldw	r4,-25060(gp)
 2002f44:	d0a77a17 	ldw	r2,-25112(gp)
 2002f48:	20bff426 	beq	r4,r2,2002f1c <main+0xfc>
 2002f4c:	d1677a17 	ldw	r5,-25112(gp)
 2002f50:	010080b4 	movhi	r4,514
 2002f54:	21288b04 	addi	r4,r4,-24020
 2002f58:	20005040 	call	2000504 <LCD_Display>
 2002f5c:	d0a77a17 	ldw	r2,-25112(gp)
 2002f60:	d0a78715 	stw	r2,-25060(gp)
 2002f64:	d0a78017 	ldw	r2,-25088(gp)
 2002f68:	103fee1e 	bne	r2,zero,2002f24 <main+0x104>
 2002f6c:	01008074 	movhi	r4,513
 2002f70:	2104bb04 	addi	r4,r4,4844
 2002f74:	200486c0 	call	200486c <puts>
 2002f78:	04000044 	movi	r16,1
 2002f7c:	d4275e15 	stw	r16,-25224(gp)
 2002f80:	90000035 	stwio	zero,0(r18)
 2002f84:	00801204 	movi	r2,72
 2002f88:	14000035 	stwio	r16,0(r2)
 2002f8c:	90000035 	stwio	zero,0(r18)
 2002f90:	8009883a 	mov	r4,r16
 2002f94:	000b883a 	mov	r5,zero
 2002f98:	01808034 	movhi	r6,512
 2002f9c:	31822704 	addi	r6,r6,2204
 2002fa0:	200d4700 	call	200d470 <alt_irq_register>
 2002fa4:	d0e77a17 	ldw	r3,-25112(gp)
 2002fa8:	00800084 	movi	r2,2
 2002fac:	18802126 	beq	r3,r2,2003034 <main+0x214>
 2002fb0:	10c01916 	blt	r2,r3,2003018 <main+0x1f8>
 2002fb4:	1c000326 	beq	r3,r16,2002fc4 <main+0x1a4>
 2002fb8:	200292c0 	call	200292c <normal_speed>
 2002fbc:	d4678015 	stw	r17,-25088(gp)
 2002fc0:	003fdc06 	br	2002f34 <main+0x114>
 2002fc4:	20026a80 	call	20026a8 <double_speed>
 2002fc8:	d4678015 	stw	r17,-25088(gp)
 2002fcc:	003fd906 	br	2002f34 <main+0x114>
 2002fd0:	01008074 	movhi	r4,513
 2002fd4:	2104bd04 	addi	r4,r4,4852
 2002fd8:	200486c0 	call	200486c <puts>
 2002fdc:	2001f040 	call	2001f04 <nextsong>
 2002fe0:	01000234 	movhi	r4,8
 2002fe4:	21284804 	addi	r4,r4,-24288
 2002fe8:	200dcf80 	call	200dcf8 <usleep>
 2002fec:	d4676f15 	stw	r17,-25156(gp)
 2002ff0:	003fd006 	br	2002f34 <main+0x114>
 2002ff4:	01008074 	movhi	r4,513
 2002ff8:	2104bf04 	addi	r4,r4,4860
 2002ffc:	200486c0 	call	200486c <puts>
 2003000:	2001d840 	call	2001d84 <prevsong>
 2003004:	01000234 	movhi	r4,8
 2003008:	21284804 	addi	r4,r4,-24288
 200300c:	200dcf80 	call	200dcf8 <usleep>
 2003010:	d4677715 	stw	r17,-25124(gp)
 2003014:	003fc706 	br	2002f34 <main+0x114>
 2003018:	008000c4 	movi	r2,3
 200301c:	18800826 	beq	r3,r2,2003040 <main+0x220>
 2003020:	00800104 	movi	r2,4
 2003024:	18bfe41e 	bne	r3,r2,2002fb8 <main+0x198>
 2003028:	2002cd80 	call	2002cd8 <reverse>
 200302c:	d4678015 	stw	r17,-25088(gp)
 2003030:	003fc006 	br	2002f34 <main+0x114>
 2003034:	20027fc0 	call	20027fc <half_speed>
 2003038:	d4678015 	stw	r17,-25088(gp)
 200303c:	003fbd06 	br	2002f34 <main+0x114>
 2003040:	2002a800 	call	2002a80 <delay>
 2003044:	d4678015 	stw	r17,-25088(gp)
 2003048:	003fba06 	br	2002f34 <main+0x114>
 200304c:	01408074 	movhi	r5,513
 2003050:	2944ac04 	addi	r5,r5,4784
 2003054:	003f9506 	br	2002eac <main+0x8c>
 2003058:	01408074 	movhi	r5,513
 200305c:	2944ac04 	addi	r5,r5,4784
 2003060:	003f7906 	br	2002e48 <main+0x28>
 2003064:	d8c07fc3 	ldbu	r3,511(sp)
 2003068:	00802a84 	movi	r2,170
 200306c:	18bf841e 	bne	r3,r2,2002e80 <main+0x60>
 2003070:	d9c071c3 	ldbu	r7,455(sp)
 2003074:	d8c07203 	ldbu	r3,456(sp)
 2003078:	d9007243 	ldbu	r4,457(sp)
 200307c:	d94072c3 	ldbu	r5,459(sp)
 2003080:	d8807303 	ldbu	r2,460(sp)
 2003084:	d9807343 	ldbu	r6,461(sp)
 2003088:	2008963a 	slli	r4,r4,24
 200308c:	280a923a 	slli	r5,r5,8
 2003090:	300c963a 	slli	r6,r6,24
 2003094:	380e923a 	slli	r7,r7,8
 2003098:	1806943a 	slli	r3,r3,16
 200309c:	1004943a 	slli	r2,r2,16
 20030a0:	da007183 	ldbu	r8,454(sp)
 20030a4:	da407283 	ldbu	r9,458(sp)
 20030a8:	1907883a 	add	r3,r3,r4
 20030ac:	1185883a 	add	r2,r2,r6
 20030b0:	4953883a 	add	r9,r9,r5
 20030b4:	41d1883a 	add	r8,r8,r7
 20030b8:	40d1883a 	add	r8,r8,r3
 20030bc:	4893883a 	add	r9,r9,r2
 20030c0:	d8c07143 	ldbu	r3,453(sp)
 20030c4:	d8807043 	ldbu	r2,449(sp)
 20030c8:	d1278b04 	addi	r4,gp,-25044
 20030cc:	d1677904 	addi	r5,gp,-25116
 20030d0:	20800085 	stb	r2,2(r4)
 20030d4:	28c00085 	stb	r3,2(r5)
 20030d8:	d8806f83 	ldbu	r2,446(sp)
 20030dc:	d8c06fc3 	ldbu	r3,447(sp)
 20030e0:	01808074 	movhi	r6,513
 20030e4:	3184a904 	addi	r6,r6,4772
 20030e8:	d0a75305 	stb	r2,-25268(gp)
 20030ec:	d0e78b05 	stb	r3,-25044(gp)
 20030f0:	d8807003 	ldbu	r2,448(sp)
 20030f4:	d8c07083 	ldbu	r3,450(sp)
 20030f8:	d2278d15 	stw	r8,-25036(gp)
 20030fc:	20800045 	stb	r2,1(r4)
 2003100:	d0e76105 	stb	r3,-25212(gp)
 2003104:	d88070c3 	ldbu	r2,451(sp)
 2003108:	d8c07103 	ldbu	r3,452(sp)
 200310c:	d2677815 	stw	r9,-25120(gp)
 2003110:	d0a77905 	stb	r2,-25116(gp)
 2003114:	28c00045 	stb	r3,1(r5)
 2003118:	003f5b06 	br	2002e88 <main+0x68>

0200311c <init_audio_codec>:
 200311c:	deffff04 	addi	sp,sp,-4
 2003120:	010018c4 	movi	r4,99
 2003124:	dfc00015 	stw	ra,0(sp)
 2003128:	20008080 	call	2000808 <I2C_Init>
 200312c:	01400044 	movi	r5,1
 2003130:	01000d04 	movi	r4,52
 2003134:	000d883a 	mov	r6,zero
 2003138:	20007ac0 	call	20007ac <I2C_Send>
 200313c:	10803fcc 	andi	r2,r2,255
 2003140:	01008074 	movhi	r4,513
 2003144:	2104c104 	addi	r4,r4,4868
 2003148:	10004726 	beq	r2,zero,2003268 <init_audio_codec+0x14c>
 200314c:	200486c0 	call	200486c <puts>
 2003150:	000b883a 	mov	r5,zero
 2003154:	01000204 	movi	r4,8
 2003158:	000d883a 	mov	r6,zero
 200315c:	20007ac0 	call	20007ac <I2C_Send>
 2003160:	01000484 	movi	r4,18
 2003164:	000b883a 	mov	r5,zero
 2003168:	01800044 	movi	r6,1
 200316c:	20007ac0 	call	20007ac <I2C_Send>
 2003170:	01000d04 	movi	r4,52
 2003174:	01400044 	movi	r5,1
 2003178:	000d883a 	mov	r6,zero
 200317c:	20007ac0 	call	20007ac <I2C_Send>
 2003180:	01000284 	movi	r4,10
 2003184:	000b883a 	mov	r5,zero
 2003188:	000d883a 	mov	r6,zero
 200318c:	20007ac0 	call	20007ac <I2C_Send>
 2003190:	0009883a 	mov	r4,zero
 2003194:	000b883a 	mov	r5,zero
 2003198:	01800044 	movi	r6,1
 200319c:	20007ac0 	call	20007ac <I2C_Send>
 20031a0:	01000d04 	movi	r4,52
 20031a4:	01400044 	movi	r5,1
 20031a8:	000d883a 	mov	r6,zero
 20031ac:	20007ac0 	call	20007ac <I2C_Send>
 20031b0:	01000304 	movi	r4,12
 20031b4:	000b883a 	mov	r5,zero
 20031b8:	000d883a 	mov	r6,zero
 20031bc:	20007ac0 	call	20007ac <I2C_Send>
 20031c0:	0009883a 	mov	r4,zero
 20031c4:	000b883a 	mov	r5,zero
 20031c8:	01800044 	movi	r6,1
 20031cc:	20007ac0 	call	20007ac <I2C_Send>
 20031d0:	01000d04 	movi	r4,52
 20031d4:	01400044 	movi	r5,1
 20031d8:	000d883a 	mov	r6,zero
 20031dc:	20007ac0 	call	20007ac <I2C_Send>
 20031e0:	01000384 	movi	r4,14
 20031e4:	000b883a 	mov	r5,zero
 20031e8:	000d883a 	mov	r6,zero
 20031ec:	20007ac0 	call	20007ac <I2C_Send>
 20031f0:	01000404 	movi	r4,16
 20031f4:	000b883a 	mov	r5,zero
 20031f8:	01800044 	movi	r6,1
 20031fc:	20007ac0 	call	20007ac <I2C_Send>
 2003200:	01000d04 	movi	r4,52
 2003204:	01400044 	movi	r5,1
 2003208:	000d883a 	mov	r6,zero
 200320c:	20007ac0 	call	20007ac <I2C_Send>
 2003210:	01000404 	movi	r4,16
 2003214:	000b883a 	mov	r5,zero
 2003218:	000d883a 	mov	r6,zero
 200321c:	20007ac0 	call	20007ac <I2C_Send>
 2003220:	01000884 	movi	r4,34
 2003224:	000b883a 	mov	r5,zero
 2003228:	01800044 	movi	r6,1
 200322c:	20007ac0 	call	20007ac <I2C_Send>
 2003230:	01000d04 	movi	r4,52
 2003234:	01400044 	movi	r5,1
 2003238:	000d883a 	mov	r6,zero
 200323c:	20007ac0 	call	20007ac <I2C_Send>
 2003240:	01000484 	movi	r4,18
 2003244:	000b883a 	mov	r5,zero
 2003248:	000d883a 	mov	r6,zero
 200324c:	20007ac0 	call	20007ac <I2C_Send>
 2003250:	01000044 	movi	r4,1
 2003254:	000b883a 	mov	r5,zero
 2003258:	200d883a 	mov	r6,r4
 200325c:	dfc00017 	ldw	ra,0(sp)
 2003260:	dec00104 	addi	sp,sp,4
 2003264:	20007ac1 	jmpi	20007ac <I2C_Send>
 2003268:	01008074 	movhi	r4,513
 200326c:	2104cd04 	addi	r4,r4,4916
 2003270:	dfc00017 	ldw	ra,0(sp)
 2003274:	dec00104 	addi	sp,sp,4
 2003278:	200486c1 	jmpi	200486c <puts>

0200327c <ceil>:
 200327c:	2805d53a 	srai	r2,r5,20
 2003280:	defff604 	addi	sp,sp,-40
 2003284:	dd800615 	stw	r22,24(sp)
 2003288:	10c1ffcc 	andi	r3,r2,2047
 200328c:	1dbf0044 	addi	r22,r3,-1023
 2003290:	008004c4 	movi	r2,19
 2003294:	ddc00715 	stw	r23,28(sp)
 2003298:	dc800215 	stw	r18,8(sp)
 200329c:	dc400115 	stw	r17,4(sp)
 20032a0:	dc000015 	stw	r16,0(sp)
 20032a4:	dfc00915 	stw	ra,36(sp)
 20032a8:	df000815 	stw	fp,32(sp)
 20032ac:	dd400515 	stw	r21,20(sp)
 20032b0:	dd000415 	stw	r20,16(sp)
 20032b4:	dcc00315 	stw	r19,12(sp)
 20032b8:	2021883a 	mov	r16,r4
 20032bc:	2823883a 	mov	r17,r5
 20032c0:	282f883a 	mov	r23,r5
 20032c4:	2025883a 	mov	r18,r4
 20032c8:	15802c16 	blt	r2,r22,200337c <ceil+0x100>
 20032cc:	b0005416 	blt	r22,zero,2003420 <ceil+0x1a4>
 20032d0:	00800434 	movhi	r2,16
 20032d4:	10bfffc4 	addi	r2,r2,-1
 20032d8:	15b9d83a 	sra	fp,r2,r22
 20032dc:	282f883a 	mov	r23,r5
 20032e0:	e144703a 	and	r2,fp,r5
 20032e4:	1104b03a 	or	r2,r2,r4
 20032e8:	10001626 	beq	r2,zero,2003344 <ceil+0xc8>
 20032ec:	00a20034 	movhi	r2,34816
 20032f0:	109d6704 	addi	r2,r2,30108
 20032f4:	00df8e34 	movhi	r3,32312
 20032f8:	18f90f04 	addi	r3,r3,-7108
 20032fc:	180f883a 	mov	r7,r3
 2003300:	100d883a 	mov	r6,r2
 2003304:	2003b440 	call	2003b44 <__adddf3>
 2003308:	180b883a 	mov	r5,r3
 200330c:	000d883a 	mov	r6,zero
 2003310:	000f883a 	mov	r7,zero
 2003314:	1009883a 	mov	r4,r2
 2003318:	2003bb80 	call	2003bb8 <__gtdf2>
 200331c:	0080070e 	bge	zero,r2,200333c <ceil+0xc0>
 2003320:	0440030e 	bge	zero,r17,2003330 <ceil+0xb4>
 2003324:	00800434 	movhi	r2,16
 2003328:	1585d83a 	sra	r2,r2,r22
 200332c:	88af883a 	add	r23,r17,r2
 2003330:	0704303a 	nor	r2,zero,fp
 2003334:	b8ae703a 	and	r23,r23,r2
 2003338:	0025883a 	mov	r18,zero
 200333c:	9021883a 	mov	r16,r18
 2003340:	b823883a 	mov	r17,r23
 2003344:	8005883a 	mov	r2,r16
 2003348:	8807883a 	mov	r3,r17
 200334c:	dfc00917 	ldw	ra,36(sp)
 2003350:	df000817 	ldw	fp,32(sp)
 2003354:	ddc00717 	ldw	r23,28(sp)
 2003358:	dd800617 	ldw	r22,24(sp)
 200335c:	dd400517 	ldw	r21,20(sp)
 2003360:	dd000417 	ldw	r20,16(sp)
 2003364:	dcc00317 	ldw	r19,12(sp)
 2003368:	dc800217 	ldw	r18,8(sp)
 200336c:	dc400117 	ldw	r17,4(sp)
 2003370:	dc000017 	ldw	r16,0(sp)
 2003374:	dec00a04 	addi	sp,sp,40
 2003378:	f800283a 	ret
 200337c:	00800cc4 	movi	r2,51
 2003380:	15801f16 	blt	r2,r22,2003400 <ceil+0x184>
 2003384:	18befb44 	addi	r2,r3,-1043
 2003388:	00ffffc4 	movi	r3,-1
 200338c:	18b8d83a 	srl	fp,r3,r2
 2003390:	e104703a 	and	r2,fp,r4
 2003394:	103feb26 	beq	r2,zero,2003344 <ceil+0xc8>
 2003398:	00a20034 	movhi	r2,34816
 200339c:	109d6704 	addi	r2,r2,30108
 20033a0:	00df8e34 	movhi	r3,32312
 20033a4:	18f90f04 	addi	r3,r3,-7108
 20033a8:	180f883a 	mov	r7,r3
 20033ac:	100d883a 	mov	r6,r2
 20033b0:	2003b440 	call	2003b44 <__adddf3>
 20033b4:	180b883a 	mov	r5,r3
 20033b8:	000d883a 	mov	r6,zero
 20033bc:	000f883a 	mov	r7,zero
 20033c0:	1009883a 	mov	r4,r2
 20033c4:	2003bb80 	call	2003bb8 <__gtdf2>
 20033c8:	0080250e 	bge	zero,r2,2003460 <ceil+0x1e4>
 20033cc:	0440090e 	bge	zero,r17,20033f4 <ceil+0x178>
 20033d0:	00800504 	movi	r2,20
 20033d4:	b0802926 	beq	r22,r2,200347c <ceil+0x200>
 20033d8:	00c00d04 	movi	r3,52
 20033dc:	1d87c83a 	sub	r3,r3,r22
 20033e0:	00800044 	movi	r2,1
 20033e4:	10c4983a 	sll	r2,r2,r3
 20033e8:	8085883a 	add	r2,r16,r2
 20033ec:	14001e36 	bltu	r2,r16,2003468 <ceil+0x1ec>
 20033f0:	1025883a 	mov	r18,r2
 20033f4:	0704303a 	nor	r2,zero,fp
 20033f8:	90a4703a 	and	r18,r18,r2
 20033fc:	003fcf06 	br	200333c <ceil+0xc0>
 2003400:	00810004 	movi	r2,1024
 2003404:	b0bfcf1e 	bne	r22,r2,2003344 <ceil+0xc8>
 2003408:	800d883a 	mov	r6,r16
 200340c:	280f883a 	mov	r7,r5
 2003410:	2003b440 	call	2003b44 <__adddf3>
 2003414:	1021883a 	mov	r16,r2
 2003418:	1823883a 	mov	r17,r3
 200341c:	003fc906 	br	2003344 <ceil+0xc8>
 2003420:	00a20034 	movhi	r2,34816
 2003424:	109d6704 	addi	r2,r2,30108
 2003428:	00df8e34 	movhi	r3,32312
 200342c:	18f90f04 	addi	r3,r3,-7108
 2003430:	180f883a 	mov	r7,r3
 2003434:	100d883a 	mov	r6,r2
 2003438:	2003b440 	call	2003b44 <__adddf3>
 200343c:	180b883a 	mov	r5,r3
 2003440:	000d883a 	mov	r6,zero
 2003444:	000f883a 	mov	r7,zero
 2003448:	1009883a 	mov	r4,r2
 200344c:	2003bb80 	call	2003bb8 <__gtdf2>
 2003450:	00bfba0e 	bge	zero,r2,200333c <ceil+0xc0>
 2003454:	88000b16 	blt	r17,zero,2003484 <ceil+0x208>
 2003458:	8c04b03a 	or	r2,r17,r16
 200345c:	1000041e 	bne	r2,zero,2003470 <ceil+0x1f4>
 2003460:	882f883a 	mov	r23,r17
 2003464:	003fb506 	br	200333c <ceil+0xc0>
 2003468:	8dc00044 	addi	r23,r17,1
 200346c:	003fe006 	br	20033f0 <ceil+0x174>
 2003470:	05cffc34 	movhi	r23,16368
 2003474:	0025883a 	mov	r18,zero
 2003478:	003fb006 	br	200333c <ceil+0xc0>
 200347c:	8dc00044 	addi	r23,r17,1
 2003480:	003fdc06 	br	20033f4 <ceil+0x178>
 2003484:	05e00034 	movhi	r23,32768
 2003488:	0025883a 	mov	r18,zero
 200348c:	003fab06 	br	200333c <ceil+0xc0>

02003490 <floor>:
 2003490:	2805d53a 	srai	r2,r5,20
 2003494:	defff604 	addi	sp,sp,-40
 2003498:	dd800615 	stw	r22,24(sp)
 200349c:	10c1ffcc 	andi	r3,r2,2047
 20034a0:	1dbf0044 	addi	r22,r3,-1023
 20034a4:	008004c4 	movi	r2,19
 20034a8:	ddc00715 	stw	r23,28(sp)
 20034ac:	dc800215 	stw	r18,8(sp)
 20034b0:	dc400115 	stw	r17,4(sp)
 20034b4:	dc000015 	stw	r16,0(sp)
 20034b8:	dfc00915 	stw	ra,36(sp)
 20034bc:	df000815 	stw	fp,32(sp)
 20034c0:	dd400515 	stw	r21,20(sp)
 20034c4:	dd000415 	stw	r20,16(sp)
 20034c8:	dcc00315 	stw	r19,12(sp)
 20034cc:	2021883a 	mov	r16,r4
 20034d0:	2823883a 	mov	r17,r5
 20034d4:	282f883a 	mov	r23,r5
 20034d8:	2025883a 	mov	r18,r4
 20034dc:	15802916 	blt	r2,r22,2003584 <floor+0xf4>
 20034e0:	b0004816 	blt	r22,zero,2003604 <floor+0x174>
 20034e4:	00800434 	movhi	r2,16
 20034e8:	10bfffc4 	addi	r2,r2,-1
 20034ec:	15b9d83a 	sra	fp,r2,r22
 20034f0:	282f883a 	mov	r23,r5
 20034f4:	e144703a 	and	r2,fp,r5
 20034f8:	1104b03a 	or	r2,r2,r4
 20034fc:	10001326 	beq	r2,zero,200354c <floor+0xbc>
 2003500:	00a20034 	movhi	r2,34816
 2003504:	109d6704 	addi	r2,r2,30108
 2003508:	00df8e34 	movhi	r3,32312
 200350c:	18f90f04 	addi	r3,r3,-7108
 2003510:	180f883a 	mov	r7,r3
 2003514:	100d883a 	mov	r6,r2
 2003518:	2003b440 	call	2003b44 <__adddf3>
 200351c:	180b883a 	mov	r5,r3
 2003520:	000d883a 	mov	r6,zero
 2003524:	000f883a 	mov	r7,zero
 2003528:	1009883a 	mov	r4,r2
 200352c:	2003bb80 	call	2003bb8 <__gtdf2>
 2003530:	0080040e 	bge	zero,r2,2003544 <floor+0xb4>
 2003534:	88004416 	blt	r17,zero,2003648 <floor+0x1b8>
 2003538:	0704303a 	nor	r2,zero,fp
 200353c:	b8ae703a 	and	r23,r23,r2
 2003540:	0025883a 	mov	r18,zero
 2003544:	9021883a 	mov	r16,r18
 2003548:	b823883a 	mov	r17,r23
 200354c:	8005883a 	mov	r2,r16
 2003550:	8807883a 	mov	r3,r17
 2003554:	dfc00917 	ldw	ra,36(sp)
 2003558:	df000817 	ldw	fp,32(sp)
 200355c:	ddc00717 	ldw	r23,28(sp)
 2003560:	dd800617 	ldw	r22,24(sp)
 2003564:	dd400517 	ldw	r21,20(sp)
 2003568:	dd000417 	ldw	r20,16(sp)
 200356c:	dcc00317 	ldw	r19,12(sp)
 2003570:	dc800217 	ldw	r18,8(sp)
 2003574:	dc400117 	ldw	r17,4(sp)
 2003578:	dc000017 	ldw	r16,0(sp)
 200357c:	dec00a04 	addi	sp,sp,40
 2003580:	f800283a 	ret
 2003584:	00800cc4 	movi	r2,51
 2003588:	15801616 	blt	r2,r22,20035e4 <floor+0x154>
 200358c:	18befb44 	addi	r2,r3,-1043
 2003590:	00ffffc4 	movi	r3,-1
 2003594:	18b8d83a 	srl	fp,r3,r2
 2003598:	e104703a 	and	r2,fp,r4
 200359c:	103feb26 	beq	r2,zero,200354c <floor+0xbc>
 20035a0:	00a20034 	movhi	r2,34816
 20035a4:	109d6704 	addi	r2,r2,30108
 20035a8:	00df8e34 	movhi	r3,32312
 20035ac:	18f90f04 	addi	r3,r3,-7108
 20035b0:	180f883a 	mov	r7,r3
 20035b4:	100d883a 	mov	r6,r2
 20035b8:	2003b440 	call	2003b44 <__adddf3>
 20035bc:	180b883a 	mov	r5,r3
 20035c0:	000d883a 	mov	r6,zero
 20035c4:	000f883a 	mov	r7,zero
 20035c8:	1009883a 	mov	r4,r2
 20035cc:	2003bb80 	call	2003bb8 <__gtdf2>
 20035d0:	0080210e 	bge	zero,r2,2003658 <floor+0x1c8>
 20035d4:	88002216 	blt	r17,zero,2003660 <floor+0x1d0>
 20035d8:	0704303a 	nor	r2,zero,fp
 20035dc:	90a4703a 	and	r18,r18,r2
 20035e0:	003fd806 	br	2003544 <floor+0xb4>
 20035e4:	00810004 	movi	r2,1024
 20035e8:	b0bfd81e 	bne	r22,r2,200354c <floor+0xbc>
 20035ec:	800d883a 	mov	r6,r16
 20035f0:	280f883a 	mov	r7,r5
 20035f4:	2003b440 	call	2003b44 <__adddf3>
 20035f8:	1021883a 	mov	r16,r2
 20035fc:	1823883a 	mov	r17,r3
 2003600:	003fd206 	br	200354c <floor+0xbc>
 2003604:	00a20034 	movhi	r2,34816
 2003608:	109d6704 	addi	r2,r2,30108
 200360c:	00df8e34 	movhi	r3,32312
 2003610:	18f90f04 	addi	r3,r3,-7108
 2003614:	180f883a 	mov	r7,r3
 2003618:	100d883a 	mov	r6,r2
 200361c:	2003b440 	call	2003b44 <__adddf3>
 2003620:	180b883a 	mov	r5,r3
 2003624:	000d883a 	mov	r6,zero
 2003628:	000f883a 	mov	r7,zero
 200362c:	1009883a 	mov	r4,r2
 2003630:	2003bb80 	call	2003bb8 <__gtdf2>
 2003634:	00bfc30e 	bge	zero,r2,2003544 <floor+0xb4>
 2003638:	88001416 	blt	r17,zero,200368c <floor+0x1fc>
 200363c:	002f883a 	mov	r23,zero
 2003640:	0025883a 	mov	r18,zero
 2003644:	003fbf06 	br	2003544 <floor+0xb4>
 2003648:	00800434 	movhi	r2,16
 200364c:	1585d83a 	sra	r2,r2,r22
 2003650:	88af883a 	add	r23,r17,r2
 2003654:	003fb806 	br	2003538 <floor+0xa8>
 2003658:	882f883a 	mov	r23,r17
 200365c:	003fb906 	br	2003544 <floor+0xb4>
 2003660:	00800504 	movi	r2,20
 2003664:	b0801126 	beq	r22,r2,20036ac <floor+0x21c>
 2003668:	00c00d04 	movi	r3,52
 200366c:	1d87c83a 	sub	r3,r3,r22
 2003670:	00800044 	movi	r2,1
 2003674:	10c4983a 	sll	r2,r2,r3
 2003678:	8085883a 	add	r2,r16,r2
 200367c:	1400012e 	bgeu	r2,r16,2003684 <floor+0x1f4>
 2003680:	8dc00044 	addi	r23,r17,1
 2003684:	1025883a 	mov	r18,r2
 2003688:	003fd306 	br	20035d8 <floor+0x148>
 200368c:	00a00034 	movhi	r2,32768
 2003690:	10bfffc4 	addi	r2,r2,-1
 2003694:	8884703a 	and	r2,r17,r2
 2003698:	8084b03a 	or	r2,r16,r2
 200369c:	103fee26 	beq	r2,zero,2003658 <floor+0x1c8>
 20036a0:	05effc34 	movhi	r23,49136
 20036a4:	0025883a 	mov	r18,zero
 20036a8:	003fa606 	br	2003544 <floor+0xb4>
 20036ac:	8dc00044 	addi	r23,r17,1
 20036b0:	003fc906 	br	20035d8 <floor+0x148>

020036b4 <_fpadd_parts>:
 20036b4:	defff804 	addi	sp,sp,-32
 20036b8:	dcc00315 	stw	r19,12(sp)
 20036bc:	2027883a 	mov	r19,r4
 20036c0:	21000017 	ldw	r4,0(r4)
 20036c4:	00c00044 	movi	r3,1
 20036c8:	dd400515 	stw	r21,20(sp)
 20036cc:	dd000415 	stw	r20,16(sp)
 20036d0:	ddc00715 	stw	r23,28(sp)
 20036d4:	dd800615 	stw	r22,24(sp)
 20036d8:	dc800215 	stw	r18,8(sp)
 20036dc:	dc400115 	stw	r17,4(sp)
 20036e0:	dc000015 	stw	r16,0(sp)
 20036e4:	282b883a 	mov	r21,r5
 20036e8:	3029883a 	mov	r20,r6
 20036ec:	1900632e 	bgeu	r3,r4,200387c <_fpadd_parts+0x1c8>
 20036f0:	28800017 	ldw	r2,0(r5)
 20036f4:	1880812e 	bgeu	r3,r2,20038fc <_fpadd_parts+0x248>
 20036f8:	00c00104 	movi	r3,4
 20036fc:	20c0dc26 	beq	r4,r3,2003a70 <_fpadd_parts+0x3bc>
 2003700:	10c07e26 	beq	r2,r3,20038fc <_fpadd_parts+0x248>
 2003704:	00c00084 	movi	r3,2
 2003708:	10c06726 	beq	r2,r3,20038a8 <_fpadd_parts+0x1f4>
 200370c:	20c07b26 	beq	r4,r3,20038fc <_fpadd_parts+0x248>
 2003710:	9dc00217 	ldw	r23,8(r19)
 2003714:	28c00217 	ldw	r3,8(r5)
 2003718:	9c400317 	ldw	r17,12(r19)
 200371c:	2bc00317 	ldw	r15,12(r5)
 2003720:	b8cdc83a 	sub	r6,r23,r3
 2003724:	9c800417 	ldw	r18,16(r19)
 2003728:	2c000417 	ldw	r16,16(r5)
 200372c:	3009883a 	mov	r4,r6
 2003730:	30009716 	blt	r6,zero,2003990 <_fpadd_parts+0x2dc>
 2003734:	00800fc4 	movi	r2,63
 2003738:	11806b16 	blt	r2,r6,20038e8 <_fpadd_parts+0x234>
 200373c:	0100a40e 	bge	zero,r4,20039d0 <_fpadd_parts+0x31c>
 2003740:	35bff804 	addi	r22,r6,-32
 2003744:	b000bc16 	blt	r22,zero,2003a38 <_fpadd_parts+0x384>
 2003748:	8596d83a 	srl	r11,r16,r22
 200374c:	0019883a 	mov	r12,zero
 2003750:	0013883a 	mov	r9,zero
 2003754:	01000044 	movi	r4,1
 2003758:	0015883a 	mov	r10,zero
 200375c:	b000be16 	blt	r22,zero,2003a58 <_fpadd_parts+0x3a4>
 2003760:	2590983a 	sll	r8,r4,r22
 2003764:	000f883a 	mov	r7,zero
 2003768:	00bfffc4 	movi	r2,-1
 200376c:	3889883a 	add	r4,r7,r2
 2003770:	408b883a 	add	r5,r8,r2
 2003774:	21cd803a 	cmpltu	r6,r4,r7
 2003778:	314b883a 	add	r5,r6,r5
 200377c:	7904703a 	and	r2,r15,r4
 2003780:	8146703a 	and	r3,r16,r5
 2003784:	10c4b03a 	or	r2,r2,r3
 2003788:	10000226 	beq	r2,zero,2003794 <_fpadd_parts+0xe0>
 200378c:	02400044 	movi	r9,1
 2003790:	0015883a 	mov	r10,zero
 2003794:	5a5eb03a 	or	r15,r11,r9
 2003798:	62a0b03a 	or	r16,r12,r10
 200379c:	99400117 	ldw	r5,4(r19)
 20037a0:	a8800117 	ldw	r2,4(r21)
 20037a4:	28806e26 	beq	r5,r2,2003960 <_fpadd_parts+0x2ac>
 20037a8:	28006626 	beq	r5,zero,2003944 <_fpadd_parts+0x290>
 20037ac:	7c45c83a 	sub	r2,r15,r17
 20037b0:	7889803a 	cmpltu	r4,r15,r2
 20037b4:	8487c83a 	sub	r3,r16,r18
 20037b8:	1909c83a 	sub	r4,r3,r4
 20037bc:	100d883a 	mov	r6,r2
 20037c0:	200f883a 	mov	r7,r4
 20037c4:	38007716 	blt	r7,zero,20039a4 <_fpadd_parts+0x2f0>
 20037c8:	a5c00215 	stw	r23,8(r20)
 20037cc:	a1c00415 	stw	r7,16(r20)
 20037d0:	a0000115 	stw	zero,4(r20)
 20037d4:	a1800315 	stw	r6,12(r20)
 20037d8:	a2000317 	ldw	r8,12(r20)
 20037dc:	a2400417 	ldw	r9,16(r20)
 20037e0:	00bfffc4 	movi	r2,-1
 20037e4:	408b883a 	add	r5,r8,r2
 20037e8:	2a09803a 	cmpltu	r4,r5,r8
 20037ec:	488d883a 	add	r6,r9,r2
 20037f0:	01c40034 	movhi	r7,4096
 20037f4:	39ffffc4 	addi	r7,r7,-1
 20037f8:	218d883a 	add	r6,r4,r6
 20037fc:	39801736 	bltu	r7,r6,200385c <_fpadd_parts+0x1a8>
 2003800:	31c06526 	beq	r6,r7,2003998 <_fpadd_parts+0x2e4>
 2003804:	a3000217 	ldw	r12,8(r20)
 2003808:	4209883a 	add	r4,r8,r8
 200380c:	00bfffc4 	movi	r2,-1
 2003810:	220f803a 	cmpltu	r7,r4,r8
 2003814:	4a4b883a 	add	r5,r9,r9
 2003818:	394f883a 	add	r7,r7,r5
 200381c:	2095883a 	add	r10,r4,r2
 2003820:	3897883a 	add	r11,r7,r2
 2003824:	510d803a 	cmpltu	r6,r10,r4
 2003828:	6099883a 	add	r12,r12,r2
 200382c:	32d7883a 	add	r11,r6,r11
 2003830:	00840034 	movhi	r2,4096
 2003834:	10bfffc4 	addi	r2,r2,-1
 2003838:	2011883a 	mov	r8,r4
 200383c:	3813883a 	mov	r9,r7
 2003840:	a1000315 	stw	r4,12(r20)
 2003844:	a1c00415 	stw	r7,16(r20)
 2003848:	a3000215 	stw	r12,8(r20)
 200384c:	12c00336 	bltu	r2,r11,200385c <_fpadd_parts+0x1a8>
 2003850:	58bfed1e 	bne	r11,r2,2003808 <_fpadd_parts+0x154>
 2003854:	00bfff84 	movi	r2,-2
 2003858:	12bfeb2e 	bgeu	r2,r10,2003808 <_fpadd_parts+0x154>
 200385c:	a2800417 	ldw	r10,16(r20)
 2003860:	008000c4 	movi	r2,3
 2003864:	00c80034 	movhi	r3,8192
 2003868:	18ffffc4 	addi	r3,r3,-1
 200386c:	a2400317 	ldw	r9,12(r20)
 2003870:	a0800015 	stw	r2,0(r20)
 2003874:	1a802336 	bltu	r3,r10,2003904 <_fpadd_parts+0x250>
 2003878:	a027883a 	mov	r19,r20
 200387c:	9805883a 	mov	r2,r19
 2003880:	ddc00717 	ldw	r23,28(sp)
 2003884:	dd800617 	ldw	r22,24(sp)
 2003888:	dd400517 	ldw	r21,20(sp)
 200388c:	dd000417 	ldw	r20,16(sp)
 2003890:	dcc00317 	ldw	r19,12(sp)
 2003894:	dc800217 	ldw	r18,8(sp)
 2003898:	dc400117 	ldw	r17,4(sp)
 200389c:	dc000017 	ldw	r16,0(sp)
 20038a0:	dec00804 	addi	sp,sp,32
 20038a4:	f800283a 	ret
 20038a8:	20fff41e 	bne	r4,r3,200387c <_fpadd_parts+0x1c8>
 20038ac:	31000015 	stw	r4,0(r6)
 20038b0:	98800117 	ldw	r2,4(r19)
 20038b4:	30800115 	stw	r2,4(r6)
 20038b8:	98c00217 	ldw	r3,8(r19)
 20038bc:	30c00215 	stw	r3,8(r6)
 20038c0:	98800317 	ldw	r2,12(r19)
 20038c4:	30800315 	stw	r2,12(r6)
 20038c8:	98c00417 	ldw	r3,16(r19)
 20038cc:	30c00415 	stw	r3,16(r6)
 20038d0:	98800117 	ldw	r2,4(r19)
 20038d4:	28c00117 	ldw	r3,4(r5)
 20038d8:	3027883a 	mov	r19,r6
 20038dc:	10c4703a 	and	r2,r2,r3
 20038e0:	30800115 	stw	r2,4(r6)
 20038e4:	003fe506 	br	200387c <_fpadd_parts+0x1c8>
 20038e8:	1dc02616 	blt	r3,r23,2003984 <_fpadd_parts+0x2d0>
 20038ec:	0023883a 	mov	r17,zero
 20038f0:	182f883a 	mov	r23,r3
 20038f4:	0025883a 	mov	r18,zero
 20038f8:	003fa806 	br	200379c <_fpadd_parts+0xe8>
 20038fc:	a827883a 	mov	r19,r21
 2003900:	003fde06 	br	200387c <_fpadd_parts+0x1c8>
 2003904:	01800044 	movi	r6,1
 2003908:	500497fa 	slli	r2,r10,31
 200390c:	4808d07a 	srli	r4,r9,1
 2003910:	518ad83a 	srl	r5,r10,r6
 2003914:	a2000217 	ldw	r8,8(r20)
 2003918:	1108b03a 	or	r4,r2,r4
 200391c:	0007883a 	mov	r3,zero
 2003920:	4984703a 	and	r2,r9,r6
 2003924:	208cb03a 	or	r6,r4,r2
 2003928:	28ceb03a 	or	r7,r5,r3
 200392c:	42000044 	addi	r8,r8,1
 2003930:	a027883a 	mov	r19,r20
 2003934:	a1c00415 	stw	r7,16(r20)
 2003938:	a2000215 	stw	r8,8(r20)
 200393c:	a1800315 	stw	r6,12(r20)
 2003940:	003fce06 	br	200387c <_fpadd_parts+0x1c8>
 2003944:	8bc5c83a 	sub	r2,r17,r15
 2003948:	8889803a 	cmpltu	r4,r17,r2
 200394c:	9407c83a 	sub	r3,r18,r16
 2003950:	1909c83a 	sub	r4,r3,r4
 2003954:	100d883a 	mov	r6,r2
 2003958:	200f883a 	mov	r7,r4
 200395c:	003f9906 	br	20037c4 <_fpadd_parts+0x110>
 2003960:	8bc5883a 	add	r2,r17,r15
 2003964:	1449803a 	cmpltu	r4,r2,r17
 2003968:	9407883a 	add	r3,r18,r16
 200396c:	20c9883a 	add	r4,r4,r3
 2003970:	a1400115 	stw	r5,4(r20)
 2003974:	a5c00215 	stw	r23,8(r20)
 2003978:	a0800315 	stw	r2,12(r20)
 200397c:	a1000415 	stw	r4,16(r20)
 2003980:	003fb606 	br	200385c <_fpadd_parts+0x1a8>
 2003984:	001f883a 	mov	r15,zero
 2003988:	0021883a 	mov	r16,zero
 200398c:	003f8306 	br	200379c <_fpadd_parts+0xe8>
 2003990:	018dc83a 	sub	r6,zero,r6
 2003994:	003f6706 	br	2003734 <_fpadd_parts+0x80>
 2003998:	00bfff84 	movi	r2,-2
 200399c:	117faf36 	bltu	r2,r5,200385c <_fpadd_parts+0x1a8>
 20039a0:	003f9806 	br	2003804 <_fpadd_parts+0x150>
 20039a4:	0005883a 	mov	r2,zero
 20039a8:	1189c83a 	sub	r4,r2,r6
 20039ac:	1105803a 	cmpltu	r2,r2,r4
 20039b0:	01cbc83a 	sub	r5,zero,r7
 20039b4:	2885c83a 	sub	r2,r5,r2
 20039b8:	01800044 	movi	r6,1
 20039bc:	a1800115 	stw	r6,4(r20)
 20039c0:	a5c00215 	stw	r23,8(r20)
 20039c4:	a1000315 	stw	r4,12(r20)
 20039c8:	a0800415 	stw	r2,16(r20)
 20039cc:	003f8206 	br	20037d8 <_fpadd_parts+0x124>
 20039d0:	203f7226 	beq	r4,zero,200379c <_fpadd_parts+0xe8>
 20039d4:	35bff804 	addi	r22,r6,-32
 20039d8:	b9af883a 	add	r23,r23,r6
 20039dc:	b0003116 	blt	r22,zero,2003aa4 <_fpadd_parts+0x3f0>
 20039e0:	959ad83a 	srl	r13,r18,r22
 20039e4:	001d883a 	mov	r14,zero
 20039e8:	000f883a 	mov	r7,zero
 20039ec:	01000044 	movi	r4,1
 20039f0:	0011883a 	mov	r8,zero
 20039f4:	b0002516 	blt	r22,zero,2003a8c <_fpadd_parts+0x3d8>
 20039f8:	2594983a 	sll	r10,r4,r22
 20039fc:	0013883a 	mov	r9,zero
 2003a00:	00bfffc4 	movi	r2,-1
 2003a04:	4889883a 	add	r4,r9,r2
 2003a08:	508b883a 	add	r5,r10,r2
 2003a0c:	224d803a 	cmpltu	r6,r4,r9
 2003a10:	314b883a 	add	r5,r6,r5
 2003a14:	8904703a 	and	r2,r17,r4
 2003a18:	9146703a 	and	r3,r18,r5
 2003a1c:	10c4b03a 	or	r2,r2,r3
 2003a20:	10000226 	beq	r2,zero,2003a2c <_fpadd_parts+0x378>
 2003a24:	01c00044 	movi	r7,1
 2003a28:	0011883a 	mov	r8,zero
 2003a2c:	69e2b03a 	or	r17,r13,r7
 2003a30:	7224b03a 	or	r18,r14,r8
 2003a34:	003f5906 	br	200379c <_fpadd_parts+0xe8>
 2003a38:	8407883a 	add	r3,r16,r16
 2003a3c:	008007c4 	movi	r2,31
 2003a40:	1185c83a 	sub	r2,r2,r6
 2003a44:	1886983a 	sll	r3,r3,r2
 2003a48:	7996d83a 	srl	r11,r15,r6
 2003a4c:	8198d83a 	srl	r12,r16,r6
 2003a50:	1ad6b03a 	or	r11,r3,r11
 2003a54:	003f3e06 	br	2003750 <_fpadd_parts+0x9c>
 2003a58:	2006d07a 	srli	r3,r4,1
 2003a5c:	008007c4 	movi	r2,31
 2003a60:	1185c83a 	sub	r2,r2,r6
 2003a64:	1890d83a 	srl	r8,r3,r2
 2003a68:	218e983a 	sll	r7,r4,r6
 2003a6c:	003f3e06 	br	2003768 <_fpadd_parts+0xb4>
 2003a70:	113f821e 	bne	r2,r4,200387c <_fpadd_parts+0x1c8>
 2003a74:	28c00117 	ldw	r3,4(r5)
 2003a78:	98800117 	ldw	r2,4(r19)
 2003a7c:	10ff7f26 	beq	r2,r3,200387c <_fpadd_parts+0x1c8>
 2003a80:	04c08074 	movhi	r19,513
 2003a84:	9cc4d604 	addi	r19,r19,4952
 2003a88:	003f7c06 	br	200387c <_fpadd_parts+0x1c8>
 2003a8c:	2006d07a 	srli	r3,r4,1
 2003a90:	008007c4 	movi	r2,31
 2003a94:	1185c83a 	sub	r2,r2,r6
 2003a98:	1894d83a 	srl	r10,r3,r2
 2003a9c:	2192983a 	sll	r9,r4,r6
 2003aa0:	003fd706 	br	2003a00 <_fpadd_parts+0x34c>
 2003aa4:	9487883a 	add	r3,r18,r18
 2003aa8:	008007c4 	movi	r2,31
 2003aac:	1185c83a 	sub	r2,r2,r6
 2003ab0:	1886983a 	sll	r3,r3,r2
 2003ab4:	899ad83a 	srl	r13,r17,r6
 2003ab8:	919cd83a 	srl	r14,r18,r6
 2003abc:	1b5ab03a 	or	r13,r3,r13
 2003ac0:	003fc906 	br	20039e8 <_fpadd_parts+0x334>

02003ac4 <__subdf3>:
 2003ac4:	deffea04 	addi	sp,sp,-88
 2003ac8:	dcc01415 	stw	r19,80(sp)
 2003acc:	dcc00404 	addi	r19,sp,16
 2003ad0:	2011883a 	mov	r8,r4
 2003ad4:	2813883a 	mov	r9,r5
 2003ad8:	dc401315 	stw	r17,76(sp)
 2003adc:	d809883a 	mov	r4,sp
 2003ae0:	980b883a 	mov	r5,r19
 2003ae4:	dc400904 	addi	r17,sp,36
 2003ae8:	dfc01515 	stw	ra,84(sp)
 2003aec:	da400115 	stw	r9,4(sp)
 2003af0:	d9c00315 	stw	r7,12(sp)
 2003af4:	da000015 	stw	r8,0(sp)
 2003af8:	d9800215 	stw	r6,8(sp)
 2003afc:	20044bc0 	call	20044bc <__unpack_d>
 2003b00:	d9000204 	addi	r4,sp,8
 2003b04:	880b883a 	mov	r5,r17
 2003b08:	20044bc0 	call	20044bc <__unpack_d>
 2003b0c:	d8800a17 	ldw	r2,40(sp)
 2003b10:	880b883a 	mov	r5,r17
 2003b14:	9809883a 	mov	r4,r19
 2003b18:	d9800e04 	addi	r6,sp,56
 2003b1c:	1080005c 	xori	r2,r2,1
 2003b20:	d8800a15 	stw	r2,40(sp)
 2003b24:	20036b40 	call	20036b4 <_fpadd_parts>
 2003b28:	1009883a 	mov	r4,r2
 2003b2c:	20041a80 	call	20041a8 <__pack_d>
 2003b30:	dfc01517 	ldw	ra,84(sp)
 2003b34:	dcc01417 	ldw	r19,80(sp)
 2003b38:	dc401317 	ldw	r17,76(sp)
 2003b3c:	dec01604 	addi	sp,sp,88
 2003b40:	f800283a 	ret

02003b44 <__adddf3>:
 2003b44:	deffea04 	addi	sp,sp,-88
 2003b48:	dcc01415 	stw	r19,80(sp)
 2003b4c:	dcc00404 	addi	r19,sp,16
 2003b50:	2011883a 	mov	r8,r4
 2003b54:	2813883a 	mov	r9,r5
 2003b58:	dc401315 	stw	r17,76(sp)
 2003b5c:	d809883a 	mov	r4,sp
 2003b60:	980b883a 	mov	r5,r19
 2003b64:	dc400904 	addi	r17,sp,36
 2003b68:	dfc01515 	stw	ra,84(sp)
 2003b6c:	da400115 	stw	r9,4(sp)
 2003b70:	d9c00315 	stw	r7,12(sp)
 2003b74:	da000015 	stw	r8,0(sp)
 2003b78:	d9800215 	stw	r6,8(sp)
 2003b7c:	20044bc0 	call	20044bc <__unpack_d>
 2003b80:	d9000204 	addi	r4,sp,8
 2003b84:	880b883a 	mov	r5,r17
 2003b88:	20044bc0 	call	20044bc <__unpack_d>
 2003b8c:	d9800e04 	addi	r6,sp,56
 2003b90:	9809883a 	mov	r4,r19
 2003b94:	880b883a 	mov	r5,r17
 2003b98:	20036b40 	call	20036b4 <_fpadd_parts>
 2003b9c:	1009883a 	mov	r4,r2
 2003ba0:	20041a80 	call	20041a8 <__pack_d>
 2003ba4:	dfc01517 	ldw	ra,84(sp)
 2003ba8:	dcc01417 	ldw	r19,80(sp)
 2003bac:	dc401317 	ldw	r17,76(sp)
 2003bb0:	dec01604 	addi	sp,sp,88
 2003bb4:	f800283a 	ret

02003bb8 <__gtdf2>:
 2003bb8:	deffef04 	addi	sp,sp,-68
 2003bbc:	dc400f15 	stw	r17,60(sp)
 2003bc0:	dc400404 	addi	r17,sp,16
 2003bc4:	2005883a 	mov	r2,r4
 2003bc8:	2807883a 	mov	r3,r5
 2003bcc:	dc000e15 	stw	r16,56(sp)
 2003bd0:	d809883a 	mov	r4,sp
 2003bd4:	880b883a 	mov	r5,r17
 2003bd8:	dc000904 	addi	r16,sp,36
 2003bdc:	d8c00115 	stw	r3,4(sp)
 2003be0:	d8800015 	stw	r2,0(sp)
 2003be4:	d9800215 	stw	r6,8(sp)
 2003be8:	dfc01015 	stw	ra,64(sp)
 2003bec:	d9c00315 	stw	r7,12(sp)
 2003bf0:	20044bc0 	call	20044bc <__unpack_d>
 2003bf4:	d9000204 	addi	r4,sp,8
 2003bf8:	800b883a 	mov	r5,r16
 2003bfc:	20044bc0 	call	20044bc <__unpack_d>
 2003c00:	d8800417 	ldw	r2,16(sp)
 2003c04:	00c00044 	movi	r3,1
 2003c08:	01bfffc4 	movi	r6,-1
 2003c0c:	1880062e 	bgeu	r3,r2,2003c28 <__gtdf2+0x70>
 2003c10:	d8800917 	ldw	r2,36(sp)
 2003c14:	8809883a 	mov	r4,r17
 2003c18:	800b883a 	mov	r5,r16
 2003c1c:	1880022e 	bgeu	r3,r2,2003c28 <__gtdf2+0x70>
 2003c20:	20045f40 	call	20045f4 <__fpcmp_parts_d>
 2003c24:	100d883a 	mov	r6,r2
 2003c28:	3005883a 	mov	r2,r6
 2003c2c:	dfc01017 	ldw	ra,64(sp)
 2003c30:	dc400f17 	ldw	r17,60(sp)
 2003c34:	dc000e17 	ldw	r16,56(sp)
 2003c38:	dec01104 	addi	sp,sp,68
 2003c3c:	f800283a 	ret

02003c40 <__floatsidf>:
 2003c40:	2006d7fa 	srli	r3,r4,31
 2003c44:	defff604 	addi	sp,sp,-40
 2003c48:	008000c4 	movi	r2,3
 2003c4c:	dfc00915 	stw	ra,36(sp)
 2003c50:	dcc00815 	stw	r19,32(sp)
 2003c54:	dc800715 	stw	r18,28(sp)
 2003c58:	dc400615 	stw	r17,24(sp)
 2003c5c:	dc000515 	stw	r16,20(sp)
 2003c60:	d8800015 	stw	r2,0(sp)
 2003c64:	d8c00115 	stw	r3,4(sp)
 2003c68:	20000f1e 	bne	r4,zero,2003ca8 <__floatsidf+0x68>
 2003c6c:	00800084 	movi	r2,2
 2003c70:	d8800015 	stw	r2,0(sp)
 2003c74:	d809883a 	mov	r4,sp
 2003c78:	20041a80 	call	20041a8 <__pack_d>
 2003c7c:	1009883a 	mov	r4,r2
 2003c80:	180b883a 	mov	r5,r3
 2003c84:	2005883a 	mov	r2,r4
 2003c88:	2807883a 	mov	r3,r5
 2003c8c:	dfc00917 	ldw	ra,36(sp)
 2003c90:	dcc00817 	ldw	r19,32(sp)
 2003c94:	dc800717 	ldw	r18,28(sp)
 2003c98:	dc400617 	ldw	r17,24(sp)
 2003c9c:	dc000517 	ldw	r16,20(sp)
 2003ca0:	dec00a04 	addi	sp,sp,40
 2003ca4:	f800283a 	ret
 2003ca8:	00800f04 	movi	r2,60
 2003cac:	1807003a 	cmpeq	r3,r3,zero
 2003cb0:	d8800215 	stw	r2,8(sp)
 2003cb4:	18001126 	beq	r3,zero,2003cfc <__floatsidf+0xbc>
 2003cb8:	0027883a 	mov	r19,zero
 2003cbc:	2025883a 	mov	r18,r4
 2003cc0:	d9000315 	stw	r4,12(sp)
 2003cc4:	dcc00415 	stw	r19,16(sp)
 2003cc8:	20041280 	call	2004128 <__clzsi2>
 2003ccc:	11000744 	addi	r4,r2,29
 2003cd0:	013fe80e 	bge	zero,r4,2003c74 <__floatsidf+0x34>
 2003cd4:	10bfff44 	addi	r2,r2,-3
 2003cd8:	10000c16 	blt	r2,zero,2003d0c <__floatsidf+0xcc>
 2003cdc:	90a2983a 	sll	r17,r18,r2
 2003ce0:	0021883a 	mov	r16,zero
 2003ce4:	d8800217 	ldw	r2,8(sp)
 2003ce8:	dc400415 	stw	r17,16(sp)
 2003cec:	dc000315 	stw	r16,12(sp)
 2003cf0:	1105c83a 	sub	r2,r2,r4
 2003cf4:	d8800215 	stw	r2,8(sp)
 2003cf8:	003fde06 	br	2003c74 <__floatsidf+0x34>
 2003cfc:	00a00034 	movhi	r2,32768
 2003d00:	20800a26 	beq	r4,r2,2003d2c <__floatsidf+0xec>
 2003d04:	0109c83a 	sub	r4,zero,r4
 2003d08:	003feb06 	br	2003cb8 <__floatsidf+0x78>
 2003d0c:	9006d07a 	srli	r3,r18,1
 2003d10:	008007c4 	movi	r2,31
 2003d14:	1105c83a 	sub	r2,r2,r4
 2003d18:	1886d83a 	srl	r3,r3,r2
 2003d1c:	9922983a 	sll	r17,r19,r4
 2003d20:	9120983a 	sll	r16,r18,r4
 2003d24:	1c62b03a 	or	r17,r3,r17
 2003d28:	003fee06 	br	2003ce4 <__floatsidf+0xa4>
 2003d2c:	0009883a 	mov	r4,zero
 2003d30:	01707834 	movhi	r5,49632
 2003d34:	003fd306 	br	2003c84 <__floatsidf+0x44>

02003d38 <__fixdfsi>:
 2003d38:	defff804 	addi	sp,sp,-32
 2003d3c:	2005883a 	mov	r2,r4
 2003d40:	2807883a 	mov	r3,r5
 2003d44:	d809883a 	mov	r4,sp
 2003d48:	d9400204 	addi	r5,sp,8
 2003d4c:	d8c00115 	stw	r3,4(sp)
 2003d50:	d8800015 	stw	r2,0(sp)
 2003d54:	dfc00715 	stw	ra,28(sp)
 2003d58:	20044bc0 	call	20044bc <__unpack_d>
 2003d5c:	d8c00217 	ldw	r3,8(sp)
 2003d60:	00800084 	movi	r2,2
 2003d64:	1880051e 	bne	r3,r2,2003d7c <__fixdfsi+0x44>
 2003d68:	0007883a 	mov	r3,zero
 2003d6c:	1805883a 	mov	r2,r3
 2003d70:	dfc00717 	ldw	ra,28(sp)
 2003d74:	dec00804 	addi	sp,sp,32
 2003d78:	f800283a 	ret
 2003d7c:	00800044 	movi	r2,1
 2003d80:	10fff92e 	bgeu	r2,r3,2003d68 <__fixdfsi+0x30>
 2003d84:	00800104 	movi	r2,4
 2003d88:	18800426 	beq	r3,r2,2003d9c <__fixdfsi+0x64>
 2003d8c:	d8c00417 	ldw	r3,16(sp)
 2003d90:	183ff516 	blt	r3,zero,2003d68 <__fixdfsi+0x30>
 2003d94:	00800784 	movi	r2,30
 2003d98:	10c0080e 	bge	r2,r3,2003dbc <__fixdfsi+0x84>
 2003d9c:	d8800317 	ldw	r2,12(sp)
 2003da0:	1000121e 	bne	r2,zero,2003dec <__fixdfsi+0xb4>
 2003da4:	00e00034 	movhi	r3,32768
 2003da8:	18ffffc4 	addi	r3,r3,-1
 2003dac:	1805883a 	mov	r2,r3
 2003db0:	dfc00717 	ldw	ra,28(sp)
 2003db4:	dec00804 	addi	sp,sp,32
 2003db8:	f800283a 	ret
 2003dbc:	00800f04 	movi	r2,60
 2003dc0:	10d1c83a 	sub	r8,r2,r3
 2003dc4:	40bff804 	addi	r2,r8,-32
 2003dc8:	d9800517 	ldw	r6,20(sp)
 2003dcc:	d9c00617 	ldw	r7,24(sp)
 2003dd0:	10000816 	blt	r2,zero,2003df4 <__fixdfsi+0xbc>
 2003dd4:	3888d83a 	srl	r4,r7,r2
 2003dd8:	d8800317 	ldw	r2,12(sp)
 2003ddc:	2007883a 	mov	r3,r4
 2003de0:	103fe226 	beq	r2,zero,2003d6c <__fixdfsi+0x34>
 2003de4:	0107c83a 	sub	r3,zero,r4
 2003de8:	003fe006 	br	2003d6c <__fixdfsi+0x34>
 2003dec:	00e00034 	movhi	r3,32768
 2003df0:	003fde06 	br	2003d6c <__fixdfsi+0x34>
 2003df4:	39c7883a 	add	r3,r7,r7
 2003df8:	008007c4 	movi	r2,31
 2003dfc:	1205c83a 	sub	r2,r2,r8
 2003e00:	1886983a 	sll	r3,r3,r2
 2003e04:	3208d83a 	srl	r4,r6,r8
 2003e08:	1908b03a 	or	r4,r3,r4
 2003e0c:	003ff206 	br	2003dd8 <__fixdfsi+0xa0>

02003e10 <__floatunsidf>:
 2003e10:	defff204 	addi	sp,sp,-56
 2003e14:	dfc00d15 	stw	ra,52(sp)
 2003e18:	ddc00c15 	stw	r23,48(sp)
 2003e1c:	dd800b15 	stw	r22,44(sp)
 2003e20:	dd400a15 	stw	r21,40(sp)
 2003e24:	dd000915 	stw	r20,36(sp)
 2003e28:	dcc00815 	stw	r19,32(sp)
 2003e2c:	dc800715 	stw	r18,28(sp)
 2003e30:	dc400615 	stw	r17,24(sp)
 2003e34:	dc000515 	stw	r16,20(sp)
 2003e38:	d8000115 	stw	zero,4(sp)
 2003e3c:	20000f1e 	bne	r4,zero,2003e7c <__floatunsidf+0x6c>
 2003e40:	00800084 	movi	r2,2
 2003e44:	d8800015 	stw	r2,0(sp)
 2003e48:	d809883a 	mov	r4,sp
 2003e4c:	20041a80 	call	20041a8 <__pack_d>
 2003e50:	dfc00d17 	ldw	ra,52(sp)
 2003e54:	ddc00c17 	ldw	r23,48(sp)
 2003e58:	dd800b17 	ldw	r22,44(sp)
 2003e5c:	dd400a17 	ldw	r21,40(sp)
 2003e60:	dd000917 	ldw	r20,36(sp)
 2003e64:	dcc00817 	ldw	r19,32(sp)
 2003e68:	dc800717 	ldw	r18,28(sp)
 2003e6c:	dc400617 	ldw	r17,24(sp)
 2003e70:	dc000517 	ldw	r16,20(sp)
 2003e74:	dec00e04 	addi	sp,sp,56
 2003e78:	f800283a 	ret
 2003e7c:	008000c4 	movi	r2,3
 2003e80:	00c00f04 	movi	r3,60
 2003e84:	002f883a 	mov	r23,zero
 2003e88:	202d883a 	mov	r22,r4
 2003e8c:	d8800015 	stw	r2,0(sp)
 2003e90:	d8c00215 	stw	r3,8(sp)
 2003e94:	d9000315 	stw	r4,12(sp)
 2003e98:	ddc00415 	stw	r23,16(sp)
 2003e9c:	20041280 	call	2004128 <__clzsi2>
 2003ea0:	12400744 	addi	r9,r2,29
 2003ea4:	48000b16 	blt	r9,zero,2003ed4 <__floatunsidf+0xc4>
 2003ea8:	483fe726 	beq	r9,zero,2003e48 <__floatunsidf+0x38>
 2003eac:	10bfff44 	addi	r2,r2,-3
 2003eb0:	10002e16 	blt	r2,zero,2003f6c <__floatunsidf+0x15c>
 2003eb4:	b0a2983a 	sll	r17,r22,r2
 2003eb8:	0021883a 	mov	r16,zero
 2003ebc:	d8800217 	ldw	r2,8(sp)
 2003ec0:	dc400415 	stw	r17,16(sp)
 2003ec4:	dc000315 	stw	r16,12(sp)
 2003ec8:	1245c83a 	sub	r2,r2,r9
 2003ecc:	d8800215 	stw	r2,8(sp)
 2003ed0:	003fdd06 	br	2003e48 <__floatunsidf+0x38>
 2003ed4:	0255c83a 	sub	r10,zero,r9
 2003ed8:	51bff804 	addi	r6,r10,-32
 2003edc:	30001b16 	blt	r6,zero,2003f4c <__floatunsidf+0x13c>
 2003ee0:	b9a8d83a 	srl	r20,r23,r6
 2003ee4:	002b883a 	mov	r21,zero
 2003ee8:	000f883a 	mov	r7,zero
 2003eec:	01000044 	movi	r4,1
 2003ef0:	0011883a 	mov	r8,zero
 2003ef4:	30002516 	blt	r6,zero,2003f8c <__floatunsidf+0x17c>
 2003ef8:	21a6983a 	sll	r19,r4,r6
 2003efc:	0025883a 	mov	r18,zero
 2003f00:	00bfffc4 	movi	r2,-1
 2003f04:	9089883a 	add	r4,r18,r2
 2003f08:	988b883a 	add	r5,r19,r2
 2003f0c:	248d803a 	cmpltu	r6,r4,r18
 2003f10:	314b883a 	add	r5,r6,r5
 2003f14:	b104703a 	and	r2,r22,r4
 2003f18:	b946703a 	and	r3,r23,r5
 2003f1c:	10c4b03a 	or	r2,r2,r3
 2003f20:	10000226 	beq	r2,zero,2003f2c <__floatunsidf+0x11c>
 2003f24:	01c00044 	movi	r7,1
 2003f28:	0011883a 	mov	r8,zero
 2003f2c:	d9000217 	ldw	r4,8(sp)
 2003f30:	a1c4b03a 	or	r2,r20,r7
 2003f34:	aa06b03a 	or	r3,r21,r8
 2003f38:	2249c83a 	sub	r4,r4,r9
 2003f3c:	d8c00415 	stw	r3,16(sp)
 2003f40:	d9000215 	stw	r4,8(sp)
 2003f44:	d8800315 	stw	r2,12(sp)
 2003f48:	003fbf06 	br	2003e48 <__floatunsidf+0x38>
 2003f4c:	bdc7883a 	add	r3,r23,r23
 2003f50:	008007c4 	movi	r2,31
 2003f54:	1285c83a 	sub	r2,r2,r10
 2003f58:	1886983a 	sll	r3,r3,r2
 2003f5c:	b2a8d83a 	srl	r20,r22,r10
 2003f60:	baaad83a 	srl	r21,r23,r10
 2003f64:	1d28b03a 	or	r20,r3,r20
 2003f68:	003fdf06 	br	2003ee8 <__floatunsidf+0xd8>
 2003f6c:	b006d07a 	srli	r3,r22,1
 2003f70:	008007c4 	movi	r2,31
 2003f74:	1245c83a 	sub	r2,r2,r9
 2003f78:	1886d83a 	srl	r3,r3,r2
 2003f7c:	ba62983a 	sll	r17,r23,r9
 2003f80:	b260983a 	sll	r16,r22,r9
 2003f84:	1c62b03a 	or	r17,r3,r17
 2003f88:	003fcc06 	br	2003ebc <__floatunsidf+0xac>
 2003f8c:	2006d07a 	srli	r3,r4,1
 2003f90:	008007c4 	movi	r2,31
 2003f94:	1285c83a 	sub	r2,r2,r10
 2003f98:	18a6d83a 	srl	r19,r3,r2
 2003f9c:	22a4983a 	sll	r18,r4,r10
 2003fa0:	003fd706 	br	2003f00 <__floatunsidf+0xf0>

02003fa4 <udivmodsi4>:
 2003fa4:	29001b2e 	bgeu	r5,r4,2004014 <udivmodsi4+0x70>
 2003fa8:	28001a16 	blt	r5,zero,2004014 <udivmodsi4+0x70>
 2003fac:	00800044 	movi	r2,1
 2003fb0:	0007883a 	mov	r3,zero
 2003fb4:	01c007c4 	movi	r7,31
 2003fb8:	00000306 	br	2003fc8 <udivmodsi4+0x24>
 2003fbc:	19c01326 	beq	r3,r7,200400c <udivmodsi4+0x68>
 2003fc0:	18c00044 	addi	r3,r3,1
 2003fc4:	28000416 	blt	r5,zero,2003fd8 <udivmodsi4+0x34>
 2003fc8:	294b883a 	add	r5,r5,r5
 2003fcc:	1085883a 	add	r2,r2,r2
 2003fd0:	293ffa36 	bltu	r5,r4,2003fbc <udivmodsi4+0x18>
 2003fd4:	10000d26 	beq	r2,zero,200400c <udivmodsi4+0x68>
 2003fd8:	0007883a 	mov	r3,zero
 2003fdc:	21400236 	bltu	r4,r5,2003fe8 <udivmodsi4+0x44>
 2003fe0:	2149c83a 	sub	r4,r4,r5
 2003fe4:	1886b03a 	or	r3,r3,r2
 2003fe8:	1004d07a 	srli	r2,r2,1
 2003fec:	280ad07a 	srli	r5,r5,1
 2003ff0:	103ffa1e 	bne	r2,zero,2003fdc <udivmodsi4+0x38>
 2003ff4:	30000226 	beq	r6,zero,2004000 <udivmodsi4+0x5c>
 2003ff8:	2005883a 	mov	r2,r4
 2003ffc:	f800283a 	ret
 2004000:	1809883a 	mov	r4,r3
 2004004:	2005883a 	mov	r2,r4
 2004008:	f800283a 	ret
 200400c:	0007883a 	mov	r3,zero
 2004010:	003ff806 	br	2003ff4 <udivmodsi4+0x50>
 2004014:	00800044 	movi	r2,1
 2004018:	0007883a 	mov	r3,zero
 200401c:	003fef06 	br	2003fdc <udivmodsi4+0x38>

02004020 <__divsi3>:
 2004020:	defffe04 	addi	sp,sp,-8
 2004024:	dc000015 	stw	r16,0(sp)
 2004028:	dfc00115 	stw	ra,4(sp)
 200402c:	0021883a 	mov	r16,zero
 2004030:	20000c16 	blt	r4,zero,2004064 <__divsi3+0x44>
 2004034:	000d883a 	mov	r6,zero
 2004038:	28000e16 	blt	r5,zero,2004074 <__divsi3+0x54>
 200403c:	2003fa40 	call	2003fa4 <udivmodsi4>
 2004040:	1007883a 	mov	r3,r2
 2004044:	8005003a 	cmpeq	r2,r16,zero
 2004048:	1000011e 	bne	r2,zero,2004050 <__divsi3+0x30>
 200404c:	00c7c83a 	sub	r3,zero,r3
 2004050:	1805883a 	mov	r2,r3
 2004054:	dfc00117 	ldw	ra,4(sp)
 2004058:	dc000017 	ldw	r16,0(sp)
 200405c:	dec00204 	addi	sp,sp,8
 2004060:	f800283a 	ret
 2004064:	0109c83a 	sub	r4,zero,r4
 2004068:	04000044 	movi	r16,1
 200406c:	000d883a 	mov	r6,zero
 2004070:	283ff20e 	bge	r5,zero,200403c <__divsi3+0x1c>
 2004074:	014bc83a 	sub	r5,zero,r5
 2004078:	8021003a 	cmpeq	r16,r16,zero
 200407c:	003fef06 	br	200403c <__divsi3+0x1c>

02004080 <__modsi3>:
 2004080:	deffff04 	addi	sp,sp,-4
 2004084:	dfc00015 	stw	ra,0(sp)
 2004088:	01800044 	movi	r6,1
 200408c:	2807883a 	mov	r3,r5
 2004090:	20000416 	blt	r4,zero,20040a4 <__modsi3+0x24>
 2004094:	28000c16 	blt	r5,zero,20040c8 <__modsi3+0x48>
 2004098:	dfc00017 	ldw	ra,0(sp)
 200409c:	dec00104 	addi	sp,sp,4
 20040a0:	2003fa41 	jmpi	2003fa4 <udivmodsi4>
 20040a4:	0109c83a 	sub	r4,zero,r4
 20040a8:	28000b16 	blt	r5,zero,20040d8 <__modsi3+0x58>
 20040ac:	180b883a 	mov	r5,r3
 20040b0:	01800044 	movi	r6,1
 20040b4:	2003fa40 	call	2003fa4 <udivmodsi4>
 20040b8:	0085c83a 	sub	r2,zero,r2
 20040bc:	dfc00017 	ldw	ra,0(sp)
 20040c0:	dec00104 	addi	sp,sp,4
 20040c4:	f800283a 	ret
 20040c8:	014bc83a 	sub	r5,zero,r5
 20040cc:	dfc00017 	ldw	ra,0(sp)
 20040d0:	dec00104 	addi	sp,sp,4
 20040d4:	2003fa41 	jmpi	2003fa4 <udivmodsi4>
 20040d8:	0147c83a 	sub	r3,zero,r5
 20040dc:	003ff306 	br	20040ac <__modsi3+0x2c>

020040e0 <__udivsi3>:
 20040e0:	000d883a 	mov	r6,zero
 20040e4:	2003fa41 	jmpi	2003fa4 <udivmodsi4>

020040e8 <__umodsi3>:
 20040e8:	01800044 	movi	r6,1
 20040ec:	2003fa41 	jmpi	2003fa4 <udivmodsi4>

020040f0 <__mulsi3>:
 20040f0:	20000a26 	beq	r4,zero,200411c <__mulsi3+0x2c>
 20040f4:	0007883a 	mov	r3,zero
 20040f8:	2080004c 	andi	r2,r4,1
 20040fc:	1005003a 	cmpeq	r2,r2,zero
 2004100:	2008d07a 	srli	r4,r4,1
 2004104:	1000011e 	bne	r2,zero,200410c <__mulsi3+0x1c>
 2004108:	1947883a 	add	r3,r3,r5
 200410c:	294b883a 	add	r5,r5,r5
 2004110:	203ff91e 	bne	r4,zero,20040f8 <__mulsi3+0x8>
 2004114:	1805883a 	mov	r2,r3
 2004118:	f800283a 	ret
 200411c:	0007883a 	mov	r3,zero
 2004120:	1805883a 	mov	r2,r3
 2004124:	f800283a 	ret

02004128 <__clzsi2>:
 2004128:	00bfffd4 	movui	r2,65535
 200412c:	11000e36 	bltu	r2,r4,2004168 <__clzsi2+0x40>
 2004130:	00803fc4 	movi	r2,255
 2004134:	01400204 	movi	r5,8
 2004138:	0007883a 	mov	r3,zero
 200413c:	11001036 	bltu	r2,r4,2004180 <__clzsi2+0x58>
 2004140:	000b883a 	mov	r5,zero
 2004144:	20c6d83a 	srl	r3,r4,r3
 2004148:	00808074 	movhi	r2,513
 200414c:	1084db04 	addi	r2,r2,4972
 2004150:	1887883a 	add	r3,r3,r2
 2004154:	18800003 	ldbu	r2,0(r3)
 2004158:	00c00804 	movi	r3,32
 200415c:	2885883a 	add	r2,r5,r2
 2004160:	1885c83a 	sub	r2,r3,r2
 2004164:	f800283a 	ret
 2004168:	01400404 	movi	r5,16
 200416c:	00804034 	movhi	r2,256
 2004170:	10bfffc4 	addi	r2,r2,-1
 2004174:	2807883a 	mov	r3,r5
 2004178:	113ff22e 	bgeu	r2,r4,2004144 <__clzsi2+0x1c>
 200417c:	01400604 	movi	r5,24
 2004180:	2807883a 	mov	r3,r5
 2004184:	20c6d83a 	srl	r3,r4,r3
 2004188:	00808074 	movhi	r2,513
 200418c:	1084db04 	addi	r2,r2,4972
 2004190:	1887883a 	add	r3,r3,r2
 2004194:	18800003 	ldbu	r2,0(r3)
 2004198:	00c00804 	movi	r3,32
 200419c:	2885883a 	add	r2,r5,r2
 20041a0:	1885c83a 	sub	r2,r3,r2
 20041a4:	f800283a 	ret

020041a8 <__pack_d>:
 20041a8:	20c00017 	ldw	r3,0(r4)
 20041ac:	defffd04 	addi	sp,sp,-12
 20041b0:	dc000015 	stw	r16,0(sp)
 20041b4:	dc800215 	stw	r18,8(sp)
 20041b8:	dc400115 	stw	r17,4(sp)
 20041bc:	00800044 	movi	r2,1
 20041c0:	22000317 	ldw	r8,12(r4)
 20041c4:	001f883a 	mov	r15,zero
 20041c8:	22400417 	ldw	r9,16(r4)
 20041cc:	24000117 	ldw	r16,4(r4)
 20041d0:	10c0552e 	bgeu	r2,r3,2004328 <__pack_d+0x180>
 20041d4:	00800104 	movi	r2,4
 20041d8:	18804f26 	beq	r3,r2,2004318 <__pack_d+0x170>
 20041dc:	00800084 	movi	r2,2
 20041e0:	18800226 	beq	r3,r2,20041ec <__pack_d+0x44>
 20041e4:	4244b03a 	or	r2,r8,r9
 20041e8:	10001a1e 	bne	r2,zero,2004254 <__pack_d+0xac>
 20041ec:	000d883a 	mov	r6,zero
 20041f0:	000f883a 	mov	r7,zero
 20041f4:	0011883a 	mov	r8,zero
 20041f8:	00800434 	movhi	r2,16
 20041fc:	10bfffc4 	addi	r2,r2,-1
 2004200:	301d883a 	mov	r14,r6
 2004204:	3884703a 	and	r2,r7,r2
 2004208:	400a953a 	slli	r5,r8,20
 200420c:	79bffc2c 	andhi	r6,r15,65520
 2004210:	308cb03a 	or	r6,r6,r2
 2004214:	00e00434 	movhi	r3,32784
 2004218:	18ffffc4 	addi	r3,r3,-1
 200421c:	800497fa 	slli	r2,r16,31
 2004220:	30c6703a 	and	r3,r6,r3
 2004224:	1946b03a 	or	r3,r3,r5
 2004228:	01600034 	movhi	r5,32768
 200422c:	297fffc4 	addi	r5,r5,-1
 2004230:	194a703a 	and	r5,r3,r5
 2004234:	288ab03a 	or	r5,r5,r2
 2004238:	2807883a 	mov	r3,r5
 200423c:	7005883a 	mov	r2,r14
 2004240:	dc800217 	ldw	r18,8(sp)
 2004244:	dc400117 	ldw	r17,4(sp)
 2004248:	dc000017 	ldw	r16,0(sp)
 200424c:	dec00304 	addi	sp,sp,12
 2004250:	f800283a 	ret
 2004254:	21000217 	ldw	r4,8(r4)
 2004258:	00bf0084 	movi	r2,-1022
 200425c:	20803f16 	blt	r4,r2,200435c <__pack_d+0x1b4>
 2004260:	0080ffc4 	movi	r2,1023
 2004264:	11002c16 	blt	r2,r4,2004318 <__pack_d+0x170>
 2004268:	00803fc4 	movi	r2,255
 200426c:	408c703a 	and	r6,r8,r2
 2004270:	00802004 	movi	r2,128
 2004274:	0007883a 	mov	r3,zero
 2004278:	000f883a 	mov	r7,zero
 200427c:	2280ffc4 	addi	r10,r4,1023
 2004280:	30801e26 	beq	r6,r2,20042fc <__pack_d+0x154>
 2004284:	00801fc4 	movi	r2,127
 2004288:	4089883a 	add	r4,r8,r2
 200428c:	220d803a 	cmpltu	r6,r4,r8
 2004290:	324d883a 	add	r6,r6,r9
 2004294:	2011883a 	mov	r8,r4
 2004298:	3013883a 	mov	r9,r6
 200429c:	00880034 	movhi	r2,8192
 20042a0:	10bfffc4 	addi	r2,r2,-1
 20042a4:	12400d36 	bltu	r2,r9,20042dc <__pack_d+0x134>
 20042a8:	4804963a 	slli	r2,r9,24
 20042ac:	400cd23a 	srli	r6,r8,8
 20042b0:	480ed23a 	srli	r7,r9,8
 20042b4:	013fffc4 	movi	r4,-1
 20042b8:	118cb03a 	or	r6,r2,r6
 20042bc:	01400434 	movhi	r5,16
 20042c0:	297fffc4 	addi	r5,r5,-1
 20042c4:	3104703a 	and	r2,r6,r4
 20042c8:	3946703a 	and	r3,r7,r5
 20042cc:	5201ffcc 	andi	r8,r10,2047
 20042d0:	100d883a 	mov	r6,r2
 20042d4:	180f883a 	mov	r7,r3
 20042d8:	003fc706 	br	20041f8 <__pack_d+0x50>
 20042dc:	480897fa 	slli	r4,r9,31
 20042e0:	4004d07a 	srli	r2,r8,1
 20042e4:	4806d07a 	srli	r3,r9,1
 20042e8:	52800044 	addi	r10,r10,1
 20042ec:	2084b03a 	or	r2,r4,r2
 20042f0:	1011883a 	mov	r8,r2
 20042f4:	1813883a 	mov	r9,r3
 20042f8:	003feb06 	br	20042a8 <__pack_d+0x100>
 20042fc:	383fe11e 	bne	r7,zero,2004284 <__pack_d+0xdc>
 2004300:	01004004 	movi	r4,256
 2004304:	4104703a 	and	r2,r8,r4
 2004308:	10c4b03a 	or	r2,r2,r3
 200430c:	103fe326 	beq	r2,zero,200429c <__pack_d+0xf4>
 2004310:	3005883a 	mov	r2,r6
 2004314:	003fdc06 	br	2004288 <__pack_d+0xe0>
 2004318:	000d883a 	mov	r6,zero
 200431c:	000f883a 	mov	r7,zero
 2004320:	0201ffc4 	movi	r8,2047
 2004324:	003fb406 	br	20041f8 <__pack_d+0x50>
 2004328:	0005883a 	mov	r2,zero
 200432c:	00c00234 	movhi	r3,8
 2004330:	408cb03a 	or	r6,r8,r2
 2004334:	48ceb03a 	or	r7,r9,r3
 2004338:	013fffc4 	movi	r4,-1
 200433c:	01400434 	movhi	r5,16
 2004340:	297fffc4 	addi	r5,r5,-1
 2004344:	3104703a 	and	r2,r6,r4
 2004348:	3946703a 	and	r3,r7,r5
 200434c:	100d883a 	mov	r6,r2
 2004350:	180f883a 	mov	r7,r3
 2004354:	0201ffc4 	movi	r8,2047
 2004358:	003fa706 	br	20041f8 <__pack_d+0x50>
 200435c:	1109c83a 	sub	r4,r2,r4
 2004360:	00800e04 	movi	r2,56
 2004364:	11004316 	blt	r2,r4,2004474 <__pack_d+0x2cc>
 2004368:	21fff804 	addi	r7,r4,-32
 200436c:	38004516 	blt	r7,zero,2004484 <__pack_d+0x2dc>
 2004370:	49d8d83a 	srl	r12,r9,r7
 2004374:	001b883a 	mov	r13,zero
 2004378:	0023883a 	mov	r17,zero
 200437c:	01400044 	movi	r5,1
 2004380:	0025883a 	mov	r18,zero
 2004384:	38004716 	blt	r7,zero,20044a4 <__pack_d+0x2fc>
 2004388:	29d6983a 	sll	r11,r5,r7
 200438c:	0015883a 	mov	r10,zero
 2004390:	00bfffc4 	movi	r2,-1
 2004394:	5089883a 	add	r4,r10,r2
 2004398:	588b883a 	add	r5,r11,r2
 200439c:	228d803a 	cmpltu	r6,r4,r10
 20043a0:	314b883a 	add	r5,r6,r5
 20043a4:	4104703a 	and	r2,r8,r4
 20043a8:	4946703a 	and	r3,r9,r5
 20043ac:	10c4b03a 	or	r2,r2,r3
 20043b0:	10000226 	beq	r2,zero,20043bc <__pack_d+0x214>
 20043b4:	04400044 	movi	r17,1
 20043b8:	0025883a 	mov	r18,zero
 20043bc:	00803fc4 	movi	r2,255
 20043c0:	644eb03a 	or	r7,r12,r17
 20043c4:	3892703a 	and	r9,r7,r2
 20043c8:	00802004 	movi	r2,128
 20043cc:	6c90b03a 	or	r8,r13,r18
 20043d0:	0015883a 	mov	r10,zero
 20043d4:	48801626 	beq	r9,r2,2004430 <__pack_d+0x288>
 20043d8:	01001fc4 	movi	r4,127
 20043dc:	3905883a 	add	r2,r7,r4
 20043e0:	11cd803a 	cmpltu	r6,r2,r7
 20043e4:	320d883a 	add	r6,r6,r8
 20043e8:	100f883a 	mov	r7,r2
 20043ec:	00840034 	movhi	r2,4096
 20043f0:	10bfffc4 	addi	r2,r2,-1
 20043f4:	3011883a 	mov	r8,r6
 20043f8:	0007883a 	mov	r3,zero
 20043fc:	11801b36 	bltu	r2,r6,200446c <__pack_d+0x2c4>
 2004400:	4004963a 	slli	r2,r8,24
 2004404:	3808d23a 	srli	r4,r7,8
 2004408:	400ad23a 	srli	r5,r8,8
 200440c:	1813883a 	mov	r9,r3
 2004410:	1108b03a 	or	r4,r2,r4
 2004414:	00bfffc4 	movi	r2,-1
 2004418:	00c00434 	movhi	r3,16
 200441c:	18ffffc4 	addi	r3,r3,-1
 2004420:	208c703a 	and	r6,r4,r2
 2004424:	28ce703a 	and	r7,r5,r3
 2004428:	4a01ffcc 	andi	r8,r9,2047
 200442c:	003f7206 	br	20041f8 <__pack_d+0x50>
 2004430:	503fe91e 	bne	r10,zero,20043d8 <__pack_d+0x230>
 2004434:	01004004 	movi	r4,256
 2004438:	3904703a 	and	r2,r7,r4
 200443c:	0007883a 	mov	r3,zero
 2004440:	10c4b03a 	or	r2,r2,r3
 2004444:	10000626 	beq	r2,zero,2004460 <__pack_d+0x2b8>
 2004448:	3a45883a 	add	r2,r7,r9
 200444c:	11cd803a 	cmpltu	r6,r2,r7
 2004450:	320d883a 	add	r6,r6,r8
 2004454:	100f883a 	mov	r7,r2
 2004458:	3011883a 	mov	r8,r6
 200445c:	0007883a 	mov	r3,zero
 2004460:	00840034 	movhi	r2,4096
 2004464:	10bfffc4 	addi	r2,r2,-1
 2004468:	123fe52e 	bgeu	r2,r8,2004400 <__pack_d+0x258>
 200446c:	00c00044 	movi	r3,1
 2004470:	003fe306 	br	2004400 <__pack_d+0x258>
 2004474:	0009883a 	mov	r4,zero
 2004478:	0013883a 	mov	r9,zero
 200447c:	000b883a 	mov	r5,zero
 2004480:	003fe406 	br	2004414 <__pack_d+0x26c>
 2004484:	4a47883a 	add	r3,r9,r9
 2004488:	008007c4 	movi	r2,31
 200448c:	1105c83a 	sub	r2,r2,r4
 2004490:	1886983a 	sll	r3,r3,r2
 2004494:	4118d83a 	srl	r12,r8,r4
 2004498:	491ad83a 	srl	r13,r9,r4
 200449c:	1b18b03a 	or	r12,r3,r12
 20044a0:	003fb506 	br	2004378 <__pack_d+0x1d0>
 20044a4:	2806d07a 	srli	r3,r5,1
 20044a8:	008007c4 	movi	r2,31
 20044ac:	1105c83a 	sub	r2,r2,r4
 20044b0:	1896d83a 	srl	r11,r3,r2
 20044b4:	2914983a 	sll	r10,r5,r4
 20044b8:	003fb506 	br	2004390 <__pack_d+0x1e8>

020044bc <__unpack_d>:
 20044bc:	20c00117 	ldw	r3,4(r4)
 20044c0:	22400017 	ldw	r9,0(r4)
 20044c4:	00800434 	movhi	r2,16
 20044c8:	10bfffc4 	addi	r2,r2,-1
 20044cc:	1808d53a 	srli	r4,r3,20
 20044d0:	180cd7fa 	srli	r6,r3,31
 20044d4:	1894703a 	and	r10,r3,r2
 20044d8:	2201ffcc 	andi	r8,r4,2047
 20044dc:	281b883a 	mov	r13,r5
 20044e0:	4817883a 	mov	r11,r9
 20044e4:	29800115 	stw	r6,4(r5)
 20044e8:	5019883a 	mov	r12,r10
 20044ec:	40001e1e 	bne	r8,zero,2004568 <__unpack_d+0xac>
 20044f0:	4a84b03a 	or	r2,r9,r10
 20044f4:	10001926 	beq	r2,zero,200455c <__unpack_d+0xa0>
 20044f8:	4804d63a 	srli	r2,r9,24
 20044fc:	500c923a 	slli	r6,r10,8
 2004500:	013f0084 	movi	r4,-1022
 2004504:	00c40034 	movhi	r3,4096
 2004508:	18ffffc4 	addi	r3,r3,-1
 200450c:	118cb03a 	or	r6,r2,r6
 2004510:	008000c4 	movi	r2,3
 2004514:	480a923a 	slli	r5,r9,8
 2004518:	68800015 	stw	r2,0(r13)
 200451c:	69000215 	stw	r4,8(r13)
 2004520:	19800b36 	bltu	r3,r6,2004550 <__unpack_d+0x94>
 2004524:	200f883a 	mov	r7,r4
 2004528:	1811883a 	mov	r8,r3
 200452c:	2945883a 	add	r2,r5,r5
 2004530:	1149803a 	cmpltu	r4,r2,r5
 2004534:	3187883a 	add	r3,r6,r6
 2004538:	20c9883a 	add	r4,r4,r3
 200453c:	100b883a 	mov	r5,r2
 2004540:	200d883a 	mov	r6,r4
 2004544:	39ffffc4 	addi	r7,r7,-1
 2004548:	413ff82e 	bgeu	r8,r4,200452c <__unpack_d+0x70>
 200454c:	69c00215 	stw	r7,8(r13)
 2004550:	69800415 	stw	r6,16(r13)
 2004554:	69400315 	stw	r5,12(r13)
 2004558:	f800283a 	ret
 200455c:	00800084 	movi	r2,2
 2004560:	28800015 	stw	r2,0(r5)
 2004564:	f800283a 	ret
 2004568:	0081ffc4 	movi	r2,2047
 200456c:	40800f26 	beq	r8,r2,20045ac <__unpack_d+0xf0>
 2004570:	480cd63a 	srli	r6,r9,24
 2004574:	5006923a 	slli	r3,r10,8
 2004578:	4804923a 	slli	r2,r9,8
 200457c:	0009883a 	mov	r4,zero
 2004580:	30c6b03a 	or	r3,r6,r3
 2004584:	01440034 	movhi	r5,4096
 2004588:	110cb03a 	or	r6,r2,r4
 200458c:	423f0044 	addi	r8,r8,-1023
 2004590:	194eb03a 	or	r7,r3,r5
 2004594:	008000c4 	movi	r2,3
 2004598:	69c00415 	stw	r7,16(r13)
 200459c:	6a000215 	stw	r8,8(r13)
 20045a0:	68800015 	stw	r2,0(r13)
 20045a4:	69800315 	stw	r6,12(r13)
 20045a8:	f800283a 	ret
 20045ac:	4a84b03a 	or	r2,r9,r10
 20045b0:	1000031e 	bne	r2,zero,20045c0 <__unpack_d+0x104>
 20045b4:	00800104 	movi	r2,4
 20045b8:	28800015 	stw	r2,0(r5)
 20045bc:	f800283a 	ret
 20045c0:	0009883a 	mov	r4,zero
 20045c4:	01400234 	movhi	r5,8
 20045c8:	4904703a 	and	r2,r9,r4
 20045cc:	5146703a 	and	r3,r10,r5
 20045d0:	10c4b03a 	or	r2,r2,r3
 20045d4:	10000526 	beq	r2,zero,20045ec <__unpack_d+0x130>
 20045d8:	00800044 	movi	r2,1
 20045dc:	68800015 	stw	r2,0(r13)
 20045e0:	6b000415 	stw	r12,16(r13)
 20045e4:	6ac00315 	stw	r11,12(r13)
 20045e8:	f800283a 	ret
 20045ec:	68000015 	stw	zero,0(r13)
 20045f0:	003ffb06 	br	20045e0 <__unpack_d+0x124>

020045f4 <__fpcmp_parts_d>:
 20045f4:	21800017 	ldw	r6,0(r4)
 20045f8:	00c00044 	movi	r3,1
 20045fc:	19800a2e 	bgeu	r3,r6,2004628 <__fpcmp_parts_d+0x34>
 2004600:	28800017 	ldw	r2,0(r5)
 2004604:	1880082e 	bgeu	r3,r2,2004628 <__fpcmp_parts_d+0x34>
 2004608:	00c00104 	movi	r3,4
 200460c:	30c02626 	beq	r6,r3,20046a8 <__fpcmp_parts_d+0xb4>
 2004610:	10c02226 	beq	r2,r3,200469c <__fpcmp_parts_d+0xa8>
 2004614:	00c00084 	movi	r3,2
 2004618:	30c00526 	beq	r6,r3,2004630 <__fpcmp_parts_d+0x3c>
 200461c:	10c0071e 	bne	r2,r3,200463c <__fpcmp_parts_d+0x48>
 2004620:	20800117 	ldw	r2,4(r4)
 2004624:	1000091e 	bne	r2,zero,200464c <__fpcmp_parts_d+0x58>
 2004628:	00800044 	movi	r2,1
 200462c:	f800283a 	ret
 2004630:	10c01a1e 	bne	r2,r3,200469c <__fpcmp_parts_d+0xa8>
 2004634:	0005883a 	mov	r2,zero
 2004638:	f800283a 	ret
 200463c:	22000117 	ldw	r8,4(r4)
 2004640:	28800117 	ldw	r2,4(r5)
 2004644:	40800326 	beq	r8,r2,2004654 <__fpcmp_parts_d+0x60>
 2004648:	403ff726 	beq	r8,zero,2004628 <__fpcmp_parts_d+0x34>
 200464c:	00bfffc4 	movi	r2,-1
 2004650:	f800283a 	ret
 2004654:	20c00217 	ldw	r3,8(r4)
 2004658:	28800217 	ldw	r2,8(r5)
 200465c:	10fffa16 	blt	r2,r3,2004648 <__fpcmp_parts_d+0x54>
 2004660:	18800916 	blt	r3,r2,2004688 <__fpcmp_parts_d+0x94>
 2004664:	21c00417 	ldw	r7,16(r4)
 2004668:	28c00417 	ldw	r3,16(r5)
 200466c:	21800317 	ldw	r6,12(r4)
 2004670:	28800317 	ldw	r2,12(r5)
 2004674:	19fff436 	bltu	r3,r7,2004648 <__fpcmp_parts_d+0x54>
 2004678:	38c00526 	beq	r7,r3,2004690 <__fpcmp_parts_d+0x9c>
 200467c:	38c00236 	bltu	r7,r3,2004688 <__fpcmp_parts_d+0x94>
 2004680:	19ffec1e 	bne	r3,r7,2004634 <__fpcmp_parts_d+0x40>
 2004684:	30bfeb2e 	bgeu	r6,r2,2004634 <__fpcmp_parts_d+0x40>
 2004688:	403fe71e 	bne	r8,zero,2004628 <__fpcmp_parts_d+0x34>
 200468c:	003fef06 	br	200464c <__fpcmp_parts_d+0x58>
 2004690:	11bffa2e 	bgeu	r2,r6,200467c <__fpcmp_parts_d+0x88>
 2004694:	403fe426 	beq	r8,zero,2004628 <__fpcmp_parts_d+0x34>
 2004698:	003fec06 	br	200464c <__fpcmp_parts_d+0x58>
 200469c:	28800117 	ldw	r2,4(r5)
 20046a0:	103fe11e 	bne	r2,zero,2004628 <__fpcmp_parts_d+0x34>
 20046a4:	003fe906 	br	200464c <__fpcmp_parts_d+0x58>
 20046a8:	11bfdd1e 	bne	r2,r6,2004620 <__fpcmp_parts_d+0x2c>
 20046ac:	28c00117 	ldw	r3,4(r5)
 20046b0:	20800117 	ldw	r2,4(r4)
 20046b4:	1885c83a 	sub	r2,r3,r2
 20046b8:	f800283a 	ret

020046bc <memset>:
 20046bc:	008000c4 	movi	r2,3
 20046c0:	29403fcc 	andi	r5,r5,255
 20046c4:	2007883a 	mov	r3,r4
 20046c8:	1180022e 	bgeu	r2,r6,20046d4 <memset+0x18>
 20046cc:	2084703a 	and	r2,r4,r2
 20046d0:	10000826 	beq	r2,zero,20046f4 <memset+0x38>
 20046d4:	30000526 	beq	r6,zero,20046ec <memset+0x30>
 20046d8:	2805883a 	mov	r2,r5
 20046dc:	30cd883a 	add	r6,r6,r3
 20046e0:	18800005 	stb	r2,0(r3)
 20046e4:	18c00044 	addi	r3,r3,1
 20046e8:	19bffd1e 	bne	r3,r6,20046e0 <memset+0x24>
 20046ec:	2005883a 	mov	r2,r4
 20046f0:	f800283a 	ret
 20046f4:	2804923a 	slli	r2,r5,8
 20046f8:	020003c4 	movi	r8,15
 20046fc:	200f883a 	mov	r7,r4
 2004700:	2884b03a 	or	r2,r5,r2
 2004704:	1006943a 	slli	r3,r2,16
 2004708:	10c6b03a 	or	r3,r2,r3
 200470c:	41800a2e 	bgeu	r8,r6,2004738 <memset+0x7c>
 2004710:	4005883a 	mov	r2,r8
 2004714:	31bffc04 	addi	r6,r6,-16
 2004718:	38c00015 	stw	r3,0(r7)
 200471c:	38c00115 	stw	r3,4(r7)
 2004720:	38c00215 	stw	r3,8(r7)
 2004724:	38c00315 	stw	r3,12(r7)
 2004728:	39c00404 	addi	r7,r7,16
 200472c:	11bff936 	bltu	r2,r6,2004714 <memset+0x58>
 2004730:	008000c4 	movi	r2,3
 2004734:	1180052e 	bgeu	r2,r6,200474c <memset+0x90>
 2004738:	31bfff04 	addi	r6,r6,-4
 200473c:	008000c4 	movi	r2,3
 2004740:	38c00015 	stw	r3,0(r7)
 2004744:	39c00104 	addi	r7,r7,4
 2004748:	11bffb36 	bltu	r2,r6,2004738 <memset+0x7c>
 200474c:	3807883a 	mov	r3,r7
 2004750:	003fe006 	br	20046d4 <memset+0x18>

02004754 <printf>:
 2004754:	defffb04 	addi	sp,sp,-20
 2004758:	dfc00115 	stw	ra,4(sp)
 200475c:	d9400215 	stw	r5,8(sp)
 2004760:	d9800315 	stw	r6,12(sp)
 2004764:	d9c00415 	stw	r7,16(sp)
 2004768:	00808074 	movhi	r2,513
 200476c:	108d6704 	addi	r2,r2,13724
 2004770:	10c00017 	ldw	r3,0(r2)
 2004774:	200b883a 	mov	r5,r4
 2004778:	d8800204 	addi	r2,sp,8
 200477c:	19000217 	ldw	r4,8(r3)
 2004780:	100d883a 	mov	r6,r2
 2004784:	d8800015 	stw	r2,0(sp)
 2004788:	20069580 	call	2006958 <__vfprintf_internal>
 200478c:	dfc00117 	ldw	ra,4(sp)
 2004790:	dec00504 	addi	sp,sp,20
 2004794:	f800283a 	ret

02004798 <_printf_r>:
 2004798:	defffc04 	addi	sp,sp,-16
 200479c:	dfc00115 	stw	ra,4(sp)
 20047a0:	d9800215 	stw	r6,8(sp)
 20047a4:	d9c00315 	stw	r7,12(sp)
 20047a8:	280d883a 	mov	r6,r5
 20047ac:	21400217 	ldw	r5,8(r4)
 20047b0:	d8c00204 	addi	r3,sp,8
 20047b4:	180f883a 	mov	r7,r3
 20047b8:	d8c00015 	stw	r3,0(sp)
 20047bc:	2004a940 	call	2004a94 <___vfprintf_internal_r>
 20047c0:	dfc00117 	ldw	ra,4(sp)
 20047c4:	dec00404 	addi	sp,sp,16
 20047c8:	f800283a 	ret

020047cc <_puts_r>:
 20047cc:	defff604 	addi	sp,sp,-40
 20047d0:	dc400715 	stw	r17,28(sp)
 20047d4:	2023883a 	mov	r17,r4
 20047d8:	2809883a 	mov	r4,r5
 20047dc:	dfc00915 	stw	ra,36(sp)
 20047e0:	dcc00815 	stw	r19,32(sp)
 20047e4:	2827883a 	mov	r19,r5
 20047e8:	20049c80 	call	20049c8 <strlen>
 20047ec:	89400217 	ldw	r5,8(r17)
 20047f0:	00c08074 	movhi	r3,513
 20047f4:	18c4ba04 	addi	r3,r3,4840
 20047f8:	01c00044 	movi	r7,1
 20047fc:	12000044 	addi	r8,r2,1
 2004800:	d8c00515 	stw	r3,20(sp)
 2004804:	d9c00615 	stw	r7,24(sp)
 2004808:	d8c00304 	addi	r3,sp,12
 200480c:	01c00084 	movi	r7,2
 2004810:	8809883a 	mov	r4,r17
 2004814:	d80d883a 	mov	r6,sp
 2004818:	d8c00015 	stw	r3,0(sp)
 200481c:	dcc00315 	stw	r19,12(sp)
 2004820:	da000215 	stw	r8,8(sp)
 2004824:	d9c00115 	stw	r7,4(sp)
 2004828:	d8800415 	stw	r2,16(sp)
 200482c:	2008c140 	call	2008c14 <__sfvwrite_r>
 2004830:	00ffffc4 	movi	r3,-1
 2004834:	10000626 	beq	r2,zero,2004850 <_puts_r+0x84>
 2004838:	1805883a 	mov	r2,r3
 200483c:	dfc00917 	ldw	ra,36(sp)
 2004840:	dcc00817 	ldw	r19,32(sp)
 2004844:	dc400717 	ldw	r17,28(sp)
 2004848:	dec00a04 	addi	sp,sp,40
 200484c:	f800283a 	ret
 2004850:	00c00284 	movi	r3,10
 2004854:	1805883a 	mov	r2,r3
 2004858:	dfc00917 	ldw	ra,36(sp)
 200485c:	dcc00817 	ldw	r19,32(sp)
 2004860:	dc400717 	ldw	r17,28(sp)
 2004864:	dec00a04 	addi	sp,sp,40
 2004868:	f800283a 	ret

0200486c <puts>:
 200486c:	00808074 	movhi	r2,513
 2004870:	108d6704 	addi	r2,r2,13724
 2004874:	200b883a 	mov	r5,r4
 2004878:	11000017 	ldw	r4,0(r2)
 200487c:	20047cc1 	jmpi	20047cc <_puts_r>

02004880 <strcmp>:
 2004880:	2144b03a 	or	r2,r4,r5
 2004884:	108000cc 	andi	r2,r2,3
 2004888:	10001d1e 	bne	r2,zero,2004900 <strcmp+0x80>
 200488c:	200f883a 	mov	r7,r4
 2004890:	28800017 	ldw	r2,0(r5)
 2004894:	21000017 	ldw	r4,0(r4)
 2004898:	280d883a 	mov	r6,r5
 200489c:	2080161e 	bne	r4,r2,20048f8 <strcmp+0x78>
 20048a0:	023fbff4 	movhi	r8,65279
 20048a4:	423fbfc4 	addi	r8,r8,-257
 20048a8:	2207883a 	add	r3,r4,r8
 20048ac:	01602074 	movhi	r5,32897
 20048b0:	29602004 	addi	r5,r5,-32640
 20048b4:	1946703a 	and	r3,r3,r5
 20048b8:	0104303a 	nor	r2,zero,r4
 20048bc:	10c4703a 	and	r2,r2,r3
 20048c0:	10001c1e 	bne	r2,zero,2004934 <strcmp+0xb4>
 20048c4:	4013883a 	mov	r9,r8
 20048c8:	2811883a 	mov	r8,r5
 20048cc:	00000106 	br	20048d4 <strcmp+0x54>
 20048d0:	1800181e 	bne	r3,zero,2004934 <strcmp+0xb4>
 20048d4:	39c00104 	addi	r7,r7,4
 20048d8:	39000017 	ldw	r4,0(r7)
 20048dc:	31800104 	addi	r6,r6,4
 20048e0:	31400017 	ldw	r5,0(r6)
 20048e4:	2245883a 	add	r2,r4,r9
 20048e8:	1204703a 	and	r2,r2,r8
 20048ec:	0106303a 	nor	r3,zero,r4
 20048f0:	1886703a 	and	r3,r3,r2
 20048f4:	217ff626 	beq	r4,r5,20048d0 <strcmp+0x50>
 20048f8:	3809883a 	mov	r4,r7
 20048fc:	300b883a 	mov	r5,r6
 2004900:	20c00007 	ldb	r3,0(r4)
 2004904:	1800051e 	bne	r3,zero,200491c <strcmp+0x9c>
 2004908:	00000606 	br	2004924 <strcmp+0xa4>
 200490c:	21000044 	addi	r4,r4,1
 2004910:	20c00007 	ldb	r3,0(r4)
 2004914:	29400044 	addi	r5,r5,1
 2004918:	18000226 	beq	r3,zero,2004924 <strcmp+0xa4>
 200491c:	28800007 	ldb	r2,0(r5)
 2004920:	18bffa26 	beq	r3,r2,200490c <strcmp+0x8c>
 2004924:	20c00003 	ldbu	r3,0(r4)
 2004928:	28800003 	ldbu	r2,0(r5)
 200492c:	1885c83a 	sub	r2,r3,r2
 2004930:	f800283a 	ret
 2004934:	0005883a 	mov	r2,zero
 2004938:	f800283a 	ret

0200493c <strcpy>:
 200493c:	2904b03a 	or	r2,r5,r4
 2004940:	108000cc 	andi	r2,r2,3
 2004944:	10000826 	beq	r2,zero,2004968 <strcpy+0x2c>
 2004948:	2007883a 	mov	r3,r4
 200494c:	28800003 	ldbu	r2,0(r5)
 2004950:	29400044 	addi	r5,r5,1
 2004954:	18800005 	stb	r2,0(r3)
 2004958:	18c00044 	addi	r3,r3,1
 200495c:	103ffb1e 	bne	r2,zero,200494c <strcpy+0x10>
 2004960:	2005883a 	mov	r2,r4
 2004964:	f800283a 	ret
 2004968:	29800017 	ldw	r6,0(r5)
 200496c:	023fbff4 	movhi	r8,65279
 2004970:	423fbfc4 	addi	r8,r8,-257
 2004974:	02a02074 	movhi	r10,32897
 2004978:	52a02004 	addi	r10,r10,-32640
 200497c:	3205883a 	add	r2,r6,r8
 2004980:	0186303a 	nor	r3,zero,r6
 2004984:	10c4703a 	and	r2,r2,r3
 2004988:	1284703a 	and	r2,r2,r10
 200498c:	200f883a 	mov	r7,r4
 2004990:	10000b1e 	bne	r2,zero,20049c0 <strcpy+0x84>
 2004994:	4013883a 	mov	r9,r8
 2004998:	5011883a 	mov	r8,r10
 200499c:	39800015 	stw	r6,0(r7)
 20049a0:	29400104 	addi	r5,r5,4
 20049a4:	29800017 	ldw	r6,0(r5)
 20049a8:	39c00104 	addi	r7,r7,4
 20049ac:	3245883a 	add	r2,r6,r9
 20049b0:	0186303a 	nor	r3,zero,r6
 20049b4:	10c4703a 	and	r2,r2,r3
 20049b8:	1204703a 	and	r2,r2,r8
 20049bc:	103ff726 	beq	r2,zero,200499c <strcpy+0x60>
 20049c0:	3807883a 	mov	r3,r7
 20049c4:	003fe106 	br	200494c <strcpy+0x10>

020049c8 <strlen>:
 20049c8:	208000cc 	andi	r2,r4,3
 20049cc:	2011883a 	mov	r8,r4
 20049d0:	1000161e 	bne	r2,zero,2004a2c <strlen+0x64>
 20049d4:	20c00017 	ldw	r3,0(r4)
 20049d8:	017fbff4 	movhi	r5,65279
 20049dc:	297fbfc4 	addi	r5,r5,-257
 20049e0:	01e02074 	movhi	r7,32897
 20049e4:	39e02004 	addi	r7,r7,-32640
 20049e8:	1945883a 	add	r2,r3,r5
 20049ec:	11c4703a 	and	r2,r2,r7
 20049f0:	00c6303a 	nor	r3,zero,r3
 20049f4:	1886703a 	and	r3,r3,r2
 20049f8:	18000c1e 	bne	r3,zero,2004a2c <strlen+0x64>
 20049fc:	280d883a 	mov	r6,r5
 2004a00:	380b883a 	mov	r5,r7
 2004a04:	21000104 	addi	r4,r4,4
 2004a08:	20800017 	ldw	r2,0(r4)
 2004a0c:	1187883a 	add	r3,r2,r6
 2004a10:	1946703a 	and	r3,r3,r5
 2004a14:	0084303a 	nor	r2,zero,r2
 2004a18:	10c4703a 	and	r2,r2,r3
 2004a1c:	103ff926 	beq	r2,zero,2004a04 <strlen+0x3c>
 2004a20:	20800007 	ldb	r2,0(r4)
 2004a24:	10000326 	beq	r2,zero,2004a34 <strlen+0x6c>
 2004a28:	21000044 	addi	r4,r4,1
 2004a2c:	20800007 	ldb	r2,0(r4)
 2004a30:	103ffd1e 	bne	r2,zero,2004a28 <strlen+0x60>
 2004a34:	2205c83a 	sub	r2,r4,r8
 2004a38:	f800283a 	ret

02004a3c <__sprint_r>:
 2004a3c:	30800217 	ldw	r2,8(r6)
 2004a40:	defffe04 	addi	sp,sp,-8
 2004a44:	dc000015 	stw	r16,0(sp)
 2004a48:	dfc00115 	stw	ra,4(sp)
 2004a4c:	3021883a 	mov	r16,r6
 2004a50:	0007883a 	mov	r3,zero
 2004a54:	1000061e 	bne	r2,zero,2004a70 <__sprint_r+0x34>
 2004a58:	1805883a 	mov	r2,r3
 2004a5c:	30000115 	stw	zero,4(r6)
 2004a60:	dfc00117 	ldw	ra,4(sp)
 2004a64:	dc000017 	ldw	r16,0(sp)
 2004a68:	dec00204 	addi	sp,sp,8
 2004a6c:	f800283a 	ret
 2004a70:	2008c140 	call	2008c14 <__sfvwrite_r>
 2004a74:	1007883a 	mov	r3,r2
 2004a78:	1805883a 	mov	r2,r3
 2004a7c:	80000115 	stw	zero,4(r16)
 2004a80:	80000215 	stw	zero,8(r16)
 2004a84:	dfc00117 	ldw	ra,4(sp)
 2004a88:	dc000017 	ldw	r16,0(sp)
 2004a8c:	dec00204 	addi	sp,sp,8
 2004a90:	f800283a 	ret

02004a94 <___vfprintf_internal_r>:
 2004a94:	defea404 	addi	sp,sp,-1392
 2004a98:	dd815815 	stw	r22,1376(sp)
 2004a9c:	dc015215 	stw	r16,1352(sp)
 2004aa0:	d9c15115 	stw	r7,1348(sp)
 2004aa4:	dfc15b15 	stw	ra,1388(sp)
 2004aa8:	df015a15 	stw	fp,1384(sp)
 2004aac:	ddc15915 	stw	r23,1380(sp)
 2004ab0:	dd415715 	stw	r21,1372(sp)
 2004ab4:	dd015615 	stw	r20,1368(sp)
 2004ab8:	dcc15515 	stw	r19,1364(sp)
 2004abc:	dc815415 	stw	r18,1360(sp)
 2004ac0:	dc415315 	stw	r17,1356(sp)
 2004ac4:	282d883a 	mov	r22,r5
 2004ac8:	3021883a 	mov	r16,r6
 2004acc:	d9014f15 	stw	r4,1340(sp)
 2004ad0:	20092380 	call	2009238 <_localeconv_r>
 2004ad4:	10800017 	ldw	r2,0(r2)
 2004ad8:	d9c15117 	ldw	r7,1348(sp)
 2004adc:	d8814915 	stw	r2,1316(sp)
 2004ae0:	d8814f17 	ldw	r2,1340(sp)
 2004ae4:	10000226 	beq	r2,zero,2004af0 <___vfprintf_internal_r+0x5c>
 2004ae8:	10800e17 	ldw	r2,56(r2)
 2004aec:	10020d26 	beq	r2,zero,2005324 <___vfprintf_internal_r+0x890>
 2004af0:	b080030b 	ldhu	r2,12(r22)
 2004af4:	1080020c 	andi	r2,r2,8
 2004af8:	10020e26 	beq	r2,zero,2005334 <___vfprintf_internal_r+0x8a0>
 2004afc:	b0800417 	ldw	r2,16(r22)
 2004b00:	10020c26 	beq	r2,zero,2005334 <___vfprintf_internal_r+0x8a0>
 2004b04:	b200030b 	ldhu	r8,12(r22)
 2004b08:	00800284 	movi	r2,10
 2004b0c:	40c0068c 	andi	r3,r8,26
 2004b10:	18802f1e 	bne	r3,r2,2004bd0 <___vfprintf_internal_r+0x13c>
 2004b14:	b080038f 	ldh	r2,14(r22)
 2004b18:	10002d16 	blt	r2,zero,2004bd0 <___vfprintf_internal_r+0x13c>
 2004b1c:	b240038b 	ldhu	r9,14(r22)
 2004b20:	b2800717 	ldw	r10,28(r22)
 2004b24:	b2c00917 	ldw	r11,36(r22)
 2004b28:	d9014f17 	ldw	r4,1340(sp)
 2004b2c:	dc402904 	addi	r17,sp,164
 2004b30:	d8804004 	addi	r2,sp,256
 2004b34:	00c10004 	movi	r3,1024
 2004b38:	423fff4c 	andi	r8,r8,65533
 2004b3c:	800d883a 	mov	r6,r16
 2004b40:	880b883a 	mov	r5,r17
 2004b44:	da002c0d 	sth	r8,176(sp)
 2004b48:	da402c8d 	sth	r9,178(sp)
 2004b4c:	da803015 	stw	r10,192(sp)
 2004b50:	dac03215 	stw	r11,200(sp)
 2004b54:	d8802d15 	stw	r2,180(sp)
 2004b58:	d8c02e15 	stw	r3,184(sp)
 2004b5c:	d8802915 	stw	r2,164(sp)
 2004b60:	d8c02b15 	stw	r3,172(sp)
 2004b64:	d8002f15 	stw	zero,188(sp)
 2004b68:	2004a940 	call	2004a94 <___vfprintf_internal_r>
 2004b6c:	d8814b15 	stw	r2,1324(sp)
 2004b70:	10000416 	blt	r2,zero,2004b84 <___vfprintf_internal_r+0xf0>
 2004b74:	d9014f17 	ldw	r4,1340(sp)
 2004b78:	880b883a 	mov	r5,r17
 2004b7c:	20082b00 	call	20082b0 <_fflush_r>
 2004b80:	1002321e 	bne	r2,zero,200544c <___vfprintf_internal_r+0x9b8>
 2004b84:	d8802c0b 	ldhu	r2,176(sp)
 2004b88:	1080100c 	andi	r2,r2,64
 2004b8c:	10000326 	beq	r2,zero,2004b9c <___vfprintf_internal_r+0x108>
 2004b90:	b080030b 	ldhu	r2,12(r22)
 2004b94:	10801014 	ori	r2,r2,64
 2004b98:	b080030d 	sth	r2,12(r22)
 2004b9c:	d8814b17 	ldw	r2,1324(sp)
 2004ba0:	dfc15b17 	ldw	ra,1388(sp)
 2004ba4:	df015a17 	ldw	fp,1384(sp)
 2004ba8:	ddc15917 	ldw	r23,1380(sp)
 2004bac:	dd815817 	ldw	r22,1376(sp)
 2004bb0:	dd415717 	ldw	r21,1372(sp)
 2004bb4:	dd015617 	ldw	r20,1368(sp)
 2004bb8:	dcc15517 	ldw	r19,1364(sp)
 2004bbc:	dc815417 	ldw	r18,1360(sp)
 2004bc0:	dc415317 	ldw	r17,1356(sp)
 2004bc4:	dc015217 	ldw	r16,1352(sp)
 2004bc8:	dec15c04 	addi	sp,sp,1392
 2004bcc:	f800283a 	ret
 2004bd0:	0005883a 	mov	r2,zero
 2004bd4:	0007883a 	mov	r3,zero
 2004bd8:	dd401904 	addi	r21,sp,100
 2004bdc:	d8814215 	stw	r2,1288(sp)
 2004be0:	802f883a 	mov	r23,r16
 2004be4:	d8c14315 	stw	r3,1292(sp)
 2004be8:	d8014b15 	stw	zero,1324(sp)
 2004bec:	d8014815 	stw	zero,1312(sp)
 2004bf0:	d8014415 	stw	zero,1296(sp)
 2004bf4:	d8014715 	stw	zero,1308(sp)
 2004bf8:	dd400c15 	stw	r21,48(sp)
 2004bfc:	d8000e15 	stw	zero,56(sp)
 2004c00:	d8000d15 	stw	zero,52(sp)
 2004c04:	b8800007 	ldb	r2,0(r23)
 2004c08:	10001926 	beq	r2,zero,2004c70 <___vfprintf_internal_r+0x1dc>
 2004c0c:	00c00944 	movi	r3,37
 2004c10:	10c01726 	beq	r2,r3,2004c70 <___vfprintf_internal_r+0x1dc>
 2004c14:	b821883a 	mov	r16,r23
 2004c18:	00000106 	br	2004c20 <___vfprintf_internal_r+0x18c>
 2004c1c:	10c00326 	beq	r2,r3,2004c2c <___vfprintf_internal_r+0x198>
 2004c20:	84000044 	addi	r16,r16,1
 2004c24:	80800007 	ldb	r2,0(r16)
 2004c28:	103ffc1e 	bne	r2,zero,2004c1c <___vfprintf_internal_r+0x188>
 2004c2c:	85e7c83a 	sub	r19,r16,r23
 2004c30:	98000e26 	beq	r19,zero,2004c6c <___vfprintf_internal_r+0x1d8>
 2004c34:	dc800e17 	ldw	r18,56(sp)
 2004c38:	dc400d17 	ldw	r17,52(sp)
 2004c3c:	008001c4 	movi	r2,7
 2004c40:	94e5883a 	add	r18,r18,r19
 2004c44:	8c400044 	addi	r17,r17,1
 2004c48:	adc00015 	stw	r23,0(r21)
 2004c4c:	dc800e15 	stw	r18,56(sp)
 2004c50:	acc00115 	stw	r19,4(r21)
 2004c54:	dc400d15 	stw	r17,52(sp)
 2004c58:	14428b16 	blt	r2,r17,2005688 <___vfprintf_internal_r+0xbf4>
 2004c5c:	ad400204 	addi	r21,r21,8
 2004c60:	d9014b17 	ldw	r4,1324(sp)
 2004c64:	24c9883a 	add	r4,r4,r19
 2004c68:	d9014b15 	stw	r4,1324(sp)
 2004c6c:	802f883a 	mov	r23,r16
 2004c70:	b8800007 	ldb	r2,0(r23)
 2004c74:	10013c26 	beq	r2,zero,2005168 <___vfprintf_internal_r+0x6d4>
 2004c78:	bdc00044 	addi	r23,r23,1
 2004c7c:	d8000405 	stb	zero,16(sp)
 2004c80:	b8c00007 	ldb	r3,0(r23)
 2004c84:	04ffffc4 	movi	r19,-1
 2004c88:	d8014c15 	stw	zero,1328(sp)
 2004c8c:	d8014a15 	stw	zero,1320(sp)
 2004c90:	d8c14d15 	stw	r3,1332(sp)
 2004c94:	bdc00044 	addi	r23,r23,1
 2004c98:	d9414d17 	ldw	r5,1332(sp)
 2004c9c:	00801604 	movi	r2,88
 2004ca0:	28fff804 	addi	r3,r5,-32
 2004ca4:	10c06036 	bltu	r2,r3,2004e28 <___vfprintf_internal_r+0x394>
 2004ca8:	18c5883a 	add	r2,r3,r3
 2004cac:	1085883a 	add	r2,r2,r2
 2004cb0:	00c08034 	movhi	r3,512
 2004cb4:	18d33104 	addi	r3,r3,19652
 2004cb8:	10c5883a 	add	r2,r2,r3
 2004cbc:	11000017 	ldw	r4,0(r2)
 2004cc0:	2000683a 	jmp	r4
 2004cc4:	02005c38 	rdprs	r8,zero,368
 2004cc8:	02004e28 	cmpgeui	r8,zero,312
 2004ccc:	02004e28 	cmpgeui	r8,zero,312
 2004cd0:	02005c24 	muli	r8,zero,368
 2004cd4:	02004e28 	cmpgeui	r8,zero,312
 2004cd8:	02004e28 	cmpgeui	r8,zero,312
 2004cdc:	02004e28 	cmpgeui	r8,zero,312
 2004ce0:	02004e28 	cmpgeui	r8,zero,312
 2004ce4:	02004e28 	cmpgeui	r8,zero,312
 2004ce8:	02004e28 	cmpgeui	r8,zero,312
 2004cec:	02005a04 	movi	r8,360
 2004cf0:	02005c14 	movui	r8,368
 2004cf4:	02004e28 	cmpgeui	r8,zero,312
 2004cf8:	02005a1c 	xori	r8,zero,360
 2004cfc:	02005cbc 	xorhi	r8,zero,370
 2004d00:	02004e28 	cmpgeui	r8,zero,312
 2004d04:	02005ca8 	cmpgeui	r8,zero,370
 2004d08:	02005c64 	muli	r8,zero,369
 2004d0c:	02005c64 	muli	r8,zero,369
 2004d10:	02005c64 	muli	r8,zero,369
 2004d14:	02005c64 	muli	r8,zero,369
 2004d18:	02005c64 	muli	r8,zero,369
 2004d1c:	02005c64 	muli	r8,zero,369
 2004d20:	02005c64 	muli	r8,zero,369
 2004d24:	02005c64 	muli	r8,zero,369
 2004d28:	02005c64 	muli	r8,zero,369
 2004d2c:	02004e28 	cmpgeui	r8,zero,312
 2004d30:	02004e28 	cmpgeui	r8,zero,312
 2004d34:	02004e28 	cmpgeui	r8,zero,312
 2004d38:	02004e28 	cmpgeui	r8,zero,312
 2004d3c:	02004e28 	cmpgeui	r8,zero,312
 2004d40:	02004e28 	cmpgeui	r8,zero,312
 2004d44:	02004e28 	cmpgeui	r8,zero,312
 2004d48:	02004e28 	cmpgeui	r8,zero,312
 2004d4c:	02004e28 	cmpgeui	r8,zero,312
 2004d50:	02004e28 	cmpgeui	r8,zero,312
 2004d54:	02005480 	call	200548 <__reset-0x1dffab8>
 2004d58:	02005aec 	andhi	r8,zero,363
 2004d5c:	02004e28 	cmpgeui	r8,zero,312
 2004d60:	02005aec 	andhi	r8,zero,363
 2004d64:	02004e28 	cmpgeui	r8,zero,312
 2004d68:	02004e28 	cmpgeui	r8,zero,312
 2004d6c:	02004e28 	cmpgeui	r8,zero,312
 2004d70:	02004e28 	cmpgeui	r8,zero,312
 2004d74:	02005c50 	cmplti	r8,zero,369
 2004d78:	02004e28 	cmpgeui	r8,zero,312
 2004d7c:	02004e28 	cmpgeui	r8,zero,312
 2004d80:	02005534 	movhi	r8,340
 2004d84:	02004e28 	cmpgeui	r8,zero,312
 2004d88:	02004e28 	cmpgeui	r8,zero,312
 2004d8c:	02004e28 	cmpgeui	r8,zero,312
 2004d90:	02004e28 	cmpgeui	r8,zero,312
 2004d94:	02004e28 	cmpgeui	r8,zero,312
 2004d98:	02005580 	call	200558 <__reset-0x1dffaa8>
 2004d9c:	02004e28 	cmpgeui	r8,zero,312
 2004da0:	02004e28 	cmpgeui	r8,zero,312
 2004da4:	02005ba0 	cmpeqi	r8,zero,366
 2004da8:	02004e28 	cmpgeui	r8,zero,312
 2004dac:	02004e28 	cmpgeui	r8,zero,312
 2004db0:	02004e28 	cmpgeui	r8,zero,312
 2004db4:	02004e28 	cmpgeui	r8,zero,312
 2004db8:	02004e28 	cmpgeui	r8,zero,312
 2004dbc:	02004e28 	cmpgeui	r8,zero,312
 2004dc0:	02004e28 	cmpgeui	r8,zero,312
 2004dc4:	02004e28 	cmpgeui	r8,zero,312
 2004dc8:	02004e28 	cmpgeui	r8,zero,312
 2004dcc:	02004e28 	cmpgeui	r8,zero,312
 2004dd0:	02005b74 	movhi	r8,365
 2004dd4:	0200548c 	andi	r8,zero,338
 2004dd8:	02005aec 	andhi	r8,zero,363
 2004ddc:	02005aec 	andhi	r8,zero,363
 2004de0:	02005aec 	andhi	r8,zero,363
 2004de4:	02005ad8 	cmpnei	r8,zero,363
 2004de8:	0200548c 	andi	r8,zero,338
 2004dec:	02004e28 	cmpgeui	r8,zero,312
 2004df0:	02004e28 	cmpgeui	r8,zero,312
 2004df4:	02005a60 	cmpeqi	r8,zero,361
 2004df8:	02004e28 	cmpgeui	r8,zero,312
 2004dfc:	02005a30 	cmpltui	r8,zero,360
 2004e00:	02005540 	call	200554 <__reset-0x1dffaac>
 2004e04:	02005a90 	cmplti	r8,zero,362
 2004e08:	02005a7c 	xorhi	r8,zero,361
 2004e0c:	02004e28 	cmpgeui	r8,zero,312
 2004e10:	02005d24 	muli	r8,zero,372
 2004e14:	02004e28 	cmpgeui	r8,zero,312
 2004e18:	0200558c 	andi	r8,zero,342
 2004e1c:	02004e28 	cmpgeui	r8,zero,312
 2004e20:	02004e28 	cmpgeui	r8,zero,312
 2004e24:	02005c04 	movi	r8,368
 2004e28:	d9014d17 	ldw	r4,1332(sp)
 2004e2c:	2000ce26 	beq	r4,zero,2005168 <___vfprintf_internal_r+0x6d4>
 2004e30:	01400044 	movi	r5,1
 2004e34:	d9800f04 	addi	r6,sp,60
 2004e38:	d9c14015 	stw	r7,1280(sp)
 2004e3c:	d9414515 	stw	r5,1300(sp)
 2004e40:	d9814115 	stw	r6,1284(sp)
 2004e44:	280f883a 	mov	r7,r5
 2004e48:	d9000f05 	stb	r4,60(sp)
 2004e4c:	d8000405 	stb	zero,16(sp)
 2004e50:	d8014615 	stw	zero,1304(sp)
 2004e54:	d8c14c17 	ldw	r3,1328(sp)
 2004e58:	1880008c 	andi	r2,r3,2
 2004e5c:	1005003a 	cmpeq	r2,r2,zero
 2004e60:	d8815015 	stw	r2,1344(sp)
 2004e64:	1000031e 	bne	r2,zero,2004e74 <___vfprintf_internal_r+0x3e0>
 2004e68:	d9014517 	ldw	r4,1300(sp)
 2004e6c:	21000084 	addi	r4,r4,2
 2004e70:	d9014515 	stw	r4,1300(sp)
 2004e74:	d9414c17 	ldw	r5,1328(sp)
 2004e78:	2940210c 	andi	r5,r5,132
 2004e7c:	d9414e15 	stw	r5,1336(sp)
 2004e80:	28002d1e 	bne	r5,zero,2004f38 <___vfprintf_internal_r+0x4a4>
 2004e84:	d9814a17 	ldw	r6,1320(sp)
 2004e88:	d8814517 	ldw	r2,1300(sp)
 2004e8c:	30a1c83a 	sub	r16,r6,r2
 2004e90:	0400290e 	bge	zero,r16,2004f38 <___vfprintf_internal_r+0x4a4>
 2004e94:	00800404 	movi	r2,16
 2004e98:	14045e0e 	bge	r2,r16,2006014 <___vfprintf_internal_r+0x1580>
 2004e9c:	dc800e17 	ldw	r18,56(sp)
 2004ea0:	dc400d17 	ldw	r17,52(sp)
 2004ea4:	1027883a 	mov	r19,r2
 2004ea8:	07008074 	movhi	fp,513
 2004eac:	e7053584 	addi	fp,fp,5334
 2004eb0:	050001c4 	movi	r20,7
 2004eb4:	00000306 	br	2004ec4 <___vfprintf_internal_r+0x430>
 2004eb8:	843ffc04 	addi	r16,r16,-16
 2004ebc:	ad400204 	addi	r21,r21,8
 2004ec0:	9c00130e 	bge	r19,r16,2004f10 <___vfprintf_internal_r+0x47c>
 2004ec4:	94800404 	addi	r18,r18,16
 2004ec8:	8c400044 	addi	r17,r17,1
 2004ecc:	af000015 	stw	fp,0(r21)
 2004ed0:	acc00115 	stw	r19,4(r21)
 2004ed4:	dc800e15 	stw	r18,56(sp)
 2004ed8:	dc400d15 	stw	r17,52(sp)
 2004edc:	a47ff60e 	bge	r20,r17,2004eb8 <___vfprintf_internal_r+0x424>
 2004ee0:	d9014f17 	ldw	r4,1340(sp)
 2004ee4:	b00b883a 	mov	r5,r22
 2004ee8:	d9800c04 	addi	r6,sp,48
 2004eec:	d9c15115 	stw	r7,1348(sp)
 2004ef0:	2004a3c0 	call	2004a3c <__sprint_r>
 2004ef4:	d9c15117 	ldw	r7,1348(sp)
 2004ef8:	10009e1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2004efc:	843ffc04 	addi	r16,r16,-16
 2004f00:	dc800e17 	ldw	r18,56(sp)
 2004f04:	dc400d17 	ldw	r17,52(sp)
 2004f08:	dd401904 	addi	r21,sp,100
 2004f0c:	9c3fed16 	blt	r19,r16,2004ec4 <___vfprintf_internal_r+0x430>
 2004f10:	9425883a 	add	r18,r18,r16
 2004f14:	8c400044 	addi	r17,r17,1
 2004f18:	008001c4 	movi	r2,7
 2004f1c:	af000015 	stw	fp,0(r21)
 2004f20:	ac000115 	stw	r16,4(r21)
 2004f24:	dc800e15 	stw	r18,56(sp)
 2004f28:	dc400d15 	stw	r17,52(sp)
 2004f2c:	1441f516 	blt	r2,r17,2005704 <___vfprintf_internal_r+0xc70>
 2004f30:	ad400204 	addi	r21,r21,8
 2004f34:	00000206 	br	2004f40 <___vfprintf_internal_r+0x4ac>
 2004f38:	dc800e17 	ldw	r18,56(sp)
 2004f3c:	dc400d17 	ldw	r17,52(sp)
 2004f40:	d8800407 	ldb	r2,16(sp)
 2004f44:	10000b26 	beq	r2,zero,2004f74 <___vfprintf_internal_r+0x4e0>
 2004f48:	00800044 	movi	r2,1
 2004f4c:	94800044 	addi	r18,r18,1
 2004f50:	8c400044 	addi	r17,r17,1
 2004f54:	a8800115 	stw	r2,4(r21)
 2004f58:	d8c00404 	addi	r3,sp,16
 2004f5c:	008001c4 	movi	r2,7
 2004f60:	a8c00015 	stw	r3,0(r21)
 2004f64:	dc800e15 	stw	r18,56(sp)
 2004f68:	dc400d15 	stw	r17,52(sp)
 2004f6c:	1441da16 	blt	r2,r17,20056d8 <___vfprintf_internal_r+0xc44>
 2004f70:	ad400204 	addi	r21,r21,8
 2004f74:	d9015017 	ldw	r4,1344(sp)
 2004f78:	20000b1e 	bne	r4,zero,2004fa8 <___vfprintf_internal_r+0x514>
 2004f7c:	d8800444 	addi	r2,sp,17
 2004f80:	94800084 	addi	r18,r18,2
 2004f84:	8c400044 	addi	r17,r17,1
 2004f88:	a8800015 	stw	r2,0(r21)
 2004f8c:	00c00084 	movi	r3,2
 2004f90:	008001c4 	movi	r2,7
 2004f94:	a8c00115 	stw	r3,4(r21)
 2004f98:	dc800e15 	stw	r18,56(sp)
 2004f9c:	dc400d15 	stw	r17,52(sp)
 2004fa0:	1441c216 	blt	r2,r17,20056ac <___vfprintf_internal_r+0xc18>
 2004fa4:	ad400204 	addi	r21,r21,8
 2004fa8:	d9414e17 	ldw	r5,1336(sp)
 2004fac:	00802004 	movi	r2,128
 2004fb0:	2880b126 	beq	r5,r2,2005278 <___vfprintf_internal_r+0x7e4>
 2004fb4:	d8c14617 	ldw	r3,1304(sp)
 2004fb8:	19e1c83a 	sub	r16,r3,r7
 2004fbc:	0400260e 	bge	zero,r16,2005058 <___vfprintf_internal_r+0x5c4>
 2004fc0:	00800404 	movi	r2,16
 2004fc4:	1403cf0e 	bge	r2,r16,2005f04 <___vfprintf_internal_r+0x1470>
 2004fc8:	1027883a 	mov	r19,r2
 2004fcc:	07008074 	movhi	fp,513
 2004fd0:	e7053184 	addi	fp,fp,5318
 2004fd4:	050001c4 	movi	r20,7
 2004fd8:	00000306 	br	2004fe8 <___vfprintf_internal_r+0x554>
 2004fdc:	843ffc04 	addi	r16,r16,-16
 2004fe0:	ad400204 	addi	r21,r21,8
 2004fe4:	9c00130e 	bge	r19,r16,2005034 <___vfprintf_internal_r+0x5a0>
 2004fe8:	94800404 	addi	r18,r18,16
 2004fec:	8c400044 	addi	r17,r17,1
 2004ff0:	af000015 	stw	fp,0(r21)
 2004ff4:	acc00115 	stw	r19,4(r21)
 2004ff8:	dc800e15 	stw	r18,56(sp)
 2004ffc:	dc400d15 	stw	r17,52(sp)
 2005000:	a47ff60e 	bge	r20,r17,2004fdc <___vfprintf_internal_r+0x548>
 2005004:	d9014f17 	ldw	r4,1340(sp)
 2005008:	b00b883a 	mov	r5,r22
 200500c:	d9800c04 	addi	r6,sp,48
 2005010:	d9c15115 	stw	r7,1348(sp)
 2005014:	2004a3c0 	call	2004a3c <__sprint_r>
 2005018:	d9c15117 	ldw	r7,1348(sp)
 200501c:	1000551e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005020:	843ffc04 	addi	r16,r16,-16
 2005024:	dc800e17 	ldw	r18,56(sp)
 2005028:	dc400d17 	ldw	r17,52(sp)
 200502c:	dd401904 	addi	r21,sp,100
 2005030:	9c3fed16 	blt	r19,r16,2004fe8 <___vfprintf_internal_r+0x554>
 2005034:	9425883a 	add	r18,r18,r16
 2005038:	8c400044 	addi	r17,r17,1
 200503c:	008001c4 	movi	r2,7
 2005040:	af000015 	stw	fp,0(r21)
 2005044:	ac000115 	stw	r16,4(r21)
 2005048:	dc800e15 	stw	r18,56(sp)
 200504c:	dc400d15 	stw	r17,52(sp)
 2005050:	14418216 	blt	r2,r17,200565c <___vfprintf_internal_r+0xbc8>
 2005054:	ad400204 	addi	r21,r21,8
 2005058:	d9014c17 	ldw	r4,1328(sp)
 200505c:	2080400c 	andi	r2,r4,256
 2005060:	10004a1e 	bne	r2,zero,200518c <___vfprintf_internal_r+0x6f8>
 2005064:	d9414117 	ldw	r5,1284(sp)
 2005068:	91e5883a 	add	r18,r18,r7
 200506c:	8c400044 	addi	r17,r17,1
 2005070:	008001c4 	movi	r2,7
 2005074:	a9400015 	stw	r5,0(r21)
 2005078:	a9c00115 	stw	r7,4(r21)
 200507c:	dc800e15 	stw	r18,56(sp)
 2005080:	dc400d15 	stw	r17,52(sp)
 2005084:	14416716 	blt	r2,r17,2005624 <___vfprintf_internal_r+0xb90>
 2005088:	a8c00204 	addi	r3,r21,8
 200508c:	d9814c17 	ldw	r6,1328(sp)
 2005090:	3080010c 	andi	r2,r6,4
 2005094:	10002826 	beq	r2,zero,2005138 <___vfprintf_internal_r+0x6a4>
 2005098:	d8814a17 	ldw	r2,1320(sp)
 200509c:	d9014517 	ldw	r4,1300(sp)
 20050a0:	1121c83a 	sub	r16,r2,r4
 20050a4:	0400240e 	bge	zero,r16,2005138 <___vfprintf_internal_r+0x6a4>
 20050a8:	00800404 	movi	r2,16
 20050ac:	1404550e 	bge	r2,r16,2006204 <___vfprintf_internal_r+0x1770>
 20050b0:	dc400d17 	ldw	r17,52(sp)
 20050b4:	1027883a 	mov	r19,r2
 20050b8:	07008074 	movhi	fp,513
 20050bc:	e7053584 	addi	fp,fp,5334
 20050c0:	050001c4 	movi	r20,7
 20050c4:	00000306 	br	20050d4 <___vfprintf_internal_r+0x640>
 20050c8:	843ffc04 	addi	r16,r16,-16
 20050cc:	18c00204 	addi	r3,r3,8
 20050d0:	9c00110e 	bge	r19,r16,2005118 <___vfprintf_internal_r+0x684>
 20050d4:	94800404 	addi	r18,r18,16
 20050d8:	8c400044 	addi	r17,r17,1
 20050dc:	1f000015 	stw	fp,0(r3)
 20050e0:	1cc00115 	stw	r19,4(r3)
 20050e4:	dc800e15 	stw	r18,56(sp)
 20050e8:	dc400d15 	stw	r17,52(sp)
 20050ec:	a47ff60e 	bge	r20,r17,20050c8 <___vfprintf_internal_r+0x634>
 20050f0:	d9014f17 	ldw	r4,1340(sp)
 20050f4:	b00b883a 	mov	r5,r22
 20050f8:	d9800c04 	addi	r6,sp,48
 20050fc:	2004a3c0 	call	2004a3c <__sprint_r>
 2005100:	10001c1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005104:	843ffc04 	addi	r16,r16,-16
 2005108:	dc800e17 	ldw	r18,56(sp)
 200510c:	dc400d17 	ldw	r17,52(sp)
 2005110:	d8c01904 	addi	r3,sp,100
 2005114:	9c3fef16 	blt	r19,r16,20050d4 <___vfprintf_internal_r+0x640>
 2005118:	9425883a 	add	r18,r18,r16
 200511c:	8c400044 	addi	r17,r17,1
 2005120:	008001c4 	movi	r2,7
 2005124:	1f000015 	stw	fp,0(r3)
 2005128:	1c000115 	stw	r16,4(r3)
 200512c:	dc800e15 	stw	r18,56(sp)
 2005130:	dc400d15 	stw	r17,52(sp)
 2005134:	1440cb16 	blt	r2,r17,2005464 <___vfprintf_internal_r+0x9d0>
 2005138:	d8814a17 	ldw	r2,1320(sp)
 200513c:	d9414517 	ldw	r5,1300(sp)
 2005140:	1140010e 	bge	r2,r5,2005148 <___vfprintf_internal_r+0x6b4>
 2005144:	2805883a 	mov	r2,r5
 2005148:	d9814b17 	ldw	r6,1324(sp)
 200514c:	308d883a 	add	r6,r6,r2
 2005150:	d9814b15 	stw	r6,1324(sp)
 2005154:	90013b1e 	bne	r18,zero,2005644 <___vfprintf_internal_r+0xbb0>
 2005158:	d9c14017 	ldw	r7,1280(sp)
 200515c:	dd401904 	addi	r21,sp,100
 2005160:	d8000d15 	stw	zero,52(sp)
 2005164:	003ea706 	br	2004c04 <___vfprintf_internal_r+0x170>
 2005168:	d8800e17 	ldw	r2,56(sp)
 200516c:	1005451e 	bne	r2,zero,2006684 <___vfprintf_internal_r+0x1bf0>
 2005170:	d8000d15 	stw	zero,52(sp)
 2005174:	b080030b 	ldhu	r2,12(r22)
 2005178:	1080100c 	andi	r2,r2,64
 200517c:	103e8726 	beq	r2,zero,2004b9c <___vfprintf_internal_r+0x108>
 2005180:	00bfffc4 	movi	r2,-1
 2005184:	d8814b15 	stw	r2,1324(sp)
 2005188:	003e8406 	br	2004b9c <___vfprintf_internal_r+0x108>
 200518c:	d9814d17 	ldw	r6,1332(sp)
 2005190:	00801944 	movi	r2,101
 2005194:	11806e16 	blt	r2,r6,2005350 <___vfprintf_internal_r+0x8bc>
 2005198:	d9414717 	ldw	r5,1308(sp)
 200519c:	00c00044 	movi	r3,1
 20051a0:	1943490e 	bge	r3,r5,2005ec8 <___vfprintf_internal_r+0x1434>
 20051a4:	d8814117 	ldw	r2,1284(sp)
 20051a8:	94800044 	addi	r18,r18,1
 20051ac:	8c400044 	addi	r17,r17,1
 20051b0:	a8800015 	stw	r2,0(r21)
 20051b4:	008001c4 	movi	r2,7
 20051b8:	a8c00115 	stw	r3,4(r21)
 20051bc:	dc800e15 	stw	r18,56(sp)
 20051c0:	dc400d15 	stw	r17,52(sp)
 20051c4:	1441ca16 	blt	r2,r17,20058f0 <___vfprintf_internal_r+0xe5c>
 20051c8:	a8c00204 	addi	r3,r21,8
 20051cc:	d9014917 	ldw	r4,1316(sp)
 20051d0:	00800044 	movi	r2,1
 20051d4:	94800044 	addi	r18,r18,1
 20051d8:	8c400044 	addi	r17,r17,1
 20051dc:	18800115 	stw	r2,4(r3)
 20051e0:	008001c4 	movi	r2,7
 20051e4:	19000015 	stw	r4,0(r3)
 20051e8:	dc800e15 	stw	r18,56(sp)
 20051ec:	dc400d15 	stw	r17,52(sp)
 20051f0:	1441b616 	blt	r2,r17,20058cc <___vfprintf_internal_r+0xe38>
 20051f4:	1cc00204 	addi	r19,r3,8
 20051f8:	d9014217 	ldw	r4,1288(sp)
 20051fc:	d9414317 	ldw	r5,1292(sp)
 2005200:	000d883a 	mov	r6,zero
 2005204:	000f883a 	mov	r7,zero
 2005208:	200cef00 	call	200cef0 <__nedf2>
 200520c:	10017426 	beq	r2,zero,20057e0 <___vfprintf_internal_r+0xd4c>
 2005210:	d9414717 	ldw	r5,1308(sp)
 2005214:	d9814117 	ldw	r6,1284(sp)
 2005218:	8c400044 	addi	r17,r17,1
 200521c:	2c85883a 	add	r2,r5,r18
 2005220:	14bfffc4 	addi	r18,r2,-1
 2005224:	28bfffc4 	addi	r2,r5,-1
 2005228:	30c00044 	addi	r3,r6,1
 200522c:	98800115 	stw	r2,4(r19)
 2005230:	008001c4 	movi	r2,7
 2005234:	98c00015 	stw	r3,0(r19)
 2005238:	dc800e15 	stw	r18,56(sp)
 200523c:	dc400d15 	stw	r17,52(sp)
 2005240:	14418e16 	blt	r2,r17,200587c <___vfprintf_internal_r+0xde8>
 2005244:	9cc00204 	addi	r19,r19,8
 2005248:	d9414817 	ldw	r5,1312(sp)
 200524c:	d8800804 	addi	r2,sp,32
 2005250:	8c400044 	addi	r17,r17,1
 2005254:	9165883a 	add	r18,r18,r5
 2005258:	98800015 	stw	r2,0(r19)
 200525c:	008001c4 	movi	r2,7
 2005260:	99400115 	stw	r5,4(r19)
 2005264:	dc800e15 	stw	r18,56(sp)
 2005268:	dc400d15 	stw	r17,52(sp)
 200526c:	1440ed16 	blt	r2,r17,2005624 <___vfprintf_internal_r+0xb90>
 2005270:	98c00204 	addi	r3,r19,8
 2005274:	003f8506 	br	200508c <___vfprintf_internal_r+0x5f8>
 2005278:	d9814a17 	ldw	r6,1320(sp)
 200527c:	d8814517 	ldw	r2,1300(sp)
 2005280:	30a1c83a 	sub	r16,r6,r2
 2005284:	043f4b0e 	bge	zero,r16,2004fb4 <___vfprintf_internal_r+0x520>
 2005288:	00800404 	movi	r2,16
 200528c:	14043a0e 	bge	r2,r16,2006378 <___vfprintf_internal_r+0x18e4>
 2005290:	1027883a 	mov	r19,r2
 2005294:	07008074 	movhi	fp,513
 2005298:	e7053184 	addi	fp,fp,5318
 200529c:	050001c4 	movi	r20,7
 20052a0:	00000306 	br	20052b0 <___vfprintf_internal_r+0x81c>
 20052a4:	843ffc04 	addi	r16,r16,-16
 20052a8:	ad400204 	addi	r21,r21,8
 20052ac:	9c00130e 	bge	r19,r16,20052fc <___vfprintf_internal_r+0x868>
 20052b0:	94800404 	addi	r18,r18,16
 20052b4:	8c400044 	addi	r17,r17,1
 20052b8:	af000015 	stw	fp,0(r21)
 20052bc:	acc00115 	stw	r19,4(r21)
 20052c0:	dc800e15 	stw	r18,56(sp)
 20052c4:	dc400d15 	stw	r17,52(sp)
 20052c8:	a47ff60e 	bge	r20,r17,20052a4 <___vfprintf_internal_r+0x810>
 20052cc:	d9014f17 	ldw	r4,1340(sp)
 20052d0:	b00b883a 	mov	r5,r22
 20052d4:	d9800c04 	addi	r6,sp,48
 20052d8:	d9c15115 	stw	r7,1348(sp)
 20052dc:	2004a3c0 	call	2004a3c <__sprint_r>
 20052e0:	d9c15117 	ldw	r7,1348(sp)
 20052e4:	103fa31e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20052e8:	843ffc04 	addi	r16,r16,-16
 20052ec:	dc800e17 	ldw	r18,56(sp)
 20052f0:	dc400d17 	ldw	r17,52(sp)
 20052f4:	dd401904 	addi	r21,sp,100
 20052f8:	9c3fed16 	blt	r19,r16,20052b0 <___vfprintf_internal_r+0x81c>
 20052fc:	9425883a 	add	r18,r18,r16
 2005300:	8c400044 	addi	r17,r17,1
 2005304:	008001c4 	movi	r2,7
 2005308:	af000015 	stw	fp,0(r21)
 200530c:	ac000115 	stw	r16,4(r21)
 2005310:	dc800e15 	stw	r18,56(sp)
 2005314:	dc400d15 	stw	r17,52(sp)
 2005318:	14416116 	blt	r2,r17,20058a0 <___vfprintf_internal_r+0xe0c>
 200531c:	ad400204 	addi	r21,r21,8
 2005320:	003f2406 	br	2004fb4 <___vfprintf_internal_r+0x520>
 2005324:	d9014f17 	ldw	r4,1340(sp)
 2005328:	20085480 	call	2008548 <__sinit>
 200532c:	d9c15117 	ldw	r7,1348(sp)
 2005330:	003def06 	br	2004af0 <___vfprintf_internal_r+0x5c>
 2005334:	d9014f17 	ldw	r4,1340(sp)
 2005338:	b00b883a 	mov	r5,r22
 200533c:	d9c15115 	stw	r7,1348(sp)
 2005340:	200697c0 	call	200697c <__swsetup_r>
 2005344:	d9c15117 	ldw	r7,1348(sp)
 2005348:	103dee26 	beq	r2,zero,2004b04 <___vfprintf_internal_r+0x70>
 200534c:	003f8c06 	br	2005180 <___vfprintf_internal_r+0x6ec>
 2005350:	d9014217 	ldw	r4,1288(sp)
 2005354:	d9414317 	ldw	r5,1292(sp)
 2005358:	000d883a 	mov	r6,zero
 200535c:	000f883a 	mov	r7,zero
 2005360:	200ce680 	call	200ce68 <__eqdf2>
 2005364:	1000f21e 	bne	r2,zero,2005730 <___vfprintf_internal_r+0xc9c>
 2005368:	00808074 	movhi	r2,513
 200536c:	10847a04 	addi	r2,r2,4584
 2005370:	94800044 	addi	r18,r18,1
 2005374:	8c400044 	addi	r17,r17,1
 2005378:	a8800015 	stw	r2,0(r21)
 200537c:	00c00044 	movi	r3,1
 2005380:	008001c4 	movi	r2,7
 2005384:	a8c00115 	stw	r3,4(r21)
 2005388:	dc800e15 	stw	r18,56(sp)
 200538c:	dc400d15 	stw	r17,52(sp)
 2005390:	14430016 	blt	r2,r17,2005f94 <___vfprintf_internal_r+0x1500>
 2005394:	a8c00204 	addi	r3,r21,8
 2005398:	d8800517 	ldw	r2,20(sp)
 200539c:	d9014717 	ldw	r4,1308(sp)
 20053a0:	11015c0e 	bge	r2,r4,2005914 <___vfprintf_internal_r+0xe80>
 20053a4:	dc400d17 	ldw	r17,52(sp)
 20053a8:	d9814917 	ldw	r6,1316(sp)
 20053ac:	00800044 	movi	r2,1
 20053b0:	94800044 	addi	r18,r18,1
 20053b4:	8c400044 	addi	r17,r17,1
 20053b8:	18800115 	stw	r2,4(r3)
 20053bc:	008001c4 	movi	r2,7
 20053c0:	19800015 	stw	r6,0(r3)
 20053c4:	dc800e15 	stw	r18,56(sp)
 20053c8:	dc400d15 	stw	r17,52(sp)
 20053cc:	14431616 	blt	r2,r17,2006028 <___vfprintf_internal_r+0x1594>
 20053d0:	18c00204 	addi	r3,r3,8
 20053d4:	d8814717 	ldw	r2,1308(sp)
 20053d8:	143fffc4 	addi	r16,r2,-1
 20053dc:	043f2b0e 	bge	zero,r16,200508c <___vfprintf_internal_r+0x5f8>
 20053e0:	00800404 	movi	r2,16
 20053e4:	1402a80e 	bge	r2,r16,2005e88 <___vfprintf_internal_r+0x13f4>
 20053e8:	dc400d17 	ldw	r17,52(sp)
 20053ec:	1027883a 	mov	r19,r2
 20053f0:	07008074 	movhi	fp,513
 20053f4:	e7053184 	addi	fp,fp,5318
 20053f8:	050001c4 	movi	r20,7
 20053fc:	00000306 	br	200540c <___vfprintf_internal_r+0x978>
 2005400:	18c00204 	addi	r3,r3,8
 2005404:	843ffc04 	addi	r16,r16,-16
 2005408:	9c02a20e 	bge	r19,r16,2005e94 <___vfprintf_internal_r+0x1400>
 200540c:	94800404 	addi	r18,r18,16
 2005410:	8c400044 	addi	r17,r17,1
 2005414:	1f000015 	stw	fp,0(r3)
 2005418:	1cc00115 	stw	r19,4(r3)
 200541c:	dc800e15 	stw	r18,56(sp)
 2005420:	dc400d15 	stw	r17,52(sp)
 2005424:	a47ff60e 	bge	r20,r17,2005400 <___vfprintf_internal_r+0x96c>
 2005428:	d9014f17 	ldw	r4,1340(sp)
 200542c:	b00b883a 	mov	r5,r22
 2005430:	d9800c04 	addi	r6,sp,48
 2005434:	2004a3c0 	call	2004a3c <__sprint_r>
 2005438:	103f4e1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 200543c:	dc800e17 	ldw	r18,56(sp)
 2005440:	dc400d17 	ldw	r17,52(sp)
 2005444:	d8c01904 	addi	r3,sp,100
 2005448:	003fee06 	br	2005404 <___vfprintf_internal_r+0x970>
 200544c:	d8802c0b 	ldhu	r2,176(sp)
 2005450:	00ffffc4 	movi	r3,-1
 2005454:	d8c14b15 	stw	r3,1324(sp)
 2005458:	1080100c 	andi	r2,r2,64
 200545c:	103dcc1e 	bne	r2,zero,2004b90 <___vfprintf_internal_r+0xfc>
 2005460:	003dce06 	br	2004b9c <___vfprintf_internal_r+0x108>
 2005464:	d9014f17 	ldw	r4,1340(sp)
 2005468:	b00b883a 	mov	r5,r22
 200546c:	d9800c04 	addi	r6,sp,48
 2005470:	2004a3c0 	call	2004a3c <__sprint_r>
 2005474:	103f3f1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005478:	dc800e17 	ldw	r18,56(sp)
 200547c:	003f2e06 	br	2005138 <___vfprintf_internal_r+0x6a4>
 2005480:	d9414c17 	ldw	r5,1328(sp)
 2005484:	29400414 	ori	r5,r5,16
 2005488:	d9414c15 	stw	r5,1328(sp)
 200548c:	d9814c17 	ldw	r6,1328(sp)
 2005490:	3080080c 	andi	r2,r6,32
 2005494:	10014f1e 	bne	r2,zero,20059d4 <___vfprintf_internal_r+0xf40>
 2005498:	d8c14c17 	ldw	r3,1328(sp)
 200549c:	1880040c 	andi	r2,r3,16
 20054a0:	1002f01e 	bne	r2,zero,2006064 <___vfprintf_internal_r+0x15d0>
 20054a4:	d9014c17 	ldw	r4,1328(sp)
 20054a8:	2080100c 	andi	r2,r4,64
 20054ac:	1002ed26 	beq	r2,zero,2006064 <___vfprintf_internal_r+0x15d0>
 20054b0:	3880000f 	ldh	r2,0(r7)
 20054b4:	39c00104 	addi	r7,r7,4
 20054b8:	d9c14015 	stw	r7,1280(sp)
 20054bc:	1023d7fa 	srai	r17,r2,31
 20054c0:	1021883a 	mov	r16,r2
 20054c4:	88037816 	blt	r17,zero,20062a8 <___vfprintf_internal_r+0x1814>
 20054c8:	01000044 	movi	r4,1
 20054cc:	98000416 	blt	r19,zero,20054e0 <___vfprintf_internal_r+0xa4c>
 20054d0:	d8c14c17 	ldw	r3,1328(sp)
 20054d4:	00bfdfc4 	movi	r2,-129
 20054d8:	1886703a 	and	r3,r3,r2
 20054dc:	d8c14c15 	stw	r3,1328(sp)
 20054e0:	8444b03a 	or	r2,r16,r17
 20054e4:	10022c1e 	bne	r2,zero,2005d98 <___vfprintf_internal_r+0x1304>
 20054e8:	98022b1e 	bne	r19,zero,2005d98 <___vfprintf_internal_r+0x1304>
 20054ec:	20803fcc 	andi	r2,r4,255
 20054f0:	1002a126 	beq	r2,zero,2005f78 <___vfprintf_internal_r+0x14e4>
 20054f4:	d8c01904 	addi	r3,sp,100
 20054f8:	dd000f04 	addi	r20,sp,60
 20054fc:	d8c14115 	stw	r3,1284(sp)
 2005500:	d8c14117 	ldw	r3,1284(sp)
 2005504:	dcc14515 	stw	r19,1300(sp)
 2005508:	a0c5c83a 	sub	r2,r20,r3
 200550c:	11c00a04 	addi	r7,r2,40
 2005510:	99c0010e 	bge	r19,r7,2005518 <___vfprintf_internal_r+0xa84>
 2005514:	d9c14515 	stw	r7,1300(sp)
 2005518:	dcc14615 	stw	r19,1304(sp)
 200551c:	d8800407 	ldb	r2,16(sp)
 2005520:	103e4c26 	beq	r2,zero,2004e54 <___vfprintf_internal_r+0x3c0>
 2005524:	d8814517 	ldw	r2,1300(sp)
 2005528:	10800044 	addi	r2,r2,1
 200552c:	d8814515 	stw	r2,1300(sp)
 2005530:	003e4806 	br	2004e54 <___vfprintf_internal_r+0x3c0>
 2005534:	d9814c17 	ldw	r6,1328(sp)
 2005538:	31800414 	ori	r6,r6,16
 200553c:	d9814c15 	stw	r6,1328(sp)
 2005540:	d8c14c17 	ldw	r3,1328(sp)
 2005544:	1880080c 	andi	r2,r3,32
 2005548:	1001271e 	bne	r2,zero,20059e8 <___vfprintf_internal_r+0xf54>
 200554c:	d9414c17 	ldw	r5,1328(sp)
 2005550:	2880040c 	andi	r2,r5,16
 2005554:	1002bc1e 	bne	r2,zero,2006048 <___vfprintf_internal_r+0x15b4>
 2005558:	d9814c17 	ldw	r6,1328(sp)
 200555c:	3080100c 	andi	r2,r6,64
 2005560:	1002b926 	beq	r2,zero,2006048 <___vfprintf_internal_r+0x15b4>
 2005564:	3c00000b 	ldhu	r16,0(r7)
 2005568:	0009883a 	mov	r4,zero
 200556c:	39c00104 	addi	r7,r7,4
 2005570:	0023883a 	mov	r17,zero
 2005574:	d9c14015 	stw	r7,1280(sp)
 2005578:	d8000405 	stb	zero,16(sp)
 200557c:	003fd306 	br	20054cc <___vfprintf_internal_r+0xa38>
 2005580:	d9014c17 	ldw	r4,1328(sp)
 2005584:	21000414 	ori	r4,r4,16
 2005588:	d9014c15 	stw	r4,1328(sp)
 200558c:	d9414c17 	ldw	r5,1328(sp)
 2005590:	2880080c 	andi	r2,r5,32
 2005594:	1001081e 	bne	r2,zero,20059b8 <___vfprintf_internal_r+0xf24>
 2005598:	d8c14c17 	ldw	r3,1328(sp)
 200559c:	1880040c 	andi	r2,r3,16
 20055a0:	1002b61e 	bne	r2,zero,200607c <___vfprintf_internal_r+0x15e8>
 20055a4:	d9014c17 	ldw	r4,1328(sp)
 20055a8:	2080100c 	andi	r2,r4,64
 20055ac:	1002b326 	beq	r2,zero,200607c <___vfprintf_internal_r+0x15e8>
 20055b0:	3c00000b 	ldhu	r16,0(r7)
 20055b4:	01000044 	movi	r4,1
 20055b8:	39c00104 	addi	r7,r7,4
 20055bc:	0023883a 	mov	r17,zero
 20055c0:	d9c14015 	stw	r7,1280(sp)
 20055c4:	d8000405 	stb	zero,16(sp)
 20055c8:	003fc006 	br	20054cc <___vfprintf_internal_r+0xa38>
 20055cc:	d9014f17 	ldw	r4,1340(sp)
 20055d0:	b00b883a 	mov	r5,r22
 20055d4:	d9800c04 	addi	r6,sp,48
 20055d8:	2004a3c0 	call	2004a3c <__sprint_r>
 20055dc:	103ee51e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20055e0:	dc800e17 	ldw	r18,56(sp)
 20055e4:	d8c01904 	addi	r3,sp,100
 20055e8:	d9814c17 	ldw	r6,1328(sp)
 20055ec:	3080004c 	andi	r2,r6,1
 20055f0:	1005003a 	cmpeq	r2,r2,zero
 20055f4:	103ea51e 	bne	r2,zero,200508c <___vfprintf_internal_r+0x5f8>
 20055f8:	00800044 	movi	r2,1
 20055fc:	dc400d17 	ldw	r17,52(sp)
 2005600:	18800115 	stw	r2,4(r3)
 2005604:	d8814917 	ldw	r2,1316(sp)
 2005608:	94800044 	addi	r18,r18,1
 200560c:	8c400044 	addi	r17,r17,1
 2005610:	18800015 	stw	r2,0(r3)
 2005614:	008001c4 	movi	r2,7
 2005618:	dc800e15 	stw	r18,56(sp)
 200561c:	dc400d15 	stw	r17,52(sp)
 2005620:	1442240e 	bge	r2,r17,2005eb4 <___vfprintf_internal_r+0x1420>
 2005624:	d9014f17 	ldw	r4,1340(sp)
 2005628:	b00b883a 	mov	r5,r22
 200562c:	d9800c04 	addi	r6,sp,48
 2005630:	2004a3c0 	call	2004a3c <__sprint_r>
 2005634:	103ecf1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005638:	dc800e17 	ldw	r18,56(sp)
 200563c:	d8c01904 	addi	r3,sp,100
 2005640:	003e9206 	br	200508c <___vfprintf_internal_r+0x5f8>
 2005644:	d9014f17 	ldw	r4,1340(sp)
 2005648:	b00b883a 	mov	r5,r22
 200564c:	d9800c04 	addi	r6,sp,48
 2005650:	2004a3c0 	call	2004a3c <__sprint_r>
 2005654:	103ec026 	beq	r2,zero,2005158 <___vfprintf_internal_r+0x6c4>
 2005658:	003ec606 	br	2005174 <___vfprintf_internal_r+0x6e0>
 200565c:	d9014f17 	ldw	r4,1340(sp)
 2005660:	b00b883a 	mov	r5,r22
 2005664:	d9800c04 	addi	r6,sp,48
 2005668:	d9c15115 	stw	r7,1348(sp)
 200566c:	2004a3c0 	call	2004a3c <__sprint_r>
 2005670:	d9c15117 	ldw	r7,1348(sp)
 2005674:	103ebf1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005678:	dc800e17 	ldw	r18,56(sp)
 200567c:	dc400d17 	ldw	r17,52(sp)
 2005680:	dd401904 	addi	r21,sp,100
 2005684:	003e7406 	br	2005058 <___vfprintf_internal_r+0x5c4>
 2005688:	d9014f17 	ldw	r4,1340(sp)
 200568c:	b00b883a 	mov	r5,r22
 2005690:	d9800c04 	addi	r6,sp,48
 2005694:	d9c15115 	stw	r7,1348(sp)
 2005698:	2004a3c0 	call	2004a3c <__sprint_r>
 200569c:	d9c15117 	ldw	r7,1348(sp)
 20056a0:	103eb41e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20056a4:	dd401904 	addi	r21,sp,100
 20056a8:	003d6d06 	br	2004c60 <___vfprintf_internal_r+0x1cc>
 20056ac:	d9014f17 	ldw	r4,1340(sp)
 20056b0:	b00b883a 	mov	r5,r22
 20056b4:	d9800c04 	addi	r6,sp,48
 20056b8:	d9c15115 	stw	r7,1348(sp)
 20056bc:	2004a3c0 	call	2004a3c <__sprint_r>
 20056c0:	d9c15117 	ldw	r7,1348(sp)
 20056c4:	103eab1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20056c8:	dc800e17 	ldw	r18,56(sp)
 20056cc:	dc400d17 	ldw	r17,52(sp)
 20056d0:	dd401904 	addi	r21,sp,100
 20056d4:	003e3406 	br	2004fa8 <___vfprintf_internal_r+0x514>
 20056d8:	d9014f17 	ldw	r4,1340(sp)
 20056dc:	b00b883a 	mov	r5,r22
 20056e0:	d9800c04 	addi	r6,sp,48
 20056e4:	d9c15115 	stw	r7,1348(sp)
 20056e8:	2004a3c0 	call	2004a3c <__sprint_r>
 20056ec:	d9c15117 	ldw	r7,1348(sp)
 20056f0:	103ea01e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20056f4:	dc800e17 	ldw	r18,56(sp)
 20056f8:	dc400d17 	ldw	r17,52(sp)
 20056fc:	dd401904 	addi	r21,sp,100
 2005700:	003e1c06 	br	2004f74 <___vfprintf_internal_r+0x4e0>
 2005704:	d9014f17 	ldw	r4,1340(sp)
 2005708:	b00b883a 	mov	r5,r22
 200570c:	d9800c04 	addi	r6,sp,48
 2005710:	d9c15115 	stw	r7,1348(sp)
 2005714:	2004a3c0 	call	2004a3c <__sprint_r>
 2005718:	d9c15117 	ldw	r7,1348(sp)
 200571c:	103e951e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005720:	dc800e17 	ldw	r18,56(sp)
 2005724:	dc400d17 	ldw	r17,52(sp)
 2005728:	dd401904 	addi	r21,sp,100
 200572c:	003e0406 	br	2004f40 <___vfprintf_internal_r+0x4ac>
 2005730:	d9000517 	ldw	r4,20(sp)
 2005734:	0102580e 	bge	zero,r4,2006098 <___vfprintf_internal_r+0x1604>
 2005738:	d9814717 	ldw	r6,1308(sp)
 200573c:	21807a16 	blt	r4,r6,2005928 <___vfprintf_internal_r+0xe94>
 2005740:	d8814117 	ldw	r2,1284(sp)
 2005744:	91a5883a 	add	r18,r18,r6
 2005748:	8c400044 	addi	r17,r17,1
 200574c:	a8800015 	stw	r2,0(r21)
 2005750:	008001c4 	movi	r2,7
 2005754:	a9800115 	stw	r6,4(r21)
 2005758:	dc800e15 	stw	r18,56(sp)
 200575c:	dc400d15 	stw	r17,52(sp)
 2005760:	1442fc16 	blt	r2,r17,2006354 <___vfprintf_internal_r+0x18c0>
 2005764:	a8c00204 	addi	r3,r21,8
 2005768:	d9414717 	ldw	r5,1308(sp)
 200576c:	2161c83a 	sub	r16,r4,r5
 2005770:	043f9d0e 	bge	zero,r16,20055e8 <___vfprintf_internal_r+0xb54>
 2005774:	00800404 	movi	r2,16
 2005778:	1402190e 	bge	r2,r16,2005fe0 <___vfprintf_internal_r+0x154c>
 200577c:	dc400d17 	ldw	r17,52(sp)
 2005780:	1027883a 	mov	r19,r2
 2005784:	07008074 	movhi	fp,513
 2005788:	e7053184 	addi	fp,fp,5318
 200578c:	050001c4 	movi	r20,7
 2005790:	00000306 	br	20057a0 <___vfprintf_internal_r+0xd0c>
 2005794:	18c00204 	addi	r3,r3,8
 2005798:	843ffc04 	addi	r16,r16,-16
 200579c:	9c02130e 	bge	r19,r16,2005fec <___vfprintf_internal_r+0x1558>
 20057a0:	94800404 	addi	r18,r18,16
 20057a4:	8c400044 	addi	r17,r17,1
 20057a8:	1f000015 	stw	fp,0(r3)
 20057ac:	1cc00115 	stw	r19,4(r3)
 20057b0:	dc800e15 	stw	r18,56(sp)
 20057b4:	dc400d15 	stw	r17,52(sp)
 20057b8:	a47ff60e 	bge	r20,r17,2005794 <___vfprintf_internal_r+0xd00>
 20057bc:	d9014f17 	ldw	r4,1340(sp)
 20057c0:	b00b883a 	mov	r5,r22
 20057c4:	d9800c04 	addi	r6,sp,48
 20057c8:	2004a3c0 	call	2004a3c <__sprint_r>
 20057cc:	103e691e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20057d0:	dc800e17 	ldw	r18,56(sp)
 20057d4:	dc400d17 	ldw	r17,52(sp)
 20057d8:	d8c01904 	addi	r3,sp,100
 20057dc:	003fee06 	br	2005798 <___vfprintf_internal_r+0xd04>
 20057e0:	d8814717 	ldw	r2,1308(sp)
 20057e4:	143fffc4 	addi	r16,r2,-1
 20057e8:	043e970e 	bge	zero,r16,2005248 <___vfprintf_internal_r+0x7b4>
 20057ec:	00800404 	movi	r2,16
 20057f0:	1400180e 	bge	r2,r16,2005854 <___vfprintf_internal_r+0xdc0>
 20057f4:	1029883a 	mov	r20,r2
 20057f8:	07008074 	movhi	fp,513
 20057fc:	e7053184 	addi	fp,fp,5318
 2005800:	054001c4 	movi	r21,7
 2005804:	00000306 	br	2005814 <___vfprintf_internal_r+0xd80>
 2005808:	9cc00204 	addi	r19,r19,8
 200580c:	843ffc04 	addi	r16,r16,-16
 2005810:	a400120e 	bge	r20,r16,200585c <___vfprintf_internal_r+0xdc8>
 2005814:	94800404 	addi	r18,r18,16
 2005818:	8c400044 	addi	r17,r17,1
 200581c:	9f000015 	stw	fp,0(r19)
 2005820:	9d000115 	stw	r20,4(r19)
 2005824:	dc800e15 	stw	r18,56(sp)
 2005828:	dc400d15 	stw	r17,52(sp)
 200582c:	ac7ff60e 	bge	r21,r17,2005808 <___vfprintf_internal_r+0xd74>
 2005830:	d9014f17 	ldw	r4,1340(sp)
 2005834:	b00b883a 	mov	r5,r22
 2005838:	d9800c04 	addi	r6,sp,48
 200583c:	2004a3c0 	call	2004a3c <__sprint_r>
 2005840:	103e4c1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005844:	dc800e17 	ldw	r18,56(sp)
 2005848:	dc400d17 	ldw	r17,52(sp)
 200584c:	dcc01904 	addi	r19,sp,100
 2005850:	003fee06 	br	200580c <___vfprintf_internal_r+0xd78>
 2005854:	07008074 	movhi	fp,513
 2005858:	e7053184 	addi	fp,fp,5318
 200585c:	9425883a 	add	r18,r18,r16
 2005860:	8c400044 	addi	r17,r17,1
 2005864:	008001c4 	movi	r2,7
 2005868:	9f000015 	stw	fp,0(r19)
 200586c:	9c000115 	stw	r16,4(r19)
 2005870:	dc800e15 	stw	r18,56(sp)
 2005874:	dc400d15 	stw	r17,52(sp)
 2005878:	147e720e 	bge	r2,r17,2005244 <___vfprintf_internal_r+0x7b0>
 200587c:	d9014f17 	ldw	r4,1340(sp)
 2005880:	b00b883a 	mov	r5,r22
 2005884:	d9800c04 	addi	r6,sp,48
 2005888:	2004a3c0 	call	2004a3c <__sprint_r>
 200588c:	103e391e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005890:	dc800e17 	ldw	r18,56(sp)
 2005894:	dc400d17 	ldw	r17,52(sp)
 2005898:	dcc01904 	addi	r19,sp,100
 200589c:	003e6a06 	br	2005248 <___vfprintf_internal_r+0x7b4>
 20058a0:	d9014f17 	ldw	r4,1340(sp)
 20058a4:	b00b883a 	mov	r5,r22
 20058a8:	d9800c04 	addi	r6,sp,48
 20058ac:	d9c15115 	stw	r7,1348(sp)
 20058b0:	2004a3c0 	call	2004a3c <__sprint_r>
 20058b4:	d9c15117 	ldw	r7,1348(sp)
 20058b8:	103e2e1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20058bc:	dc800e17 	ldw	r18,56(sp)
 20058c0:	dc400d17 	ldw	r17,52(sp)
 20058c4:	dd401904 	addi	r21,sp,100
 20058c8:	003dba06 	br	2004fb4 <___vfprintf_internal_r+0x520>
 20058cc:	d9014f17 	ldw	r4,1340(sp)
 20058d0:	b00b883a 	mov	r5,r22
 20058d4:	d9800c04 	addi	r6,sp,48
 20058d8:	2004a3c0 	call	2004a3c <__sprint_r>
 20058dc:	103e251e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20058e0:	dc800e17 	ldw	r18,56(sp)
 20058e4:	dc400d17 	ldw	r17,52(sp)
 20058e8:	dcc01904 	addi	r19,sp,100
 20058ec:	003e4206 	br	20051f8 <___vfprintf_internal_r+0x764>
 20058f0:	d9014f17 	ldw	r4,1340(sp)
 20058f4:	b00b883a 	mov	r5,r22
 20058f8:	d9800c04 	addi	r6,sp,48
 20058fc:	2004a3c0 	call	2004a3c <__sprint_r>
 2005900:	103e1c1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005904:	dc800e17 	ldw	r18,56(sp)
 2005908:	dc400d17 	ldw	r17,52(sp)
 200590c:	d8c01904 	addi	r3,sp,100
 2005910:	003e2e06 	br	20051cc <___vfprintf_internal_r+0x738>
 2005914:	d9414c17 	ldw	r5,1328(sp)
 2005918:	2880004c 	andi	r2,r5,1
 200591c:	1005003a 	cmpeq	r2,r2,zero
 2005920:	103dda1e 	bne	r2,zero,200508c <___vfprintf_internal_r+0x5f8>
 2005924:	003e9f06 	br	20053a4 <___vfprintf_internal_r+0x910>
 2005928:	d8c14117 	ldw	r3,1284(sp)
 200592c:	9125883a 	add	r18,r18,r4
 2005930:	8c400044 	addi	r17,r17,1
 2005934:	008001c4 	movi	r2,7
 2005938:	a8c00015 	stw	r3,0(r21)
 200593c:	a9000115 	stw	r4,4(r21)
 2005940:	dc800e15 	stw	r18,56(sp)
 2005944:	dc400d15 	stw	r17,52(sp)
 2005948:	14426c16 	blt	r2,r17,20062fc <___vfprintf_internal_r+0x1868>
 200594c:	a8c00204 	addi	r3,r21,8
 2005950:	d9414917 	ldw	r5,1316(sp)
 2005954:	00800044 	movi	r2,1
 2005958:	94800044 	addi	r18,r18,1
 200595c:	8c400044 	addi	r17,r17,1
 2005960:	18800115 	stw	r2,4(r3)
 2005964:	008001c4 	movi	r2,7
 2005968:	19400015 	stw	r5,0(r3)
 200596c:	dc800e15 	stw	r18,56(sp)
 2005970:	dc400d15 	stw	r17,52(sp)
 2005974:	2021883a 	mov	r16,r4
 2005978:	14425616 	blt	r2,r17,20062d4 <___vfprintf_internal_r+0x1840>
 200597c:	19400204 	addi	r5,r3,8
 2005980:	d9814717 	ldw	r6,1308(sp)
 2005984:	8c400044 	addi	r17,r17,1
 2005988:	dc400d15 	stw	r17,52(sp)
 200598c:	3107c83a 	sub	r3,r6,r4
 2005990:	d9014117 	ldw	r4,1284(sp)
 2005994:	90e5883a 	add	r18,r18,r3
 2005998:	28c00115 	stw	r3,4(r5)
 200599c:	8105883a 	add	r2,r16,r4
 20059a0:	28800015 	stw	r2,0(r5)
 20059a4:	008001c4 	movi	r2,7
 20059a8:	dc800e15 	stw	r18,56(sp)
 20059ac:	147f1d16 	blt	r2,r17,2005624 <___vfprintf_internal_r+0xb90>
 20059b0:	28c00204 	addi	r3,r5,8
 20059b4:	003db506 	br	200508c <___vfprintf_internal_r+0x5f8>
 20059b8:	3c000017 	ldw	r16,0(r7)
 20059bc:	3c400117 	ldw	r17,4(r7)
 20059c0:	39800204 	addi	r6,r7,8
 20059c4:	01000044 	movi	r4,1
 20059c8:	d9814015 	stw	r6,1280(sp)
 20059cc:	d8000405 	stb	zero,16(sp)
 20059d0:	003ebe06 	br	20054cc <___vfprintf_internal_r+0xa38>
 20059d4:	3c000017 	ldw	r16,0(r7)
 20059d8:	3c400117 	ldw	r17,4(r7)
 20059dc:	38800204 	addi	r2,r7,8
 20059e0:	d8814015 	stw	r2,1280(sp)
 20059e4:	003eb706 	br	20054c4 <___vfprintf_internal_r+0xa30>
 20059e8:	3c000017 	ldw	r16,0(r7)
 20059ec:	3c400117 	ldw	r17,4(r7)
 20059f0:	39000204 	addi	r4,r7,8
 20059f4:	d9014015 	stw	r4,1280(sp)
 20059f8:	0009883a 	mov	r4,zero
 20059fc:	d8000405 	stb	zero,16(sp)
 2005a00:	003eb206 	br	20054cc <___vfprintf_internal_r+0xa38>
 2005a04:	38c00017 	ldw	r3,0(r7)
 2005a08:	39c00104 	addi	r7,r7,4
 2005a0c:	d8c14a15 	stw	r3,1320(sp)
 2005a10:	1800d70e 	bge	r3,zero,2005d70 <___vfprintf_internal_r+0x12dc>
 2005a14:	00c7c83a 	sub	r3,zero,r3
 2005a18:	d8c14a15 	stw	r3,1320(sp)
 2005a1c:	d9014c17 	ldw	r4,1328(sp)
 2005a20:	b8c00007 	ldb	r3,0(r23)
 2005a24:	21000114 	ori	r4,r4,4
 2005a28:	d9014c15 	stw	r4,1328(sp)
 2005a2c:	003c9806 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005a30:	d9814c17 	ldw	r6,1328(sp)
 2005a34:	3080080c 	andi	r2,r6,32
 2005a38:	1001f626 	beq	r2,zero,2006214 <___vfprintf_internal_r+0x1780>
 2005a3c:	d9014b17 	ldw	r4,1324(sp)
 2005a40:	38800017 	ldw	r2,0(r7)
 2005a44:	39c00104 	addi	r7,r7,4
 2005a48:	d9c14015 	stw	r7,1280(sp)
 2005a4c:	2007d7fa 	srai	r3,r4,31
 2005a50:	d9c14017 	ldw	r7,1280(sp)
 2005a54:	11000015 	stw	r4,0(r2)
 2005a58:	10c00115 	stw	r3,4(r2)
 2005a5c:	003c6906 	br	2004c04 <___vfprintf_internal_r+0x170>
 2005a60:	b8c00007 	ldb	r3,0(r23)
 2005a64:	00801b04 	movi	r2,108
 2005a68:	18825526 	beq	r3,r2,20063c0 <___vfprintf_internal_r+0x192c>
 2005a6c:	d9414c17 	ldw	r5,1328(sp)
 2005a70:	29400414 	ori	r5,r5,16
 2005a74:	d9414c15 	stw	r5,1328(sp)
 2005a78:	003c8506 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005a7c:	d9814c17 	ldw	r6,1328(sp)
 2005a80:	b8c00007 	ldb	r3,0(r23)
 2005a84:	31800814 	ori	r6,r6,32
 2005a88:	d9814c15 	stw	r6,1328(sp)
 2005a8c:	003c8006 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005a90:	d8814c17 	ldw	r2,1328(sp)
 2005a94:	3c000017 	ldw	r16,0(r7)
 2005a98:	00c01e04 	movi	r3,120
 2005a9c:	10800094 	ori	r2,r2,2
 2005aa0:	d8814c15 	stw	r2,1328(sp)
 2005aa4:	39c00104 	addi	r7,r7,4
 2005aa8:	01408074 	movhi	r5,513
 2005aac:	29451b04 	addi	r5,r5,5228
 2005ab0:	00800c04 	movi	r2,48
 2005ab4:	0023883a 	mov	r17,zero
 2005ab8:	01000084 	movi	r4,2
 2005abc:	d9c14015 	stw	r7,1280(sp)
 2005ac0:	d8c14d15 	stw	r3,1332(sp)
 2005ac4:	d9414415 	stw	r5,1296(sp)
 2005ac8:	d8800445 	stb	r2,17(sp)
 2005acc:	d8c00485 	stb	r3,18(sp)
 2005ad0:	d8000405 	stb	zero,16(sp)
 2005ad4:	003e7d06 	br	20054cc <___vfprintf_internal_r+0xa38>
 2005ad8:	d8814c17 	ldw	r2,1328(sp)
 2005adc:	b8c00007 	ldb	r3,0(r23)
 2005ae0:	10801014 	ori	r2,r2,64
 2005ae4:	d8814c15 	stw	r2,1328(sp)
 2005ae8:	003c6906 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005aec:	d9414c17 	ldw	r5,1328(sp)
 2005af0:	2880020c 	andi	r2,r5,8
 2005af4:	1001e526 	beq	r2,zero,200628c <___vfprintf_internal_r+0x17f8>
 2005af8:	39800017 	ldw	r6,0(r7)
 2005afc:	38800204 	addi	r2,r7,8
 2005b00:	d8814015 	stw	r2,1280(sp)
 2005b04:	d9814215 	stw	r6,1288(sp)
 2005b08:	39c00117 	ldw	r7,4(r7)
 2005b0c:	d9c14315 	stw	r7,1292(sp)
 2005b10:	d9014217 	ldw	r4,1288(sp)
 2005b14:	d9414317 	ldw	r5,1292(sp)
 2005b18:	200b4ac0 	call	200b4ac <__isinfd>
 2005b1c:	10021d26 	beq	r2,zero,2006394 <___vfprintf_internal_r+0x1900>
 2005b20:	d9014217 	ldw	r4,1288(sp)
 2005b24:	d9414317 	ldw	r5,1292(sp)
 2005b28:	000d883a 	mov	r6,zero
 2005b2c:	000f883a 	mov	r7,zero
 2005b30:	200d0000 	call	200d000 <__ltdf2>
 2005b34:	1002d016 	blt	r2,zero,2006678 <___vfprintf_internal_r+0x1be4>
 2005b38:	d9414d17 	ldw	r5,1332(sp)
 2005b3c:	008011c4 	movi	r2,71
 2005b40:	11421016 	blt	r2,r5,2006384 <___vfprintf_internal_r+0x18f0>
 2005b44:	01808074 	movhi	r6,513
 2005b48:	31852004 	addi	r6,r6,5248
 2005b4c:	d9814115 	stw	r6,1284(sp)
 2005b50:	d9014c17 	ldw	r4,1328(sp)
 2005b54:	00c000c4 	movi	r3,3
 2005b58:	00bfdfc4 	movi	r2,-129
 2005b5c:	2088703a 	and	r4,r4,r2
 2005b60:	180f883a 	mov	r7,r3
 2005b64:	d8c14515 	stw	r3,1300(sp)
 2005b68:	d9014c15 	stw	r4,1328(sp)
 2005b6c:	d8014615 	stw	zero,1304(sp)
 2005b70:	003e6a06 	br	200551c <___vfprintf_internal_r+0xa88>
 2005b74:	38800017 	ldw	r2,0(r7)
 2005b78:	00c00044 	movi	r3,1
 2005b7c:	39c00104 	addi	r7,r7,4
 2005b80:	d9c14015 	stw	r7,1280(sp)
 2005b84:	d9000f04 	addi	r4,sp,60
 2005b88:	180f883a 	mov	r7,r3
 2005b8c:	d8c14515 	stw	r3,1300(sp)
 2005b90:	d9014115 	stw	r4,1284(sp)
 2005b94:	d8800f05 	stb	r2,60(sp)
 2005b98:	d8000405 	stb	zero,16(sp)
 2005b9c:	003cac06 	br	2004e50 <___vfprintf_internal_r+0x3bc>
 2005ba0:	01408074 	movhi	r5,513
 2005ba4:	29452604 	addi	r5,r5,5272
 2005ba8:	d9414415 	stw	r5,1296(sp)
 2005bac:	d9814c17 	ldw	r6,1328(sp)
 2005bb0:	3080080c 	andi	r2,r6,32
 2005bb4:	1000ff26 	beq	r2,zero,2005fb4 <___vfprintf_internal_r+0x1520>
 2005bb8:	3c000017 	ldw	r16,0(r7)
 2005bbc:	3c400117 	ldw	r17,4(r7)
 2005bc0:	38800204 	addi	r2,r7,8
 2005bc4:	d8814015 	stw	r2,1280(sp)
 2005bc8:	d9414c17 	ldw	r5,1328(sp)
 2005bcc:	2880004c 	andi	r2,r5,1
 2005bd0:	1005003a 	cmpeq	r2,r2,zero
 2005bd4:	1000b91e 	bne	r2,zero,2005ebc <___vfprintf_internal_r+0x1428>
 2005bd8:	8444b03a 	or	r2,r16,r17
 2005bdc:	1000b726 	beq	r2,zero,2005ebc <___vfprintf_internal_r+0x1428>
 2005be0:	d9814d17 	ldw	r6,1332(sp)
 2005be4:	29400094 	ori	r5,r5,2
 2005be8:	00800c04 	movi	r2,48
 2005bec:	01000084 	movi	r4,2
 2005bf0:	d9414c15 	stw	r5,1328(sp)
 2005bf4:	d8800445 	stb	r2,17(sp)
 2005bf8:	d9800485 	stb	r6,18(sp)
 2005bfc:	d8000405 	stb	zero,16(sp)
 2005c00:	003e3206 	br	20054cc <___vfprintf_internal_r+0xa38>
 2005c04:	01808074 	movhi	r6,513
 2005c08:	31851b04 	addi	r6,r6,5228
 2005c0c:	d9814415 	stw	r6,1296(sp)
 2005c10:	003fe606 	br	2005bac <___vfprintf_internal_r+0x1118>
 2005c14:	00800ac4 	movi	r2,43
 2005c18:	d8800405 	stb	r2,16(sp)
 2005c1c:	b8c00007 	ldb	r3,0(r23)
 2005c20:	003c1b06 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005c24:	d8814c17 	ldw	r2,1328(sp)
 2005c28:	b8c00007 	ldb	r3,0(r23)
 2005c2c:	10800054 	ori	r2,r2,1
 2005c30:	d8814c15 	stw	r2,1328(sp)
 2005c34:	003c1606 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005c38:	d8800407 	ldb	r2,16(sp)
 2005c3c:	10004c1e 	bne	r2,zero,2005d70 <___vfprintf_internal_r+0x12dc>
 2005c40:	00800804 	movi	r2,32
 2005c44:	d8800405 	stb	r2,16(sp)
 2005c48:	b8c00007 	ldb	r3,0(r23)
 2005c4c:	003c1006 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005c50:	d9814c17 	ldw	r6,1328(sp)
 2005c54:	b8c00007 	ldb	r3,0(r23)
 2005c58:	31800214 	ori	r6,r6,8
 2005c5c:	d9814c15 	stw	r6,1328(sp)
 2005c60:	003c0b06 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005c64:	0009883a 	mov	r4,zero
 2005c68:	04000244 	movi	r16,9
 2005c6c:	01400284 	movi	r5,10
 2005c70:	d9c15115 	stw	r7,1348(sp)
 2005c74:	20040f00 	call	20040f0 <__mulsi3>
 2005c78:	b9000007 	ldb	r4,0(r23)
 2005c7c:	d8c14d17 	ldw	r3,1332(sp)
 2005c80:	bdc00044 	addi	r23,r23,1
 2005c84:	d9014d15 	stw	r4,1332(sp)
 2005c88:	d9414d17 	ldw	r5,1332(sp)
 2005c8c:	1885883a 	add	r2,r3,r2
 2005c90:	113ff404 	addi	r4,r2,-48
 2005c94:	28bff404 	addi	r2,r5,-48
 2005c98:	d9c15117 	ldw	r7,1348(sp)
 2005c9c:	80bff32e 	bgeu	r16,r2,2005c6c <___vfprintf_internal_r+0x11d8>
 2005ca0:	d9014a15 	stw	r4,1320(sp)
 2005ca4:	003bfc06 	br	2004c98 <___vfprintf_internal_r+0x204>
 2005ca8:	d8814c17 	ldw	r2,1328(sp)
 2005cac:	b8c00007 	ldb	r3,0(r23)
 2005cb0:	10802014 	ori	r2,r2,128
 2005cb4:	d8814c15 	stw	r2,1328(sp)
 2005cb8:	003bf506 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005cbc:	b8c00007 	ldb	r3,0(r23)
 2005cc0:	00800a84 	movi	r2,42
 2005cc4:	bdc00044 	addi	r23,r23,1
 2005cc8:	18831826 	beq	r3,r2,200692c <___vfprintf_internal_r+0x1e98>
 2005ccc:	d8c14d15 	stw	r3,1332(sp)
 2005cd0:	18bff404 	addi	r2,r3,-48
 2005cd4:	00c00244 	movi	r3,9
 2005cd8:	18827b36 	bltu	r3,r2,20066c8 <___vfprintf_internal_r+0x1c34>
 2005cdc:	1821883a 	mov	r16,r3
 2005ce0:	0009883a 	mov	r4,zero
 2005ce4:	01400284 	movi	r5,10
 2005ce8:	d9c15115 	stw	r7,1348(sp)
 2005cec:	20040f00 	call	20040f0 <__mulsi3>
 2005cf0:	d9414d17 	ldw	r5,1332(sp)
 2005cf4:	b9800007 	ldb	r6,0(r23)
 2005cf8:	d9c15117 	ldw	r7,1348(sp)
 2005cfc:	1145883a 	add	r2,r2,r5
 2005d00:	113ff404 	addi	r4,r2,-48
 2005d04:	30bff404 	addi	r2,r6,-48
 2005d08:	d9814d15 	stw	r6,1332(sp)
 2005d0c:	bdc00044 	addi	r23,r23,1
 2005d10:	80bff42e 	bgeu	r16,r2,2005ce4 <___vfprintf_internal_r+0x1250>
 2005d14:	2027883a 	mov	r19,r4
 2005d18:	203bdf0e 	bge	r4,zero,2004c98 <___vfprintf_internal_r+0x204>
 2005d1c:	04ffffc4 	movi	r19,-1
 2005d20:	003bdd06 	br	2004c98 <___vfprintf_internal_r+0x204>
 2005d24:	d8000405 	stb	zero,16(sp)
 2005d28:	39800017 	ldw	r6,0(r7)
 2005d2c:	39c00104 	addi	r7,r7,4
 2005d30:	d9c14015 	stw	r7,1280(sp)
 2005d34:	d9814115 	stw	r6,1284(sp)
 2005d38:	3001c926 	beq	r6,zero,2006460 <___vfprintf_internal_r+0x19cc>
 2005d3c:	98000e16 	blt	r19,zero,2005d78 <___vfprintf_internal_r+0x12e4>
 2005d40:	d9014117 	ldw	r4,1284(sp)
 2005d44:	000b883a 	mov	r5,zero
 2005d48:	980d883a 	mov	r6,r19
 2005d4c:	2009bc80 	call	2009bc8 <memchr>
 2005d50:	10025926 	beq	r2,zero,20066b8 <___vfprintf_internal_r+0x1c24>
 2005d54:	d8c14117 	ldw	r3,1284(sp)
 2005d58:	10cfc83a 	sub	r7,r2,r3
 2005d5c:	99c19e16 	blt	r19,r7,20063d8 <___vfprintf_internal_r+0x1944>
 2005d60:	d9c14515 	stw	r7,1300(sp)
 2005d64:	38000916 	blt	r7,zero,2005d8c <___vfprintf_internal_r+0x12f8>
 2005d68:	d8014615 	stw	zero,1304(sp)
 2005d6c:	003deb06 	br	200551c <___vfprintf_internal_r+0xa88>
 2005d70:	b8c00007 	ldb	r3,0(r23)
 2005d74:	003bc606 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2005d78:	d9014117 	ldw	r4,1284(sp)
 2005d7c:	20049c80 	call	20049c8 <strlen>
 2005d80:	d8814515 	stw	r2,1300(sp)
 2005d84:	100f883a 	mov	r7,r2
 2005d88:	103ff70e 	bge	r2,zero,2005d68 <___vfprintf_internal_r+0x12d4>
 2005d8c:	d8014515 	stw	zero,1300(sp)
 2005d90:	d8014615 	stw	zero,1304(sp)
 2005d94:	003de106 	br	200551c <___vfprintf_internal_r+0xa88>
 2005d98:	20c03fcc 	andi	r3,r4,255
 2005d9c:	00800044 	movi	r2,1
 2005da0:	18802d26 	beq	r3,r2,2005e58 <___vfprintf_internal_r+0x13c4>
 2005da4:	18800e36 	bltu	r3,r2,2005de0 <___vfprintf_internal_r+0x134c>
 2005da8:	00800084 	movi	r2,2
 2005dac:	1880fa26 	beq	r3,r2,2006198 <___vfprintf_internal_r+0x1704>
 2005db0:	01008074 	movhi	r4,513
 2005db4:	21052b04 	addi	r4,r4,5292
 2005db8:	20049c80 	call	20049c8 <strlen>
 2005dbc:	100f883a 	mov	r7,r2
 2005dc0:	dcc14515 	stw	r19,1300(sp)
 2005dc4:	9880010e 	bge	r19,r2,2005dcc <___vfprintf_internal_r+0x1338>
 2005dc8:	d8814515 	stw	r2,1300(sp)
 2005dcc:	00808074 	movhi	r2,513
 2005dd0:	10852b04 	addi	r2,r2,5292
 2005dd4:	dcc14615 	stw	r19,1304(sp)
 2005dd8:	d8814115 	stw	r2,1284(sp)
 2005ddc:	003dcf06 	br	200551c <___vfprintf_internal_r+0xa88>
 2005de0:	d9401904 	addi	r5,sp,100
 2005de4:	dd000f04 	addi	r20,sp,60
 2005de8:	d9414115 	stw	r5,1284(sp)
 2005dec:	880a977a 	slli	r5,r17,29
 2005df0:	d9814117 	ldw	r6,1284(sp)
 2005df4:	8004d0fa 	srli	r2,r16,3
 2005df8:	8806d0fa 	srli	r3,r17,3
 2005dfc:	810001cc 	andi	r4,r16,7
 2005e00:	2884b03a 	or	r2,r5,r2
 2005e04:	31bfffc4 	addi	r6,r6,-1
 2005e08:	21000c04 	addi	r4,r4,48
 2005e0c:	d9814115 	stw	r6,1284(sp)
 2005e10:	10cab03a 	or	r5,r2,r3
 2005e14:	31000005 	stb	r4,0(r6)
 2005e18:	1021883a 	mov	r16,r2
 2005e1c:	1823883a 	mov	r17,r3
 2005e20:	283ff21e 	bne	r5,zero,2005dec <___vfprintf_internal_r+0x1358>
 2005e24:	d8c14c17 	ldw	r3,1328(sp)
 2005e28:	1880004c 	andi	r2,r3,1
 2005e2c:	1005003a 	cmpeq	r2,r2,zero
 2005e30:	103db31e 	bne	r2,zero,2005500 <___vfprintf_internal_r+0xa6c>
 2005e34:	20803fcc 	andi	r2,r4,255
 2005e38:	1080201c 	xori	r2,r2,128
 2005e3c:	10bfe004 	addi	r2,r2,-128
 2005e40:	00c00c04 	movi	r3,48
 2005e44:	10fdae26 	beq	r2,r3,2005500 <___vfprintf_internal_r+0xa6c>
 2005e48:	31bfffc4 	addi	r6,r6,-1
 2005e4c:	d9814115 	stw	r6,1284(sp)
 2005e50:	30c00005 	stb	r3,0(r6)
 2005e54:	003daa06 	br	2005500 <___vfprintf_internal_r+0xa6c>
 2005e58:	88800068 	cmpgeui	r2,r17,1
 2005e5c:	10002c1e 	bne	r2,zero,2005f10 <___vfprintf_internal_r+0x147c>
 2005e60:	8800021e 	bne	r17,zero,2005e6c <___vfprintf_internal_r+0x13d8>
 2005e64:	00800244 	movi	r2,9
 2005e68:	14002936 	bltu	r2,r16,2005f10 <___vfprintf_internal_r+0x147c>
 2005e6c:	d90018c4 	addi	r4,sp,99
 2005e70:	dd000f04 	addi	r20,sp,60
 2005e74:	d9014115 	stw	r4,1284(sp)
 2005e78:	d9014117 	ldw	r4,1284(sp)
 2005e7c:	80800c04 	addi	r2,r16,48
 2005e80:	20800005 	stb	r2,0(r4)
 2005e84:	003d9e06 	br	2005500 <___vfprintf_internal_r+0xa6c>
 2005e88:	dc400d17 	ldw	r17,52(sp)
 2005e8c:	07008074 	movhi	fp,513
 2005e90:	e7053184 	addi	fp,fp,5318
 2005e94:	9425883a 	add	r18,r18,r16
 2005e98:	8c400044 	addi	r17,r17,1
 2005e9c:	008001c4 	movi	r2,7
 2005ea0:	1f000015 	stw	fp,0(r3)
 2005ea4:	1c000115 	stw	r16,4(r3)
 2005ea8:	dc800e15 	stw	r18,56(sp)
 2005eac:	dc400d15 	stw	r17,52(sp)
 2005eb0:	147ddc16 	blt	r2,r17,2005624 <___vfprintf_internal_r+0xb90>
 2005eb4:	18c00204 	addi	r3,r3,8
 2005eb8:	003c7406 	br	200508c <___vfprintf_internal_r+0x5f8>
 2005ebc:	01000084 	movi	r4,2
 2005ec0:	d8000405 	stb	zero,16(sp)
 2005ec4:	003d8106 	br	20054cc <___vfprintf_internal_r+0xa38>
 2005ec8:	d9814c17 	ldw	r6,1328(sp)
 2005ecc:	30c4703a 	and	r2,r6,r3
 2005ed0:	1005003a 	cmpeq	r2,r2,zero
 2005ed4:	103cb326 	beq	r2,zero,20051a4 <___vfprintf_internal_r+0x710>
 2005ed8:	d9014117 	ldw	r4,1284(sp)
 2005edc:	94800044 	addi	r18,r18,1
 2005ee0:	8c400044 	addi	r17,r17,1
 2005ee4:	008001c4 	movi	r2,7
 2005ee8:	a9000015 	stw	r4,0(r21)
 2005eec:	a8c00115 	stw	r3,4(r21)
 2005ef0:	dc800e15 	stw	r18,56(sp)
 2005ef4:	dc400d15 	stw	r17,52(sp)
 2005ef8:	147e6016 	blt	r2,r17,200587c <___vfprintf_internal_r+0xde8>
 2005efc:	acc00204 	addi	r19,r21,8
 2005f00:	003cd106 	br	2005248 <___vfprintf_internal_r+0x7b4>
 2005f04:	07008074 	movhi	fp,513
 2005f08:	e7053184 	addi	fp,fp,5318
 2005f0c:	003c4906 	br	2005034 <___vfprintf_internal_r+0x5a0>
 2005f10:	dd000f04 	addi	r20,sp,60
 2005f14:	dc801904 	addi	r18,sp,100
 2005f18:	8009883a 	mov	r4,r16
 2005f1c:	880b883a 	mov	r5,r17
 2005f20:	01800284 	movi	r6,10
 2005f24:	000f883a 	mov	r7,zero
 2005f28:	200c1ec0 	call	200c1ec <__umoddi3>
 2005f2c:	12000c04 	addi	r8,r2,48
 2005f30:	94bfffc4 	addi	r18,r18,-1
 2005f34:	8009883a 	mov	r4,r16
 2005f38:	880b883a 	mov	r5,r17
 2005f3c:	01800284 	movi	r6,10
 2005f40:	000f883a 	mov	r7,zero
 2005f44:	92000005 	stb	r8,0(r18)
 2005f48:	200bb800 	call	200bb80 <__udivdi3>
 2005f4c:	1009883a 	mov	r4,r2
 2005f50:	1021883a 	mov	r16,r2
 2005f54:	18800068 	cmpgeui	r2,r3,1
 2005f58:	1823883a 	mov	r17,r3
 2005f5c:	103fee1e 	bne	r2,zero,2005f18 <___vfprintf_internal_r+0x1484>
 2005f60:	1800021e 	bne	r3,zero,2005f6c <___vfprintf_internal_r+0x14d8>
 2005f64:	00800244 	movi	r2,9
 2005f68:	113feb36 	bltu	r2,r4,2005f18 <___vfprintf_internal_r+0x1484>
 2005f6c:	94bfffc4 	addi	r18,r18,-1
 2005f70:	dc814115 	stw	r18,1284(sp)
 2005f74:	003fc006 	br	2005e78 <___vfprintf_internal_r+0x13e4>
 2005f78:	d9014c17 	ldw	r4,1328(sp)
 2005f7c:	2080004c 	andi	r2,r4,1
 2005f80:	10009a1e 	bne	r2,zero,20061ec <___vfprintf_internal_r+0x1758>
 2005f84:	d9401904 	addi	r5,sp,100
 2005f88:	dd000f04 	addi	r20,sp,60
 2005f8c:	d9414115 	stw	r5,1284(sp)
 2005f90:	003d5b06 	br	2005500 <___vfprintf_internal_r+0xa6c>
 2005f94:	d9014f17 	ldw	r4,1340(sp)
 2005f98:	b00b883a 	mov	r5,r22
 2005f9c:	d9800c04 	addi	r6,sp,48
 2005fa0:	2004a3c0 	call	2004a3c <__sprint_r>
 2005fa4:	103c731e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2005fa8:	dc800e17 	ldw	r18,56(sp)
 2005fac:	d8c01904 	addi	r3,sp,100
 2005fb0:	003cf906 	br	2005398 <___vfprintf_internal_r+0x904>
 2005fb4:	d8c14c17 	ldw	r3,1328(sp)
 2005fb8:	1880040c 	andi	r2,r3,16
 2005fbc:	1000711e 	bne	r2,zero,2006184 <___vfprintf_internal_r+0x16f0>
 2005fc0:	d9014c17 	ldw	r4,1328(sp)
 2005fc4:	2080100c 	andi	r2,r4,64
 2005fc8:	10006e26 	beq	r2,zero,2006184 <___vfprintf_internal_r+0x16f0>
 2005fcc:	3c00000b 	ldhu	r16,0(r7)
 2005fd0:	0023883a 	mov	r17,zero
 2005fd4:	39c00104 	addi	r7,r7,4
 2005fd8:	d9c14015 	stw	r7,1280(sp)
 2005fdc:	003efa06 	br	2005bc8 <___vfprintf_internal_r+0x1134>
 2005fe0:	dc400d17 	ldw	r17,52(sp)
 2005fe4:	07008074 	movhi	fp,513
 2005fe8:	e7053184 	addi	fp,fp,5318
 2005fec:	9425883a 	add	r18,r18,r16
 2005ff0:	8c400044 	addi	r17,r17,1
 2005ff4:	008001c4 	movi	r2,7
 2005ff8:	1f000015 	stw	fp,0(r3)
 2005ffc:	1c000115 	stw	r16,4(r3)
 2006000:	dc800e15 	stw	r18,56(sp)
 2006004:	dc400d15 	stw	r17,52(sp)
 2006008:	147d7016 	blt	r2,r17,20055cc <___vfprintf_internal_r+0xb38>
 200600c:	18c00204 	addi	r3,r3,8
 2006010:	003d7506 	br	20055e8 <___vfprintf_internal_r+0xb54>
 2006014:	dc800e17 	ldw	r18,56(sp)
 2006018:	dc400d17 	ldw	r17,52(sp)
 200601c:	07008074 	movhi	fp,513
 2006020:	e7053584 	addi	fp,fp,5334
 2006024:	003bba06 	br	2004f10 <___vfprintf_internal_r+0x47c>
 2006028:	d9014f17 	ldw	r4,1340(sp)
 200602c:	b00b883a 	mov	r5,r22
 2006030:	d9800c04 	addi	r6,sp,48
 2006034:	2004a3c0 	call	2004a3c <__sprint_r>
 2006038:	103c4e1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 200603c:	dc800e17 	ldw	r18,56(sp)
 2006040:	d8c01904 	addi	r3,sp,100
 2006044:	003ce306 	br	20053d4 <___vfprintf_internal_r+0x940>
 2006048:	3c000017 	ldw	r16,0(r7)
 200604c:	0009883a 	mov	r4,zero
 2006050:	39c00104 	addi	r7,r7,4
 2006054:	0023883a 	mov	r17,zero
 2006058:	d9c14015 	stw	r7,1280(sp)
 200605c:	d8000405 	stb	zero,16(sp)
 2006060:	003d1a06 	br	20054cc <___vfprintf_internal_r+0xa38>
 2006064:	38800017 	ldw	r2,0(r7)
 2006068:	39c00104 	addi	r7,r7,4
 200606c:	d9c14015 	stw	r7,1280(sp)
 2006070:	1023d7fa 	srai	r17,r2,31
 2006074:	1021883a 	mov	r16,r2
 2006078:	003d1206 	br	20054c4 <___vfprintf_internal_r+0xa30>
 200607c:	3c000017 	ldw	r16,0(r7)
 2006080:	01000044 	movi	r4,1
 2006084:	39c00104 	addi	r7,r7,4
 2006088:	0023883a 	mov	r17,zero
 200608c:	d9c14015 	stw	r7,1280(sp)
 2006090:	d8000405 	stb	zero,16(sp)
 2006094:	003d0d06 	br	20054cc <___vfprintf_internal_r+0xa38>
 2006098:	00808074 	movhi	r2,513
 200609c:	10847a04 	addi	r2,r2,4584
 20060a0:	94800044 	addi	r18,r18,1
 20060a4:	8c400044 	addi	r17,r17,1
 20060a8:	a8800015 	stw	r2,0(r21)
 20060ac:	00c00044 	movi	r3,1
 20060b0:	008001c4 	movi	r2,7
 20060b4:	a8c00115 	stw	r3,4(r21)
 20060b8:	dc800e15 	stw	r18,56(sp)
 20060bc:	dc400d15 	stw	r17,52(sp)
 20060c0:	1440ca16 	blt	r2,r17,20063ec <___vfprintf_internal_r+0x1958>
 20060c4:	a8c00204 	addi	r3,r21,8
 20060c8:	2000061e 	bne	r4,zero,20060e4 <___vfprintf_internal_r+0x1650>
 20060cc:	d9414717 	ldw	r5,1308(sp)
 20060d0:	2800041e 	bne	r5,zero,20060e4 <___vfprintf_internal_r+0x1650>
 20060d4:	d9814c17 	ldw	r6,1328(sp)
 20060d8:	3080004c 	andi	r2,r6,1
 20060dc:	1005003a 	cmpeq	r2,r2,zero
 20060e0:	103bea1e 	bne	r2,zero,200508c <___vfprintf_internal_r+0x5f8>
 20060e4:	00800044 	movi	r2,1
 20060e8:	dc400d17 	ldw	r17,52(sp)
 20060ec:	18800115 	stw	r2,4(r3)
 20060f0:	d8814917 	ldw	r2,1316(sp)
 20060f4:	94800044 	addi	r18,r18,1
 20060f8:	8c400044 	addi	r17,r17,1
 20060fc:	18800015 	stw	r2,0(r3)
 2006100:	008001c4 	movi	r2,7
 2006104:	dc800e15 	stw	r18,56(sp)
 2006108:	dc400d15 	stw	r17,52(sp)
 200610c:	1440ca16 	blt	r2,r17,2006438 <___vfprintf_internal_r+0x19a4>
 2006110:	18c00204 	addi	r3,r3,8
 2006114:	0121c83a 	sub	r16,zero,r4
 2006118:	0400500e 	bge	zero,r16,200625c <___vfprintf_internal_r+0x17c8>
 200611c:	00800404 	movi	r2,16
 2006120:	1400800e 	bge	r2,r16,2006324 <___vfprintf_internal_r+0x1890>
 2006124:	1027883a 	mov	r19,r2
 2006128:	07008074 	movhi	fp,513
 200612c:	e7053184 	addi	fp,fp,5318
 2006130:	050001c4 	movi	r20,7
 2006134:	00000306 	br	2006144 <___vfprintf_internal_r+0x16b0>
 2006138:	18c00204 	addi	r3,r3,8
 200613c:	843ffc04 	addi	r16,r16,-16
 2006140:	9c007a0e 	bge	r19,r16,200632c <___vfprintf_internal_r+0x1898>
 2006144:	94800404 	addi	r18,r18,16
 2006148:	8c400044 	addi	r17,r17,1
 200614c:	1f000015 	stw	fp,0(r3)
 2006150:	1cc00115 	stw	r19,4(r3)
 2006154:	dc800e15 	stw	r18,56(sp)
 2006158:	dc400d15 	stw	r17,52(sp)
 200615c:	a47ff60e 	bge	r20,r17,2006138 <___vfprintf_internal_r+0x16a4>
 2006160:	d9014f17 	ldw	r4,1340(sp)
 2006164:	b00b883a 	mov	r5,r22
 2006168:	d9800c04 	addi	r6,sp,48
 200616c:	2004a3c0 	call	2004a3c <__sprint_r>
 2006170:	103c001e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006174:	dc800e17 	ldw	r18,56(sp)
 2006178:	dc400d17 	ldw	r17,52(sp)
 200617c:	d8c01904 	addi	r3,sp,100
 2006180:	003fee06 	br	200613c <___vfprintf_internal_r+0x16a8>
 2006184:	3c000017 	ldw	r16,0(r7)
 2006188:	0023883a 	mov	r17,zero
 200618c:	39c00104 	addi	r7,r7,4
 2006190:	d9c14015 	stw	r7,1280(sp)
 2006194:	003e8c06 	br	2005bc8 <___vfprintf_internal_r+0x1134>
 2006198:	d9401904 	addi	r5,sp,100
 200619c:	dd000f04 	addi	r20,sp,60
 20061a0:	d9414115 	stw	r5,1284(sp)
 20061a4:	d9814417 	ldw	r6,1296(sp)
 20061a8:	880a973a 	slli	r5,r17,28
 20061ac:	8004d13a 	srli	r2,r16,4
 20061b0:	810003cc 	andi	r4,r16,15
 20061b4:	3109883a 	add	r4,r6,r4
 20061b8:	2884b03a 	or	r2,r5,r2
 20061bc:	21400003 	ldbu	r5,0(r4)
 20061c0:	d9014117 	ldw	r4,1284(sp)
 20061c4:	8806d13a 	srli	r3,r17,4
 20061c8:	1021883a 	mov	r16,r2
 20061cc:	213fffc4 	addi	r4,r4,-1
 20061d0:	d9014115 	stw	r4,1284(sp)
 20061d4:	d9814117 	ldw	r6,1284(sp)
 20061d8:	10c8b03a 	or	r4,r2,r3
 20061dc:	1823883a 	mov	r17,r3
 20061e0:	31400005 	stb	r5,0(r6)
 20061e4:	203fef1e 	bne	r4,zero,20061a4 <___vfprintf_internal_r+0x1710>
 20061e8:	003cc506 	br	2005500 <___vfprintf_internal_r+0xa6c>
 20061ec:	00800c04 	movi	r2,48
 20061f0:	d98018c4 	addi	r6,sp,99
 20061f4:	dd000f04 	addi	r20,sp,60
 20061f8:	d88018c5 	stb	r2,99(sp)
 20061fc:	d9814115 	stw	r6,1284(sp)
 2006200:	003cbf06 	br	2005500 <___vfprintf_internal_r+0xa6c>
 2006204:	dc400d17 	ldw	r17,52(sp)
 2006208:	07008074 	movhi	fp,513
 200620c:	e7053584 	addi	fp,fp,5334
 2006210:	003bc106 	br	2005118 <___vfprintf_internal_r+0x684>
 2006214:	d9414c17 	ldw	r5,1328(sp)
 2006218:	2880040c 	andi	r2,r5,16
 200621c:	10007c26 	beq	r2,zero,2006410 <___vfprintf_internal_r+0x197c>
 2006220:	38800017 	ldw	r2,0(r7)
 2006224:	39c00104 	addi	r7,r7,4
 2006228:	d9c14015 	stw	r7,1280(sp)
 200622c:	d9814b17 	ldw	r6,1324(sp)
 2006230:	d9c14017 	ldw	r7,1280(sp)
 2006234:	11800015 	stw	r6,0(r2)
 2006238:	003a7206 	br	2004c04 <___vfprintf_internal_r+0x170>
 200623c:	d9014f17 	ldw	r4,1340(sp)
 2006240:	b00b883a 	mov	r5,r22
 2006244:	d9800c04 	addi	r6,sp,48
 2006248:	2004a3c0 	call	2004a3c <__sprint_r>
 200624c:	103bc91e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006250:	dc800e17 	ldw	r18,56(sp)
 2006254:	dc400d17 	ldw	r17,52(sp)
 2006258:	d8c01904 	addi	r3,sp,100
 200625c:	d9014717 	ldw	r4,1308(sp)
 2006260:	d9414117 	ldw	r5,1284(sp)
 2006264:	8c400044 	addi	r17,r17,1
 2006268:	9125883a 	add	r18,r18,r4
 200626c:	008001c4 	movi	r2,7
 2006270:	19400015 	stw	r5,0(r3)
 2006274:	19000115 	stw	r4,4(r3)
 2006278:	dc800e15 	stw	r18,56(sp)
 200627c:	dc400d15 	stw	r17,52(sp)
 2006280:	147ce816 	blt	r2,r17,2005624 <___vfprintf_internal_r+0xb90>
 2006284:	18c00204 	addi	r3,r3,8
 2006288:	003b8006 	br	200508c <___vfprintf_internal_r+0x5f8>
 200628c:	38c00017 	ldw	r3,0(r7)
 2006290:	39000204 	addi	r4,r7,8
 2006294:	d9014015 	stw	r4,1280(sp)
 2006298:	d8c14215 	stw	r3,1288(sp)
 200629c:	39c00117 	ldw	r7,4(r7)
 20062a0:	d9c14315 	stw	r7,1292(sp)
 20062a4:	003e1a06 	br	2005b10 <___vfprintf_internal_r+0x107c>
 20062a8:	0005883a 	mov	r2,zero
 20062ac:	1409c83a 	sub	r4,r2,r16
 20062b0:	1105803a 	cmpltu	r2,r2,r4
 20062b4:	044bc83a 	sub	r5,zero,r17
 20062b8:	2885c83a 	sub	r2,r5,r2
 20062bc:	2021883a 	mov	r16,r4
 20062c0:	1023883a 	mov	r17,r2
 20062c4:	01000044 	movi	r4,1
 20062c8:	00800b44 	movi	r2,45
 20062cc:	d8800405 	stb	r2,16(sp)
 20062d0:	003c7e06 	br	20054cc <___vfprintf_internal_r+0xa38>
 20062d4:	d9014f17 	ldw	r4,1340(sp)
 20062d8:	b00b883a 	mov	r5,r22
 20062dc:	d9800c04 	addi	r6,sp,48
 20062e0:	2004a3c0 	call	2004a3c <__sprint_r>
 20062e4:	103ba31e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 20062e8:	dc800e17 	ldw	r18,56(sp)
 20062ec:	dc400d17 	ldw	r17,52(sp)
 20062f0:	d9000517 	ldw	r4,20(sp)
 20062f4:	d9401904 	addi	r5,sp,100
 20062f8:	003da106 	br	2005980 <___vfprintf_internal_r+0xeec>
 20062fc:	d9014f17 	ldw	r4,1340(sp)
 2006300:	b00b883a 	mov	r5,r22
 2006304:	d9800c04 	addi	r6,sp,48
 2006308:	2004a3c0 	call	2004a3c <__sprint_r>
 200630c:	103b991e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006310:	dc800e17 	ldw	r18,56(sp)
 2006314:	dc400d17 	ldw	r17,52(sp)
 2006318:	d9000517 	ldw	r4,20(sp)
 200631c:	d8c01904 	addi	r3,sp,100
 2006320:	003d8b06 	br	2005950 <___vfprintf_internal_r+0xebc>
 2006324:	07008074 	movhi	fp,513
 2006328:	e7053184 	addi	fp,fp,5318
 200632c:	9425883a 	add	r18,r18,r16
 2006330:	8c400044 	addi	r17,r17,1
 2006334:	008001c4 	movi	r2,7
 2006338:	1f000015 	stw	fp,0(r3)
 200633c:	1c000115 	stw	r16,4(r3)
 2006340:	dc800e15 	stw	r18,56(sp)
 2006344:	dc400d15 	stw	r17,52(sp)
 2006348:	147fbc16 	blt	r2,r17,200623c <___vfprintf_internal_r+0x17a8>
 200634c:	18c00204 	addi	r3,r3,8
 2006350:	003fc206 	br	200625c <___vfprintf_internal_r+0x17c8>
 2006354:	d9014f17 	ldw	r4,1340(sp)
 2006358:	b00b883a 	mov	r5,r22
 200635c:	d9800c04 	addi	r6,sp,48
 2006360:	2004a3c0 	call	2004a3c <__sprint_r>
 2006364:	103b831e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006368:	dc800e17 	ldw	r18,56(sp)
 200636c:	d9000517 	ldw	r4,20(sp)
 2006370:	d8c01904 	addi	r3,sp,100
 2006374:	003cfc06 	br	2005768 <___vfprintf_internal_r+0xcd4>
 2006378:	07008074 	movhi	fp,513
 200637c:	e7053184 	addi	fp,fp,5318
 2006380:	003bde06 	br	20052fc <___vfprintf_internal_r+0x868>
 2006384:	00808074 	movhi	r2,513
 2006388:	10852104 	addi	r2,r2,5252
 200638c:	d8814115 	stw	r2,1284(sp)
 2006390:	003def06 	br	2005b50 <___vfprintf_internal_r+0x10bc>
 2006394:	d9014217 	ldw	r4,1288(sp)
 2006398:	d9414317 	ldw	r5,1292(sp)
 200639c:	200b4ec0 	call	200b4ec <__isnand>
 20063a0:	10003926 	beq	r2,zero,2006488 <___vfprintf_internal_r+0x19f4>
 20063a4:	d9414d17 	ldw	r5,1332(sp)
 20063a8:	008011c4 	movi	r2,71
 20063ac:	1140ce16 	blt	r2,r5,20066e8 <___vfprintf_internal_r+0x1c54>
 20063b0:	01808074 	movhi	r6,513
 20063b4:	31852204 	addi	r6,r6,5256
 20063b8:	d9814115 	stw	r6,1284(sp)
 20063bc:	003de406 	br	2005b50 <___vfprintf_internal_r+0x10bc>
 20063c0:	d9014c17 	ldw	r4,1328(sp)
 20063c4:	bdc00044 	addi	r23,r23,1
 20063c8:	b8c00007 	ldb	r3,0(r23)
 20063cc:	21000814 	ori	r4,r4,32
 20063d0:	d9014c15 	stw	r4,1328(sp)
 20063d4:	003a2e06 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 20063d8:	dcc14515 	stw	r19,1300(sp)
 20063dc:	98011016 	blt	r19,zero,2006820 <___vfprintf_internal_r+0x1d8c>
 20063e0:	980f883a 	mov	r7,r19
 20063e4:	d8014615 	stw	zero,1304(sp)
 20063e8:	003c4c06 	br	200551c <___vfprintf_internal_r+0xa88>
 20063ec:	d9014f17 	ldw	r4,1340(sp)
 20063f0:	b00b883a 	mov	r5,r22
 20063f4:	d9800c04 	addi	r6,sp,48
 20063f8:	2004a3c0 	call	2004a3c <__sprint_r>
 20063fc:	103b5d1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006400:	dc800e17 	ldw	r18,56(sp)
 2006404:	d9000517 	ldw	r4,20(sp)
 2006408:	d8c01904 	addi	r3,sp,100
 200640c:	003f2e06 	br	20060c8 <___vfprintf_internal_r+0x1634>
 2006410:	d8c14c17 	ldw	r3,1328(sp)
 2006414:	1880100c 	andi	r2,r3,64
 2006418:	1000a026 	beq	r2,zero,200669c <___vfprintf_internal_r+0x1c08>
 200641c:	38800017 	ldw	r2,0(r7)
 2006420:	39c00104 	addi	r7,r7,4
 2006424:	d9c14015 	stw	r7,1280(sp)
 2006428:	d9014b17 	ldw	r4,1324(sp)
 200642c:	d9c14017 	ldw	r7,1280(sp)
 2006430:	1100000d 	sth	r4,0(r2)
 2006434:	0039f306 	br	2004c04 <___vfprintf_internal_r+0x170>
 2006438:	d9014f17 	ldw	r4,1340(sp)
 200643c:	b00b883a 	mov	r5,r22
 2006440:	d9800c04 	addi	r6,sp,48
 2006444:	2004a3c0 	call	2004a3c <__sprint_r>
 2006448:	103b4a1e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 200644c:	dc800e17 	ldw	r18,56(sp)
 2006450:	dc400d17 	ldw	r17,52(sp)
 2006454:	d9000517 	ldw	r4,20(sp)
 2006458:	d8c01904 	addi	r3,sp,100
 200645c:	003f2d06 	br	2006114 <___vfprintf_internal_r+0x1680>
 2006460:	00800184 	movi	r2,6
 2006464:	14c09a36 	bltu	r2,r19,20066d0 <___vfprintf_internal_r+0x1c3c>
 2006468:	dcc14515 	stw	r19,1300(sp)
 200646c:	9800010e 	bge	r19,zero,2006474 <___vfprintf_internal_r+0x19e0>
 2006470:	d8014515 	stw	zero,1300(sp)
 2006474:	00808074 	movhi	r2,513
 2006478:	10852404 	addi	r2,r2,5264
 200647c:	980f883a 	mov	r7,r19
 2006480:	d8814115 	stw	r2,1284(sp)
 2006484:	003a7206 	br	2004e50 <___vfprintf_internal_r+0x3bc>
 2006488:	00bfffc4 	movi	r2,-1
 200648c:	9880e226 	beq	r19,r2,2006818 <___vfprintf_internal_r+0x1d84>
 2006490:	d9414d17 	ldw	r5,1332(sp)
 2006494:	008019c4 	movi	r2,103
 2006498:	2880dc26 	beq	r5,r2,200680c <___vfprintf_internal_r+0x1d78>
 200649c:	008011c4 	movi	r2,71
 20064a0:	2880da26 	beq	r5,r2,200680c <___vfprintf_internal_r+0x1d78>
 20064a4:	d9414c17 	ldw	r5,1328(sp)
 20064a8:	d9014317 	ldw	r4,1292(sp)
 20064ac:	d9814217 	ldw	r6,1288(sp)
 20064b0:	29404014 	ori	r5,r5,256
 20064b4:	d9414c15 	stw	r5,1328(sp)
 20064b8:	2000cc16 	blt	r4,zero,20067ec <___vfprintf_internal_r+0x1d58>
 20064bc:	3021883a 	mov	r16,r6
 20064c0:	2023883a 	mov	r17,r4
 20064c4:	0039883a 	mov	fp,zero
 20064c8:	d9414d17 	ldw	r5,1332(sp)
 20064cc:	00801984 	movi	r2,102
 20064d0:	2880b726 	beq	r5,r2,20067b0 <___vfprintf_internal_r+0x1d1c>
 20064d4:	00801184 	movi	r2,70
 20064d8:	2880b526 	beq	r5,r2,20067b0 <___vfprintf_internal_r+0x1d1c>
 20064dc:	00801944 	movi	r2,101
 20064e0:	2880c826 	beq	r5,r2,2006804 <___vfprintf_internal_r+0x1d70>
 20064e4:	00801144 	movi	r2,69
 20064e8:	2880c626 	beq	r5,r2,2006804 <___vfprintf_internal_r+0x1d70>
 20064ec:	9829883a 	mov	r20,r19
 20064f0:	d9014f17 	ldw	r4,1340(sp)
 20064f4:	d8800504 	addi	r2,sp,20
 20064f8:	880d883a 	mov	r6,r17
 20064fc:	d8800115 	stw	r2,4(sp)
 2006500:	d8c00604 	addi	r3,sp,24
 2006504:	d8800704 	addi	r2,sp,28
 2006508:	800b883a 	mov	r5,r16
 200650c:	01c00084 	movi	r7,2
 2006510:	d8c00215 	stw	r3,8(sp)
 2006514:	d8800315 	stw	r2,12(sp)
 2006518:	dd000015 	stw	r20,0(sp)
 200651c:	2006cfc0 	call	2006cfc <_dtoa_r>
 2006520:	d9814d17 	ldw	r6,1332(sp)
 2006524:	d8814115 	stw	r2,1284(sp)
 2006528:	008019c4 	movi	r2,103
 200652c:	30809526 	beq	r6,r2,2006784 <___vfprintf_internal_r+0x1cf0>
 2006530:	d8c14d17 	ldw	r3,1332(sp)
 2006534:	008011c4 	movi	r2,71
 2006538:	18809226 	beq	r3,r2,2006784 <___vfprintf_internal_r+0x1cf0>
 200653c:	d9414117 	ldw	r5,1284(sp)
 2006540:	d9814d17 	ldw	r6,1332(sp)
 2006544:	00801984 	movi	r2,102
 2006548:	2d25883a 	add	r18,r5,r20
 200654c:	30808626 	beq	r6,r2,2006768 <___vfprintf_internal_r+0x1cd4>
 2006550:	00801184 	movi	r2,70
 2006554:	30808426 	beq	r6,r2,2006768 <___vfprintf_internal_r+0x1cd4>
 2006558:	000d883a 	mov	r6,zero
 200655c:	000f883a 	mov	r7,zero
 2006560:	880b883a 	mov	r5,r17
 2006564:	8009883a 	mov	r4,r16
 2006568:	200ce680 	call	200ce68 <__eqdf2>
 200656c:	1000751e 	bne	r2,zero,2006744 <___vfprintf_internal_r+0x1cb0>
 2006570:	9005883a 	mov	r2,r18
 2006574:	dc800715 	stw	r18,28(sp)
 2006578:	d9014117 	ldw	r4,1284(sp)
 200657c:	d9414d17 	ldw	r5,1332(sp)
 2006580:	00c019c4 	movi	r3,103
 2006584:	1125c83a 	sub	r18,r2,r4
 2006588:	28c06826 	beq	r5,r3,200672c <___vfprintf_internal_r+0x1c98>
 200658c:	008011c4 	movi	r2,71
 2006590:	28806626 	beq	r5,r2,200672c <___vfprintf_internal_r+0x1c98>
 2006594:	d9000517 	ldw	r4,20(sp)
 2006598:	d8c14d17 	ldw	r3,1332(sp)
 200659c:	00801944 	movi	r2,101
 20065a0:	10c05516 	blt	r2,r3,20066f8 <___vfprintf_internal_r+0x1c64>
 20065a4:	213fffc4 	addi	r4,r4,-1
 20065a8:	d9000515 	stw	r4,20(sp)
 20065ac:	d8c00805 	stb	r3,32(sp)
 20065b0:	2021883a 	mov	r16,r4
 20065b4:	2000c116 	blt	r4,zero,20068bc <___vfprintf_internal_r+0x1e28>
 20065b8:	00800ac4 	movi	r2,43
 20065bc:	d8800845 	stb	r2,33(sp)
 20065c0:	00800244 	movi	r2,9
 20065c4:	1400af0e 	bge	r2,r16,2006884 <___vfprintf_internal_r+0x1df0>
 20065c8:	1027883a 	mov	r19,r2
 20065cc:	dc400b84 	addi	r17,sp,46
 20065d0:	8009883a 	mov	r4,r16
 20065d4:	01400284 	movi	r5,10
 20065d8:	20040800 	call	2004080 <__modsi3>
 20065dc:	10800c04 	addi	r2,r2,48
 20065e0:	8c7fffc4 	addi	r17,r17,-1
 20065e4:	8009883a 	mov	r4,r16
 20065e8:	01400284 	movi	r5,10
 20065ec:	88800005 	stb	r2,0(r17)
 20065f0:	20040200 	call	2004020 <__divsi3>
 20065f4:	1021883a 	mov	r16,r2
 20065f8:	98bff516 	blt	r19,r2,20065d0 <___vfprintf_internal_r+0x1b3c>
 20065fc:	10c00c04 	addi	r3,r2,48
 2006600:	d88009c4 	addi	r2,sp,39
 2006604:	108001c4 	addi	r2,r2,7
 2006608:	897fffc4 	addi	r5,r17,-1
 200660c:	88ffffc5 	stb	r3,-1(r17)
 2006610:	2880a72e 	bgeu	r5,r2,20068b0 <___vfprintf_internal_r+0x1e1c>
 2006614:	1009883a 	mov	r4,r2
 2006618:	d9800804 	addi	r6,sp,32
 200661c:	d8c00884 	addi	r3,sp,34
 2006620:	28800003 	ldbu	r2,0(r5)
 2006624:	29400044 	addi	r5,r5,1
 2006628:	18800005 	stb	r2,0(r3)
 200662c:	18c00044 	addi	r3,r3,1
 2006630:	293ffb36 	bltu	r5,r4,2006620 <___vfprintf_internal_r+0x1b8c>
 2006634:	1987c83a 	sub	r3,r3,r6
 2006638:	00800044 	movi	r2,1
 200663c:	d8c14815 	stw	r3,1312(sp)
 2006640:	90cf883a 	add	r7,r18,r3
 2006644:	1480960e 	bge	r2,r18,20068a0 <___vfprintf_internal_r+0x1e0c>
 2006648:	39c00044 	addi	r7,r7,1
 200664c:	d9c14515 	stw	r7,1300(sp)
 2006650:	38003416 	blt	r7,zero,2006724 <___vfprintf_internal_r+0x1c90>
 2006654:	e0803fcc 	andi	r2,fp,255
 2006658:	1080201c 	xori	r2,r2,128
 200665c:	10bfe004 	addi	r2,r2,-128
 2006660:	10004e26 	beq	r2,zero,200679c <___vfprintf_internal_r+0x1d08>
 2006664:	00800b44 	movi	r2,45
 2006668:	dc814715 	stw	r18,1308(sp)
 200666c:	d8014615 	stw	zero,1304(sp)
 2006670:	d8800405 	stb	r2,16(sp)
 2006674:	003bab06 	br	2005524 <___vfprintf_internal_r+0xa90>
 2006678:	00800b44 	movi	r2,45
 200667c:	d8800405 	stb	r2,16(sp)
 2006680:	003d2d06 	br	2005b38 <___vfprintf_internal_r+0x10a4>
 2006684:	d9014f17 	ldw	r4,1340(sp)
 2006688:	b00b883a 	mov	r5,r22
 200668c:	d9800c04 	addi	r6,sp,48
 2006690:	2004a3c0 	call	2004a3c <__sprint_r>
 2006694:	103ab71e 	bne	r2,zero,2005174 <___vfprintf_internal_r+0x6e0>
 2006698:	003ab506 	br	2005170 <___vfprintf_internal_r+0x6dc>
 200669c:	38800017 	ldw	r2,0(r7)
 20066a0:	39c00104 	addi	r7,r7,4
 20066a4:	d9c14015 	stw	r7,1280(sp)
 20066a8:	d9414b17 	ldw	r5,1324(sp)
 20066ac:	d9c14017 	ldw	r7,1280(sp)
 20066b0:	11400015 	stw	r5,0(r2)
 20066b4:	00395306 	br	2004c04 <___vfprintf_internal_r+0x170>
 20066b8:	980f883a 	mov	r7,r19
 20066bc:	dcc14515 	stw	r19,1300(sp)
 20066c0:	d8014615 	stw	zero,1304(sp)
 20066c4:	003b9506 	br	200551c <___vfprintf_internal_r+0xa88>
 20066c8:	0027883a 	mov	r19,zero
 20066cc:	00397206 	br	2004c98 <___vfprintf_internal_r+0x204>
 20066d0:	00c08074 	movhi	r3,513
 20066d4:	18c52404 	addi	r3,r3,5264
 20066d8:	100f883a 	mov	r7,r2
 20066dc:	d8814515 	stw	r2,1300(sp)
 20066e0:	d8c14115 	stw	r3,1284(sp)
 20066e4:	0039da06 	br	2004e50 <___vfprintf_internal_r+0x3bc>
 20066e8:	00808074 	movhi	r2,513
 20066ec:	10852304 	addi	r2,r2,5260
 20066f0:	d8814115 	stw	r2,1284(sp)
 20066f4:	003d1606 	br	2005b50 <___vfprintf_internal_r+0x10bc>
 20066f8:	d9414d17 	ldw	r5,1332(sp)
 20066fc:	00801984 	movi	r2,102
 2006700:	28804926 	beq	r5,r2,2006828 <___vfprintf_internal_r+0x1d94>
 2006704:	200f883a 	mov	r7,r4
 2006708:	24805716 	blt	r4,r18,2006868 <___vfprintf_internal_r+0x1dd4>
 200670c:	d9414c17 	ldw	r5,1328(sp)
 2006710:	2880004c 	andi	r2,r5,1
 2006714:	10000126 	beq	r2,zero,200671c <___vfprintf_internal_r+0x1c88>
 2006718:	21c00044 	addi	r7,r4,1
 200671c:	d9c14515 	stw	r7,1300(sp)
 2006720:	383fcc0e 	bge	r7,zero,2006654 <___vfprintf_internal_r+0x1bc0>
 2006724:	d8014515 	stw	zero,1300(sp)
 2006728:	003fca06 	br	2006654 <___vfprintf_internal_r+0x1bc0>
 200672c:	d9000517 	ldw	r4,20(sp)
 2006730:	00bfff04 	movi	r2,-4
 2006734:	1100480e 	bge	r2,r4,2006858 <___vfprintf_internal_r+0x1dc4>
 2006738:	99004716 	blt	r19,r4,2006858 <___vfprintf_internal_r+0x1dc4>
 200673c:	d8c14d15 	stw	r3,1332(sp)
 2006740:	003ff006 	br	2006704 <___vfprintf_internal_r+0x1c70>
 2006744:	d8800717 	ldw	r2,28(sp)
 2006748:	14bf8b2e 	bgeu	r2,r18,2006578 <___vfprintf_internal_r+0x1ae4>
 200674c:	9007883a 	mov	r3,r18
 2006750:	01000c04 	movi	r4,48
 2006754:	11000005 	stb	r4,0(r2)
 2006758:	10800044 	addi	r2,r2,1
 200675c:	d8800715 	stw	r2,28(sp)
 2006760:	18bffc1e 	bne	r3,r2,2006754 <___vfprintf_internal_r+0x1cc0>
 2006764:	003f8406 	br	2006578 <___vfprintf_internal_r+0x1ae4>
 2006768:	d8814117 	ldw	r2,1284(sp)
 200676c:	10c00007 	ldb	r3,0(r2)
 2006770:	00800c04 	movi	r2,48
 2006774:	18805b26 	beq	r3,r2,20068e4 <___vfprintf_internal_r+0x1e50>
 2006778:	d9000517 	ldw	r4,20(sp)
 200677c:	9125883a 	add	r18,r18,r4
 2006780:	003f7506 	br	2006558 <___vfprintf_internal_r+0x1ac4>
 2006784:	d9014c17 	ldw	r4,1328(sp)
 2006788:	2080004c 	andi	r2,r4,1
 200678c:	1005003a 	cmpeq	r2,r2,zero
 2006790:	103f6a26 	beq	r2,zero,200653c <___vfprintf_internal_r+0x1aa8>
 2006794:	d8800717 	ldw	r2,28(sp)
 2006798:	003f7706 	br	2006578 <___vfprintf_internal_r+0x1ae4>
 200679c:	d9c14515 	stw	r7,1300(sp)
 20067a0:	38004d16 	blt	r7,zero,20068d8 <___vfprintf_internal_r+0x1e44>
 20067a4:	dc814715 	stw	r18,1308(sp)
 20067a8:	d8014615 	stw	zero,1304(sp)
 20067ac:	003b5b06 	br	200551c <___vfprintf_internal_r+0xa88>
 20067b0:	d9014f17 	ldw	r4,1340(sp)
 20067b4:	d8800504 	addi	r2,sp,20
 20067b8:	d8800115 	stw	r2,4(sp)
 20067bc:	d8c00604 	addi	r3,sp,24
 20067c0:	d8800704 	addi	r2,sp,28
 20067c4:	800b883a 	mov	r5,r16
 20067c8:	880d883a 	mov	r6,r17
 20067cc:	01c000c4 	movi	r7,3
 20067d0:	d8c00215 	stw	r3,8(sp)
 20067d4:	d8800315 	stw	r2,12(sp)
 20067d8:	dcc00015 	stw	r19,0(sp)
 20067dc:	9829883a 	mov	r20,r19
 20067e0:	2006cfc0 	call	2006cfc <_dtoa_r>
 20067e4:	d8814115 	stw	r2,1284(sp)
 20067e8:	003f5106 	br	2006530 <___vfprintf_internal_r+0x1a9c>
 20067ec:	d8c14217 	ldw	r3,1288(sp)
 20067f0:	d9014317 	ldw	r4,1292(sp)
 20067f4:	07000b44 	movi	fp,45
 20067f8:	1821883a 	mov	r16,r3
 20067fc:	2460003c 	xorhi	r17,r4,32768
 2006800:	003f3106 	br	20064c8 <___vfprintf_internal_r+0x1a34>
 2006804:	9d000044 	addi	r20,r19,1
 2006808:	003f3906 	br	20064f0 <___vfprintf_internal_r+0x1a5c>
 200680c:	983f251e 	bne	r19,zero,20064a4 <___vfprintf_internal_r+0x1a10>
 2006810:	04c00044 	movi	r19,1
 2006814:	003f2306 	br	20064a4 <___vfprintf_internal_r+0x1a10>
 2006818:	04c00184 	movi	r19,6
 200681c:	003f2106 	br	20064a4 <___vfprintf_internal_r+0x1a10>
 2006820:	d8014515 	stw	zero,1300(sp)
 2006824:	003eee06 	br	20063e0 <___vfprintf_internal_r+0x194c>
 2006828:	200f883a 	mov	r7,r4
 200682c:	0100370e 	bge	zero,r4,200690c <___vfprintf_internal_r+0x1e78>
 2006830:	9800031e 	bne	r19,zero,2006840 <___vfprintf_internal_r+0x1dac>
 2006834:	d9814c17 	ldw	r6,1328(sp)
 2006838:	3080004c 	andi	r2,r6,1
 200683c:	103fb726 	beq	r2,zero,200671c <___vfprintf_internal_r+0x1c88>
 2006840:	20800044 	addi	r2,r4,1
 2006844:	98a7883a 	add	r19,r19,r2
 2006848:	dcc14515 	stw	r19,1300(sp)
 200684c:	980f883a 	mov	r7,r19
 2006850:	983f800e 	bge	r19,zero,2006654 <___vfprintf_internal_r+0x1bc0>
 2006854:	003fb306 	br	2006724 <___vfprintf_internal_r+0x1c90>
 2006858:	d9814d17 	ldw	r6,1332(sp)
 200685c:	31bfff84 	addi	r6,r6,-2
 2006860:	d9814d15 	stw	r6,1332(sp)
 2006864:	003f4c06 	br	2006598 <___vfprintf_internal_r+0x1b04>
 2006868:	0100180e 	bge	zero,r4,20068cc <___vfprintf_internal_r+0x1e38>
 200686c:	00800044 	movi	r2,1
 2006870:	1485883a 	add	r2,r2,r18
 2006874:	d8814515 	stw	r2,1300(sp)
 2006878:	100f883a 	mov	r7,r2
 200687c:	103f750e 	bge	r2,zero,2006654 <___vfprintf_internal_r+0x1bc0>
 2006880:	003fa806 	br	2006724 <___vfprintf_internal_r+0x1c90>
 2006884:	80c00c04 	addi	r3,r16,48
 2006888:	00800c04 	movi	r2,48
 200688c:	d8c008c5 	stb	r3,35(sp)
 2006890:	d9800804 	addi	r6,sp,32
 2006894:	d8c00904 	addi	r3,sp,36
 2006898:	d8800885 	stb	r2,34(sp)
 200689c:	003f6506 	br	2006634 <___vfprintf_internal_r+0x1ba0>
 20068a0:	d9014c17 	ldw	r4,1328(sp)
 20068a4:	2084703a 	and	r2,r4,r2
 20068a8:	103f9c26 	beq	r2,zero,200671c <___vfprintf_internal_r+0x1c88>
 20068ac:	003f6606 	br	2006648 <___vfprintf_internal_r+0x1bb4>
 20068b0:	d9800804 	addi	r6,sp,32
 20068b4:	d8c00884 	addi	r3,sp,34
 20068b8:	003f5e06 	br	2006634 <___vfprintf_internal_r+0x1ba0>
 20068bc:	00800b44 	movi	r2,45
 20068c0:	0121c83a 	sub	r16,zero,r4
 20068c4:	d8800845 	stb	r2,33(sp)
 20068c8:	003f3d06 	br	20065c0 <___vfprintf_internal_r+0x1b2c>
 20068cc:	00800084 	movi	r2,2
 20068d0:	1105c83a 	sub	r2,r2,r4
 20068d4:	003fe606 	br	2006870 <___vfprintf_internal_r+0x1ddc>
 20068d8:	d8014515 	stw	zero,1300(sp)
 20068dc:	dc814715 	stw	r18,1308(sp)
 20068e0:	003fb106 	br	20067a8 <___vfprintf_internal_r+0x1d14>
 20068e4:	000d883a 	mov	r6,zero
 20068e8:	000f883a 	mov	r7,zero
 20068ec:	8009883a 	mov	r4,r16
 20068f0:	880b883a 	mov	r5,r17
 20068f4:	200cef00 	call	200cef0 <__nedf2>
 20068f8:	103f9f26 	beq	r2,zero,2006778 <___vfprintf_internal_r+0x1ce4>
 20068fc:	00800044 	movi	r2,1
 2006900:	1509c83a 	sub	r4,r2,r20
 2006904:	d9000515 	stw	r4,20(sp)
 2006908:	003f9b06 	br	2006778 <___vfprintf_internal_r+0x1ce4>
 200690c:	98000d1e 	bne	r19,zero,2006944 <___vfprintf_internal_r+0x1eb0>
 2006910:	d8c14c17 	ldw	r3,1328(sp)
 2006914:	1880004c 	andi	r2,r3,1
 2006918:	10000a1e 	bne	r2,zero,2006944 <___vfprintf_internal_r+0x1eb0>
 200691c:	01000044 	movi	r4,1
 2006920:	200f883a 	mov	r7,r4
 2006924:	d9014515 	stw	r4,1300(sp)
 2006928:	003f4a06 	br	2006654 <___vfprintf_internal_r+0x1bc0>
 200692c:	3cc00017 	ldw	r19,0(r7)
 2006930:	39c00104 	addi	r7,r7,4
 2006934:	983d0e0e 	bge	r19,zero,2005d70 <___vfprintf_internal_r+0x12dc>
 2006938:	b8c00007 	ldb	r3,0(r23)
 200693c:	04ffffc4 	movi	r19,-1
 2006940:	0038d306 	br	2004c90 <___vfprintf_internal_r+0x1fc>
 2006944:	9cc00084 	addi	r19,r19,2
 2006948:	dcc14515 	stw	r19,1300(sp)
 200694c:	980f883a 	mov	r7,r19
 2006950:	983f400e 	bge	r19,zero,2006654 <___vfprintf_internal_r+0x1bc0>
 2006954:	003f7306 	br	2006724 <___vfprintf_internal_r+0x1c90>

02006958 <__vfprintf_internal>:
 2006958:	00808074 	movhi	r2,513
 200695c:	108d6704 	addi	r2,r2,13724
 2006960:	2013883a 	mov	r9,r4
 2006964:	11000017 	ldw	r4,0(r2)
 2006968:	2805883a 	mov	r2,r5
 200696c:	300f883a 	mov	r7,r6
 2006970:	480b883a 	mov	r5,r9
 2006974:	100d883a 	mov	r6,r2
 2006978:	2004a941 	jmpi	2004a94 <___vfprintf_internal_r>

0200697c <__swsetup_r>:
 200697c:	00808074 	movhi	r2,513
 2006980:	108d6704 	addi	r2,r2,13724
 2006984:	10c00017 	ldw	r3,0(r2)
 2006988:	defffd04 	addi	sp,sp,-12
 200698c:	dc400115 	stw	r17,4(sp)
 2006990:	dc000015 	stw	r16,0(sp)
 2006994:	dfc00215 	stw	ra,8(sp)
 2006998:	2023883a 	mov	r17,r4
 200699c:	2821883a 	mov	r16,r5
 20069a0:	18000226 	beq	r3,zero,20069ac <__swsetup_r+0x30>
 20069a4:	18800e17 	ldw	r2,56(r3)
 20069a8:	10001f26 	beq	r2,zero,2006a28 <__swsetup_r+0xac>
 20069ac:	8100030b 	ldhu	r4,12(r16)
 20069b0:	2080020c 	andi	r2,r4,8
 20069b4:	10002826 	beq	r2,zero,2006a58 <__swsetup_r+0xdc>
 20069b8:	81400417 	ldw	r5,16(r16)
 20069bc:	28001d26 	beq	r5,zero,2006a34 <__swsetup_r+0xb8>
 20069c0:	2080004c 	andi	r2,r4,1
 20069c4:	1005003a 	cmpeq	r2,r2,zero
 20069c8:	10000b26 	beq	r2,zero,20069f8 <__swsetup_r+0x7c>
 20069cc:	2080008c 	andi	r2,r4,2
 20069d0:	10001226 	beq	r2,zero,2006a1c <__swsetup_r+0xa0>
 20069d4:	0005883a 	mov	r2,zero
 20069d8:	80800215 	stw	r2,8(r16)
 20069dc:	28000b26 	beq	r5,zero,2006a0c <__swsetup_r+0x90>
 20069e0:	0005883a 	mov	r2,zero
 20069e4:	dfc00217 	ldw	ra,8(sp)
 20069e8:	dc400117 	ldw	r17,4(sp)
 20069ec:	dc000017 	ldw	r16,0(sp)
 20069f0:	dec00304 	addi	sp,sp,12
 20069f4:	f800283a 	ret
 20069f8:	80800517 	ldw	r2,20(r16)
 20069fc:	80000215 	stw	zero,8(r16)
 2006a00:	0085c83a 	sub	r2,zero,r2
 2006a04:	80800615 	stw	r2,24(r16)
 2006a08:	283ff51e 	bne	r5,zero,20069e0 <__swsetup_r+0x64>
 2006a0c:	2080200c 	andi	r2,r4,128
 2006a10:	103ff326 	beq	r2,zero,20069e0 <__swsetup_r+0x64>
 2006a14:	00bfffc4 	movi	r2,-1
 2006a18:	003ff206 	br	20069e4 <__swsetup_r+0x68>
 2006a1c:	80800517 	ldw	r2,20(r16)
 2006a20:	80800215 	stw	r2,8(r16)
 2006a24:	003fed06 	br	20069dc <__swsetup_r+0x60>
 2006a28:	1809883a 	mov	r4,r3
 2006a2c:	20085480 	call	2008548 <__sinit>
 2006a30:	003fde06 	br	20069ac <__swsetup_r+0x30>
 2006a34:	20c0a00c 	andi	r3,r4,640
 2006a38:	00808004 	movi	r2,512
 2006a3c:	18bfe026 	beq	r3,r2,20069c0 <__swsetup_r+0x44>
 2006a40:	8809883a 	mov	r4,r17
 2006a44:	800b883a 	mov	r5,r16
 2006a48:	20092f40 	call	20092f4 <__smakebuf_r>
 2006a4c:	8100030b 	ldhu	r4,12(r16)
 2006a50:	81400417 	ldw	r5,16(r16)
 2006a54:	003fda06 	br	20069c0 <__swsetup_r+0x44>
 2006a58:	2080040c 	andi	r2,r4,16
 2006a5c:	103fed26 	beq	r2,zero,2006a14 <__swsetup_r+0x98>
 2006a60:	2080010c 	andi	r2,r4,4
 2006a64:	10001226 	beq	r2,zero,2006ab0 <__swsetup_r+0x134>
 2006a68:	81400c17 	ldw	r5,48(r16)
 2006a6c:	28000526 	beq	r5,zero,2006a84 <__swsetup_r+0x108>
 2006a70:	80801004 	addi	r2,r16,64
 2006a74:	28800226 	beq	r5,r2,2006a80 <__swsetup_r+0x104>
 2006a78:	8809883a 	mov	r4,r17
 2006a7c:	20089000 	call	2008900 <_free_r>
 2006a80:	80000c15 	stw	zero,48(r16)
 2006a84:	8080030b 	ldhu	r2,12(r16)
 2006a88:	81400417 	ldw	r5,16(r16)
 2006a8c:	80000115 	stw	zero,4(r16)
 2006a90:	10bff6cc 	andi	r2,r2,65499
 2006a94:	8080030d 	sth	r2,12(r16)
 2006a98:	81400015 	stw	r5,0(r16)
 2006a9c:	8080030b 	ldhu	r2,12(r16)
 2006aa0:	10800214 	ori	r2,r2,8
 2006aa4:	113fffcc 	andi	r4,r2,65535
 2006aa8:	8080030d 	sth	r2,12(r16)
 2006aac:	003fc306 	br	20069bc <__swsetup_r+0x40>
 2006ab0:	81400417 	ldw	r5,16(r16)
 2006ab4:	003ff906 	br	2006a9c <__swsetup_r+0x120>

02006ab8 <quorem>:
 2006ab8:	28c00417 	ldw	r3,16(r5)
 2006abc:	20800417 	ldw	r2,16(r4)
 2006ac0:	defff104 	addi	sp,sp,-60
 2006ac4:	dfc00e15 	stw	ra,56(sp)
 2006ac8:	df000d15 	stw	fp,52(sp)
 2006acc:	ddc00c15 	stw	r23,48(sp)
 2006ad0:	dd800b15 	stw	r22,44(sp)
 2006ad4:	dd400a15 	stw	r21,40(sp)
 2006ad8:	dd000915 	stw	r20,36(sp)
 2006adc:	dcc00815 	stw	r19,32(sp)
 2006ae0:	dc800715 	stw	r18,28(sp)
 2006ae4:	dc400615 	stw	r17,24(sp)
 2006ae8:	dc000515 	stw	r16,20(sp)
 2006aec:	d9000315 	stw	r4,12(sp)
 2006af0:	d9400415 	stw	r5,16(sp)
 2006af4:	10c07f16 	blt	r2,r3,2006cf4 <quorem+0x23c>
 2006af8:	1d3fffc4 	addi	r20,r3,-1
 2006afc:	d8c00417 	ldw	r3,16(sp)
 2006b00:	d9000317 	ldw	r4,12(sp)
 2006b04:	a505883a 	add	r2,r20,r20
 2006b08:	1085883a 	add	r2,r2,r2
 2006b0c:	1cc00504 	addi	r19,r3,20
 2006b10:	25c00504 	addi	r23,r4,20
 2006b14:	98ad883a 	add	r22,r19,r2
 2006b18:	15c7883a 	add	r3,r2,r23
 2006b1c:	b1400017 	ldw	r5,0(r22)
 2006b20:	19000017 	ldw	r4,0(r3)
 2006b24:	d8c00015 	stw	r3,0(sp)
 2006b28:	29400044 	addi	r5,r5,1
 2006b2c:	d9000215 	stw	r4,8(sp)
 2006b30:	20040e00 	call	20040e0 <__udivsi3>
 2006b34:	1039883a 	mov	fp,r2
 2006b38:	10003d1e 	bne	r2,zero,2006c30 <quorem+0x178>
 2006b3c:	d9400417 	ldw	r5,16(sp)
 2006b40:	d9000317 	ldw	r4,12(sp)
 2006b44:	2009f880 	call	2009f88 <__mcmp>
 2006b48:	10002c16 	blt	r2,zero,2006bfc <quorem+0x144>
 2006b4c:	e7000044 	addi	fp,fp,1
 2006b50:	b80f883a 	mov	r7,r23
 2006b54:	0011883a 	mov	r8,zero
 2006b58:	0009883a 	mov	r4,zero
 2006b5c:	99400017 	ldw	r5,0(r19)
 2006b60:	38c00017 	ldw	r3,0(r7)
 2006b64:	9cc00104 	addi	r19,r19,4
 2006b68:	28bfffcc 	andi	r2,r5,65535
 2006b6c:	2085883a 	add	r2,r4,r2
 2006b70:	11bfffcc 	andi	r6,r2,65535
 2006b74:	193fffcc 	andi	r4,r3,65535
 2006b78:	1004d43a 	srli	r2,r2,16
 2006b7c:	280ad43a 	srli	r5,r5,16
 2006b80:	2189c83a 	sub	r4,r4,r6
 2006b84:	2209883a 	add	r4,r4,r8
 2006b88:	1806d43a 	srli	r3,r3,16
 2006b8c:	288b883a 	add	r5,r5,r2
 2006b90:	200dd43a 	srai	r6,r4,16
 2006b94:	28bfffcc 	andi	r2,r5,65535
 2006b98:	1887c83a 	sub	r3,r3,r2
 2006b9c:	1987883a 	add	r3,r3,r6
 2006ba0:	3900000d 	sth	r4,0(r7)
 2006ba4:	38c0008d 	sth	r3,2(r7)
 2006ba8:	2808d43a 	srli	r4,r5,16
 2006bac:	39c00104 	addi	r7,r7,4
 2006bb0:	1811d43a 	srai	r8,r3,16
 2006bb4:	b4ffe92e 	bgeu	r22,r19,2006b5c <quorem+0xa4>
 2006bb8:	a505883a 	add	r2,r20,r20
 2006bbc:	1085883a 	add	r2,r2,r2
 2006bc0:	b885883a 	add	r2,r23,r2
 2006bc4:	10c00017 	ldw	r3,0(r2)
 2006bc8:	18000c1e 	bne	r3,zero,2006bfc <quorem+0x144>
 2006bcc:	113fff04 	addi	r4,r2,-4
 2006bd0:	b900082e 	bgeu	r23,r4,2006bf4 <quorem+0x13c>
 2006bd4:	10bfff17 	ldw	r2,-4(r2)
 2006bd8:	10000326 	beq	r2,zero,2006be8 <quorem+0x130>
 2006bdc:	00000506 	br	2006bf4 <quorem+0x13c>
 2006be0:	20800017 	ldw	r2,0(r4)
 2006be4:	1000031e 	bne	r2,zero,2006bf4 <quorem+0x13c>
 2006be8:	213fff04 	addi	r4,r4,-4
 2006bec:	a53fffc4 	addi	r20,r20,-1
 2006bf0:	b93ffb36 	bltu	r23,r4,2006be0 <quorem+0x128>
 2006bf4:	d9000317 	ldw	r4,12(sp)
 2006bf8:	25000415 	stw	r20,16(r4)
 2006bfc:	e005883a 	mov	r2,fp
 2006c00:	dfc00e17 	ldw	ra,56(sp)
 2006c04:	df000d17 	ldw	fp,52(sp)
 2006c08:	ddc00c17 	ldw	r23,48(sp)
 2006c0c:	dd800b17 	ldw	r22,44(sp)
 2006c10:	dd400a17 	ldw	r21,40(sp)
 2006c14:	dd000917 	ldw	r20,36(sp)
 2006c18:	dcc00817 	ldw	r19,32(sp)
 2006c1c:	dc800717 	ldw	r18,28(sp)
 2006c20:	dc400617 	ldw	r17,24(sp)
 2006c24:	dc000517 	ldw	r16,20(sp)
 2006c28:	dec00f04 	addi	sp,sp,60
 2006c2c:	f800283a 	ret
 2006c30:	b823883a 	mov	r17,r23
 2006c34:	9825883a 	mov	r18,r19
 2006c38:	d8000115 	stw	zero,4(sp)
 2006c3c:	002b883a 	mov	r21,zero
 2006c40:	94000017 	ldw	r16,0(r18)
 2006c44:	e009883a 	mov	r4,fp
 2006c48:	94800104 	addi	r18,r18,4
 2006c4c:	817fffcc 	andi	r5,r16,65535
 2006c50:	20040f00 	call	20040f0 <__mulsi3>
 2006c54:	800ad43a 	srli	r5,r16,16
 2006c58:	e009883a 	mov	r4,fp
 2006c5c:	a8a1883a 	add	r16,r21,r2
 2006c60:	20040f00 	call	20040f0 <__mulsi3>
 2006c64:	89000017 	ldw	r4,0(r17)
 2006c68:	80ffffcc 	andi	r3,r16,65535
 2006c6c:	8020d43a 	srli	r16,r16,16
 2006c70:	217fffcc 	andi	r5,r4,65535
 2006c74:	28cbc83a 	sub	r5,r5,r3
 2006c78:	d8c00117 	ldw	r3,4(sp)
 2006c7c:	2008d43a 	srli	r4,r4,16
 2006c80:	1405883a 	add	r2,r2,r16
 2006c84:	28cb883a 	add	r5,r5,r3
 2006c88:	280dd43a 	srai	r6,r5,16
 2006c8c:	10ffffcc 	andi	r3,r2,65535
 2006c90:	20c9c83a 	sub	r4,r4,r3
 2006c94:	2189883a 	add	r4,r4,r6
 2006c98:	8900008d 	sth	r4,2(r17)
 2006c9c:	2009d43a 	srai	r4,r4,16
 2006ca0:	8940000d 	sth	r5,0(r17)
 2006ca4:	102ad43a 	srli	r21,r2,16
 2006ca8:	8c400104 	addi	r17,r17,4
 2006cac:	d9000115 	stw	r4,4(sp)
 2006cb0:	b4bfe32e 	bgeu	r22,r18,2006c40 <quorem+0x188>
 2006cb4:	d9000217 	ldw	r4,8(sp)
 2006cb8:	203fa01e 	bne	r4,zero,2006b3c <quorem+0x84>
 2006cbc:	d8800017 	ldw	r2,0(sp)
 2006cc0:	10ffff04 	addi	r3,r2,-4
 2006cc4:	b8c0082e 	bgeu	r23,r3,2006ce8 <quorem+0x230>
 2006cc8:	10bfff17 	ldw	r2,-4(r2)
 2006ccc:	10000326 	beq	r2,zero,2006cdc <quorem+0x224>
 2006cd0:	00000506 	br	2006ce8 <quorem+0x230>
 2006cd4:	18800017 	ldw	r2,0(r3)
 2006cd8:	1000031e 	bne	r2,zero,2006ce8 <quorem+0x230>
 2006cdc:	18ffff04 	addi	r3,r3,-4
 2006ce0:	a53fffc4 	addi	r20,r20,-1
 2006ce4:	b8fffb36 	bltu	r23,r3,2006cd4 <quorem+0x21c>
 2006ce8:	d8c00317 	ldw	r3,12(sp)
 2006cec:	1d000415 	stw	r20,16(r3)
 2006cf0:	003f9206 	br	2006b3c <quorem+0x84>
 2006cf4:	0005883a 	mov	r2,zero
 2006cf8:	003fc106 	br	2006c00 <quorem+0x148>

02006cfc <_dtoa_r>:
 2006cfc:	22001017 	ldw	r8,64(r4)
 2006d00:	deffda04 	addi	sp,sp,-152
 2006d04:	dd402115 	stw	r21,132(sp)
 2006d08:	dd002015 	stw	r20,128(sp)
 2006d0c:	dc801e15 	stw	r18,120(sp)
 2006d10:	dc401d15 	stw	r17,116(sp)
 2006d14:	dfc02515 	stw	ra,148(sp)
 2006d18:	df002415 	stw	fp,144(sp)
 2006d1c:	ddc02315 	stw	r23,140(sp)
 2006d20:	dd802215 	stw	r22,136(sp)
 2006d24:	dcc01f15 	stw	r19,124(sp)
 2006d28:	dc001c15 	stw	r16,112(sp)
 2006d2c:	d9001615 	stw	r4,88(sp)
 2006d30:	3023883a 	mov	r17,r6
 2006d34:	2829883a 	mov	r20,r5
 2006d38:	d9c01715 	stw	r7,92(sp)
 2006d3c:	dc802817 	ldw	r18,160(sp)
 2006d40:	302b883a 	mov	r21,r6
 2006d44:	40000a26 	beq	r8,zero,2006d70 <_dtoa_r+0x74>
 2006d48:	20801117 	ldw	r2,68(r4)
 2006d4c:	400b883a 	mov	r5,r8
 2006d50:	40800115 	stw	r2,4(r8)
 2006d54:	20c01117 	ldw	r3,68(r4)
 2006d58:	00800044 	movi	r2,1
 2006d5c:	10c4983a 	sll	r2,r2,r3
 2006d60:	40800215 	stw	r2,8(r8)
 2006d64:	2009e2c0 	call	2009e2c <_Bfree>
 2006d68:	d8c01617 	ldw	r3,88(sp)
 2006d6c:	18001015 	stw	zero,64(r3)
 2006d70:	8800a316 	blt	r17,zero,2007000 <_dtoa_r+0x304>
 2006d74:	90000015 	stw	zero,0(r18)
 2006d78:	a8dffc2c 	andhi	r3,r21,32752
 2006d7c:	009ffc34 	movhi	r2,32752
 2006d80:	18809126 	beq	r3,r2,2006fc8 <_dtoa_r+0x2cc>
 2006d84:	000d883a 	mov	r6,zero
 2006d88:	000f883a 	mov	r7,zero
 2006d8c:	a009883a 	mov	r4,r20
 2006d90:	a80b883a 	mov	r5,r21
 2006d94:	dd001215 	stw	r20,72(sp)
 2006d98:	dd401315 	stw	r21,76(sp)
 2006d9c:	200cef00 	call	200cef0 <__nedf2>
 2006da0:	1000171e 	bne	r2,zero,2006e00 <_dtoa_r+0x104>
 2006da4:	d9802717 	ldw	r6,156(sp)
 2006da8:	00800044 	movi	r2,1
 2006dac:	30800015 	stw	r2,0(r6)
 2006db0:	d8802917 	ldw	r2,164(sp)
 2006db4:	10029b26 	beq	r2,zero,2007824 <_dtoa_r+0xb28>
 2006db8:	d9002917 	ldw	r4,164(sp)
 2006dbc:	00808074 	movhi	r2,513
 2006dc0:	10847a44 	addi	r2,r2,4585
 2006dc4:	10ffffc4 	addi	r3,r2,-1
 2006dc8:	20800015 	stw	r2,0(r4)
 2006dcc:	1805883a 	mov	r2,r3
 2006dd0:	dfc02517 	ldw	ra,148(sp)
 2006dd4:	df002417 	ldw	fp,144(sp)
 2006dd8:	ddc02317 	ldw	r23,140(sp)
 2006ddc:	dd802217 	ldw	r22,136(sp)
 2006de0:	dd402117 	ldw	r21,132(sp)
 2006de4:	dd002017 	ldw	r20,128(sp)
 2006de8:	dcc01f17 	ldw	r19,124(sp)
 2006dec:	dc801e17 	ldw	r18,120(sp)
 2006df0:	dc401d17 	ldw	r17,116(sp)
 2006df4:	dc001c17 	ldw	r16,112(sp)
 2006df8:	dec02604 	addi	sp,sp,152
 2006dfc:	f800283a 	ret
 2006e00:	d9001617 	ldw	r4,88(sp)
 2006e04:	d9401217 	ldw	r5,72(sp)
 2006e08:	d8800104 	addi	r2,sp,4
 2006e0c:	a80d883a 	mov	r6,r21
 2006e10:	d9c00204 	addi	r7,sp,8
 2006e14:	d8800015 	stw	r2,0(sp)
 2006e18:	200a4680 	call	200a468 <__d2b>
 2006e1c:	d8800715 	stw	r2,28(sp)
 2006e20:	a804d53a 	srli	r2,r21,20
 2006e24:	1101ffcc 	andi	r4,r2,2047
 2006e28:	20008626 	beq	r4,zero,2007044 <_dtoa_r+0x348>
 2006e2c:	d8c01217 	ldw	r3,72(sp)
 2006e30:	00800434 	movhi	r2,16
 2006e34:	10bfffc4 	addi	r2,r2,-1
 2006e38:	ddc00117 	ldw	r23,4(sp)
 2006e3c:	a884703a 	and	r2,r21,r2
 2006e40:	1811883a 	mov	r8,r3
 2006e44:	124ffc34 	orhi	r9,r2,16368
 2006e48:	25bf0044 	addi	r22,r4,-1023
 2006e4c:	d8000815 	stw	zero,32(sp)
 2006e50:	0005883a 	mov	r2,zero
 2006e54:	00cffe34 	movhi	r3,16376
 2006e58:	480b883a 	mov	r5,r9
 2006e5c:	4009883a 	mov	r4,r8
 2006e60:	180f883a 	mov	r7,r3
 2006e64:	100d883a 	mov	r6,r2
 2006e68:	2003ac40 	call	2003ac4 <__subdf3>
 2006e6c:	0218dbf4 	movhi	r8,25455
 2006e70:	4210d844 	addi	r8,r8,17249
 2006e74:	024ff4f4 	movhi	r9,16339
 2006e78:	4a61e9c4 	addi	r9,r9,-30809
 2006e7c:	480f883a 	mov	r7,r9
 2006e80:	400d883a 	mov	r6,r8
 2006e84:	180b883a 	mov	r5,r3
 2006e88:	1009883a 	mov	r4,r2
 2006e8c:	200c84c0 	call	200c84c <__muldf3>
 2006e90:	0222d874 	movhi	r8,35681
 2006e94:	42322cc4 	addi	r8,r8,-14157
 2006e98:	024ff1f4 	movhi	r9,16327
 2006e9c:	4a628a04 	addi	r9,r9,-30168
 2006ea0:	480f883a 	mov	r7,r9
 2006ea4:	400d883a 	mov	r6,r8
 2006ea8:	180b883a 	mov	r5,r3
 2006eac:	1009883a 	mov	r4,r2
 2006eb0:	2003b440 	call	2003b44 <__adddf3>
 2006eb4:	b009883a 	mov	r4,r22
 2006eb8:	1021883a 	mov	r16,r2
 2006ebc:	1823883a 	mov	r17,r3
 2006ec0:	2003c400 	call	2003c40 <__floatsidf>
 2006ec4:	021427f4 	movhi	r8,20639
 2006ec8:	421e7ec4 	addi	r8,r8,31227
 2006ecc:	024ff4f4 	movhi	r9,16339
 2006ed0:	4a5104c4 	addi	r9,r9,17427
 2006ed4:	480f883a 	mov	r7,r9
 2006ed8:	400d883a 	mov	r6,r8
 2006edc:	180b883a 	mov	r5,r3
 2006ee0:	1009883a 	mov	r4,r2
 2006ee4:	200c84c0 	call	200c84c <__muldf3>
 2006ee8:	180f883a 	mov	r7,r3
 2006eec:	880b883a 	mov	r5,r17
 2006ef0:	100d883a 	mov	r6,r2
 2006ef4:	8009883a 	mov	r4,r16
 2006ef8:	2003b440 	call	2003b44 <__adddf3>
 2006efc:	1009883a 	mov	r4,r2
 2006f00:	180b883a 	mov	r5,r3
 2006f04:	1021883a 	mov	r16,r2
 2006f08:	1823883a 	mov	r17,r3
 2006f0c:	2003d380 	call	2003d38 <__fixdfsi>
 2006f10:	000d883a 	mov	r6,zero
 2006f14:	000f883a 	mov	r7,zero
 2006f18:	8009883a 	mov	r4,r16
 2006f1c:	880b883a 	mov	r5,r17
 2006f20:	d8800d15 	stw	r2,52(sp)
 2006f24:	200d0000 	call	200d000 <__ltdf2>
 2006f28:	10031716 	blt	r2,zero,2007b88 <_dtoa_r+0xe8c>
 2006f2c:	d8c00d17 	ldw	r3,52(sp)
 2006f30:	00800584 	movi	r2,22
 2006f34:	10c1482e 	bgeu	r2,r3,2007458 <_dtoa_r+0x75c>
 2006f38:	01000044 	movi	r4,1
 2006f3c:	d9000c15 	stw	r4,48(sp)
 2006f40:	bd85c83a 	sub	r2,r23,r22
 2006f44:	11bfffc4 	addi	r6,r2,-1
 2006f48:	30030b16 	blt	r6,zero,2007b78 <_dtoa_r+0xe7c>
 2006f4c:	d9800a15 	stw	r6,40(sp)
 2006f50:	d8001115 	stw	zero,68(sp)
 2006f54:	d8c00d17 	ldw	r3,52(sp)
 2006f58:	1802ff16 	blt	r3,zero,2007b58 <_dtoa_r+0xe5c>
 2006f5c:	d9000a17 	ldw	r4,40(sp)
 2006f60:	d8c00915 	stw	r3,36(sp)
 2006f64:	d8001015 	stw	zero,64(sp)
 2006f68:	20c9883a 	add	r4,r4,r3
 2006f6c:	d9000a15 	stw	r4,40(sp)
 2006f70:	d9001717 	ldw	r4,92(sp)
 2006f74:	00800244 	movi	r2,9
 2006f78:	11004636 	bltu	r2,r4,2007094 <_dtoa_r+0x398>
 2006f7c:	00800144 	movi	r2,5
 2006f80:	11020416 	blt	r2,r4,2007794 <_dtoa_r+0xa98>
 2006f84:	04400044 	movi	r17,1
 2006f88:	d8c01717 	ldw	r3,92(sp)
 2006f8c:	00800144 	movi	r2,5
 2006f90:	10c1ed36 	bltu	r2,r3,2007748 <_dtoa_r+0xa4c>
 2006f94:	18c5883a 	add	r2,r3,r3
 2006f98:	1085883a 	add	r2,r2,r2
 2006f9c:	00c08034 	movhi	r3,512
 2006fa0:	18dbec04 	addi	r3,r3,28592
 2006fa4:	10c5883a 	add	r2,r2,r3
 2006fa8:	11000017 	ldw	r4,0(r2)
 2006fac:	2000683a 	jmp	r4
 2006fb0:	0200709c 	xori	r8,zero,450
 2006fb4:	0200709c 	xori	r8,zero,450
 2006fb8:	02007a9c 	xori	r8,zero,490
 2006fbc:	02007a74 	movhi	r8,489
 2006fc0:	02007ab8 	rdprs	r8,zero,490
 2006fc4:	02007ac4 	movi	r8,491
 2006fc8:	d9002717 	ldw	r4,156(sp)
 2006fcc:	0089c3c4 	movi	r2,9999
 2006fd0:	20800015 	stw	r2,0(r4)
 2006fd4:	a0001026 	beq	r20,zero,2007018 <_dtoa_r+0x31c>
 2006fd8:	00c08074 	movhi	r3,513
 2006fdc:	18c53d04 	addi	r3,r3,5364
 2006fe0:	d9802917 	ldw	r6,164(sp)
 2006fe4:	303f7926 	beq	r6,zero,2006dcc <_dtoa_r+0xd0>
 2006fe8:	188000c7 	ldb	r2,3(r3)
 2006fec:	190000c4 	addi	r4,r3,3
 2006ff0:	1000101e 	bne	r2,zero,2007034 <_dtoa_r+0x338>
 2006ff4:	d8802917 	ldw	r2,164(sp)
 2006ff8:	11000015 	stw	r4,0(r2)
 2006ffc:	003f7306 	br	2006dcc <_dtoa_r+0xd0>
 2007000:	00a00034 	movhi	r2,32768
 2007004:	10bfffc4 	addi	r2,r2,-1
 2007008:	00c00044 	movi	r3,1
 200700c:	88aa703a 	and	r21,r17,r2
 2007010:	90c00015 	stw	r3,0(r18)
 2007014:	003f5806 	br	2006d78 <_dtoa_r+0x7c>
 2007018:	00800434 	movhi	r2,16
 200701c:	10bfffc4 	addi	r2,r2,-1
 2007020:	a884703a 	and	r2,r21,r2
 2007024:	103fec1e 	bne	r2,zero,2006fd8 <_dtoa_r+0x2dc>
 2007028:	00c08074 	movhi	r3,513
 200702c:	18c53a04 	addi	r3,r3,5352
 2007030:	003feb06 	br	2006fe0 <_dtoa_r+0x2e4>
 2007034:	d8802917 	ldw	r2,164(sp)
 2007038:	19000204 	addi	r4,r3,8
 200703c:	11000015 	stw	r4,0(r2)
 2007040:	003f6206 	br	2006dcc <_dtoa_r+0xd0>
 2007044:	ddc00117 	ldw	r23,4(sp)
 2007048:	d8800217 	ldw	r2,8(sp)
 200704c:	01000804 	movi	r4,32
 2007050:	b8c10c84 	addi	r3,r23,1074
 2007054:	18a3883a 	add	r17,r3,r2
 2007058:	2441b80e 	bge	r4,r17,200773c <_dtoa_r+0xa40>
 200705c:	00c01004 	movi	r3,64
 2007060:	1c47c83a 	sub	r3,r3,r17
 2007064:	88bff804 	addi	r2,r17,-32
 2007068:	a8c6983a 	sll	r3,r21,r3
 200706c:	a084d83a 	srl	r2,r20,r2
 2007070:	1888b03a 	or	r4,r3,r2
 2007074:	2003e100 	call	2003e10 <__floatunsidf>
 2007078:	1011883a 	mov	r8,r2
 200707c:	00bf8434 	movhi	r2,65040
 2007080:	01000044 	movi	r4,1
 2007084:	10d3883a 	add	r9,r2,r3
 2007088:	8dbef344 	addi	r22,r17,-1075
 200708c:	d9000815 	stw	r4,32(sp)
 2007090:	003f6f06 	br	2006e50 <_dtoa_r+0x154>
 2007094:	d8001715 	stw	zero,92(sp)
 2007098:	04400044 	movi	r17,1
 200709c:	00bfffc4 	movi	r2,-1
 20070a0:	00c00044 	movi	r3,1
 20070a4:	d8800e15 	stw	r2,56(sp)
 20070a8:	d8002615 	stw	zero,152(sp)
 20070ac:	d8800f15 	stw	r2,60(sp)
 20070b0:	d8c00b15 	stw	r3,44(sp)
 20070b4:	1021883a 	mov	r16,r2
 20070b8:	d8801617 	ldw	r2,88(sp)
 20070bc:	10001115 	stw	zero,68(r2)
 20070c0:	d8801617 	ldw	r2,88(sp)
 20070c4:	11401117 	ldw	r5,68(r2)
 20070c8:	1009883a 	mov	r4,r2
 20070cc:	200a3ac0 	call	200a3ac <_Balloc>
 20070d0:	d8c01617 	ldw	r3,88(sp)
 20070d4:	d8800515 	stw	r2,20(sp)
 20070d8:	18801015 	stw	r2,64(r3)
 20070dc:	00800384 	movi	r2,14
 20070e0:	14006836 	bltu	r2,r16,2007284 <_dtoa_r+0x588>
 20070e4:	8805003a 	cmpeq	r2,r17,zero
 20070e8:	1000661e 	bne	r2,zero,2007284 <_dtoa_r+0x588>
 20070ec:	d9000d17 	ldw	r4,52(sp)
 20070f0:	0102300e 	bge	zero,r4,20079b4 <_dtoa_r+0xcb8>
 20070f4:	208003cc 	andi	r2,r4,15
 20070f8:	100490fa 	slli	r2,r2,3
 20070fc:	2025d13a 	srai	r18,r4,4
 2007100:	00c08074 	movhi	r3,513
 2007104:	18c54e04 	addi	r3,r3,5432
 2007108:	10c5883a 	add	r2,r2,r3
 200710c:	90c0040c 	andi	r3,r18,16
 2007110:	14000017 	ldw	r16,0(r2)
 2007114:	14400117 	ldw	r17,4(r2)
 2007118:	18036a1e 	bne	r3,zero,2007ec4 <_dtoa_r+0x11c8>
 200711c:	05800084 	movi	r22,2
 2007120:	90001026 	beq	r18,zero,2007164 <_dtoa_r+0x468>
 2007124:	04c08074 	movhi	r19,513
 2007128:	9cc58004 	addi	r19,r19,5632
 200712c:	9080004c 	andi	r2,r18,1
 2007130:	1005003a 	cmpeq	r2,r2,zero
 2007134:	1000081e 	bne	r2,zero,2007158 <_dtoa_r+0x45c>
 2007138:	99800017 	ldw	r6,0(r19)
 200713c:	99c00117 	ldw	r7,4(r19)
 2007140:	880b883a 	mov	r5,r17
 2007144:	8009883a 	mov	r4,r16
 2007148:	200c84c0 	call	200c84c <__muldf3>
 200714c:	1021883a 	mov	r16,r2
 2007150:	b5800044 	addi	r22,r22,1
 2007154:	1823883a 	mov	r17,r3
 2007158:	9025d07a 	srai	r18,r18,1
 200715c:	9cc00204 	addi	r19,r19,8
 2007160:	903ff21e 	bne	r18,zero,200712c <_dtoa_r+0x430>
 2007164:	a80b883a 	mov	r5,r21
 2007168:	a009883a 	mov	r4,r20
 200716c:	880f883a 	mov	r7,r17
 2007170:	800d883a 	mov	r6,r16
 2007174:	200cc100 	call	200cc10 <__divdf3>
 2007178:	1029883a 	mov	r20,r2
 200717c:	182b883a 	mov	r21,r3
 2007180:	d8c00c17 	ldw	r3,48(sp)
 2007184:	1805003a 	cmpeq	r2,r3,zero
 2007188:	1000081e 	bne	r2,zero,20071ac <_dtoa_r+0x4b0>
 200718c:	0005883a 	mov	r2,zero
 2007190:	00cffc34 	movhi	r3,16368
 2007194:	180f883a 	mov	r7,r3
 2007198:	a009883a 	mov	r4,r20
 200719c:	a80b883a 	mov	r5,r21
 20071a0:	100d883a 	mov	r6,r2
 20071a4:	200d0000 	call	200d000 <__ltdf2>
 20071a8:	1003fe16 	blt	r2,zero,20081a4 <_dtoa_r+0x14a8>
 20071ac:	b009883a 	mov	r4,r22
 20071b0:	2003c400 	call	2003c40 <__floatsidf>
 20071b4:	180b883a 	mov	r5,r3
 20071b8:	1009883a 	mov	r4,r2
 20071bc:	a00d883a 	mov	r6,r20
 20071c0:	a80f883a 	mov	r7,r21
 20071c4:	200c84c0 	call	200c84c <__muldf3>
 20071c8:	0011883a 	mov	r8,zero
 20071cc:	02500734 	movhi	r9,16412
 20071d0:	1009883a 	mov	r4,r2
 20071d4:	180b883a 	mov	r5,r3
 20071d8:	480f883a 	mov	r7,r9
 20071dc:	400d883a 	mov	r6,r8
 20071e0:	2003b440 	call	2003b44 <__adddf3>
 20071e4:	d9000f17 	ldw	r4,60(sp)
 20071e8:	102d883a 	mov	r22,r2
 20071ec:	00bf3034 	movhi	r2,64704
 20071f0:	18b9883a 	add	fp,r3,r2
 20071f4:	e02f883a 	mov	r23,fp
 20071f8:	20028f1e 	bne	r4,zero,2007c38 <_dtoa_r+0xf3c>
 20071fc:	0005883a 	mov	r2,zero
 2007200:	00d00534 	movhi	r3,16404
 2007204:	a009883a 	mov	r4,r20
 2007208:	a80b883a 	mov	r5,r21
 200720c:	180f883a 	mov	r7,r3
 2007210:	100d883a 	mov	r6,r2
 2007214:	2003ac40 	call	2003ac4 <__subdf3>
 2007218:	1009883a 	mov	r4,r2
 200721c:	e00f883a 	mov	r7,fp
 2007220:	180b883a 	mov	r5,r3
 2007224:	b00d883a 	mov	r6,r22
 2007228:	1025883a 	mov	r18,r2
 200722c:	1827883a 	mov	r19,r3
 2007230:	2003bb80 	call	2003bb8 <__gtdf2>
 2007234:	00834f16 	blt	zero,r2,2007f74 <_dtoa_r+0x1278>
 2007238:	e0e0003c 	xorhi	r3,fp,32768
 200723c:	9009883a 	mov	r4,r18
 2007240:	980b883a 	mov	r5,r19
 2007244:	180f883a 	mov	r7,r3
 2007248:	b00d883a 	mov	r6,r22
 200724c:	200d0000 	call	200d000 <__ltdf2>
 2007250:	1000080e 	bge	r2,zero,2007274 <_dtoa_r+0x578>
 2007254:	0027883a 	mov	r19,zero
 2007258:	0025883a 	mov	r18,zero
 200725c:	d8802617 	ldw	r2,152(sp)
 2007260:	df000517 	ldw	fp,20(sp)
 2007264:	d8000615 	stw	zero,24(sp)
 2007268:	0084303a 	nor	r2,zero,r2
 200726c:	d8800d15 	stw	r2,52(sp)
 2007270:	00019b06 	br	20078e0 <_dtoa_r+0xbe4>
 2007274:	d9801217 	ldw	r6,72(sp)
 2007278:	d8801317 	ldw	r2,76(sp)
 200727c:	3029883a 	mov	r20,r6
 2007280:	102b883a 	mov	r21,r2
 2007284:	d8c00217 	ldw	r3,8(sp)
 2007288:	18008516 	blt	r3,zero,20074a0 <_dtoa_r+0x7a4>
 200728c:	d9000d17 	ldw	r4,52(sp)
 2007290:	00800384 	movi	r2,14
 2007294:	11008216 	blt	r2,r4,20074a0 <_dtoa_r+0x7a4>
 2007298:	200490fa 	slli	r2,r4,3
 200729c:	d9802617 	ldw	r6,152(sp)
 20072a0:	00c08074 	movhi	r3,513
 20072a4:	18c54e04 	addi	r3,r3,5432
 20072a8:	10c5883a 	add	r2,r2,r3
 20072ac:	14800017 	ldw	r18,0(r2)
 20072b0:	14c00117 	ldw	r19,4(r2)
 20072b4:	30031e16 	blt	r6,zero,2007f30 <_dtoa_r+0x1234>
 20072b8:	d9000517 	ldw	r4,20(sp)
 20072bc:	d8c00f17 	ldw	r3,60(sp)
 20072c0:	a823883a 	mov	r17,r21
 20072c4:	a021883a 	mov	r16,r20
 20072c8:	192b883a 	add	r21,r3,r4
 20072cc:	2039883a 	mov	fp,r4
 20072d0:	00000f06 	br	2007310 <_dtoa_r+0x614>
 20072d4:	0005883a 	mov	r2,zero
 20072d8:	00d00934 	movhi	r3,16420
 20072dc:	5009883a 	mov	r4,r10
 20072e0:	580b883a 	mov	r5,r11
 20072e4:	180f883a 	mov	r7,r3
 20072e8:	100d883a 	mov	r6,r2
 20072ec:	200c84c0 	call	200c84c <__muldf3>
 20072f0:	180b883a 	mov	r5,r3
 20072f4:	000d883a 	mov	r6,zero
 20072f8:	000f883a 	mov	r7,zero
 20072fc:	1009883a 	mov	r4,r2
 2007300:	1021883a 	mov	r16,r2
 2007304:	1823883a 	mov	r17,r3
 2007308:	200cef00 	call	200cef0 <__nedf2>
 200730c:	10004526 	beq	r2,zero,2007424 <_dtoa_r+0x728>
 2007310:	900d883a 	mov	r6,r18
 2007314:	980f883a 	mov	r7,r19
 2007318:	8009883a 	mov	r4,r16
 200731c:	880b883a 	mov	r5,r17
 2007320:	200cc100 	call	200cc10 <__divdf3>
 2007324:	180b883a 	mov	r5,r3
 2007328:	1009883a 	mov	r4,r2
 200732c:	2003d380 	call	2003d38 <__fixdfsi>
 2007330:	1009883a 	mov	r4,r2
 2007334:	1029883a 	mov	r20,r2
 2007338:	2003c400 	call	2003c40 <__floatsidf>
 200733c:	180f883a 	mov	r7,r3
 2007340:	9009883a 	mov	r4,r18
 2007344:	980b883a 	mov	r5,r19
 2007348:	100d883a 	mov	r6,r2
 200734c:	200c84c0 	call	200c84c <__muldf3>
 2007350:	180f883a 	mov	r7,r3
 2007354:	880b883a 	mov	r5,r17
 2007358:	8009883a 	mov	r4,r16
 200735c:	100d883a 	mov	r6,r2
 2007360:	2003ac40 	call	2003ac4 <__subdf3>
 2007364:	1015883a 	mov	r10,r2
 2007368:	a0800c04 	addi	r2,r20,48
 200736c:	e0800005 	stb	r2,0(fp)
 2007370:	e7000044 	addi	fp,fp,1
 2007374:	1817883a 	mov	r11,r3
 2007378:	e57fd61e 	bne	fp,r21,20072d4 <_dtoa_r+0x5d8>
 200737c:	500d883a 	mov	r6,r10
 2007380:	180f883a 	mov	r7,r3
 2007384:	5009883a 	mov	r4,r10
 2007388:	180b883a 	mov	r5,r3
 200738c:	2003b440 	call	2003b44 <__adddf3>
 2007390:	100d883a 	mov	r6,r2
 2007394:	9009883a 	mov	r4,r18
 2007398:	980b883a 	mov	r5,r19
 200739c:	180f883a 	mov	r7,r3
 20073a0:	1021883a 	mov	r16,r2
 20073a4:	1823883a 	mov	r17,r3
 20073a8:	200d0000 	call	200d000 <__ltdf2>
 20073ac:	10000816 	blt	r2,zero,20073d0 <_dtoa_r+0x6d4>
 20073b0:	980b883a 	mov	r5,r19
 20073b4:	800d883a 	mov	r6,r16
 20073b8:	880f883a 	mov	r7,r17
 20073bc:	9009883a 	mov	r4,r18
 20073c0:	200ce680 	call	200ce68 <__eqdf2>
 20073c4:	1000171e 	bne	r2,zero,2007424 <_dtoa_r+0x728>
 20073c8:	a080004c 	andi	r2,r20,1
 20073cc:	10001526 	beq	r2,zero,2007424 <_dtoa_r+0x728>
 20073d0:	d8800d17 	ldw	r2,52(sp)
 20073d4:	d8800415 	stw	r2,16(sp)
 20073d8:	e009883a 	mov	r4,fp
 20073dc:	213fffc4 	addi	r4,r4,-1
 20073e0:	20c00007 	ldb	r3,0(r4)
 20073e4:	00800e44 	movi	r2,57
 20073e8:	1880081e 	bne	r3,r2,200740c <_dtoa_r+0x710>
 20073ec:	d8800517 	ldw	r2,20(sp)
 20073f0:	113ffa1e 	bne	r2,r4,20073dc <_dtoa_r+0x6e0>
 20073f4:	d8c00417 	ldw	r3,16(sp)
 20073f8:	d9800517 	ldw	r6,20(sp)
 20073fc:	00800c04 	movi	r2,48
 2007400:	18c00044 	addi	r3,r3,1
 2007404:	d8c00415 	stw	r3,16(sp)
 2007408:	30800005 	stb	r2,0(r6)
 200740c:	20800003 	ldbu	r2,0(r4)
 2007410:	d8c00417 	ldw	r3,16(sp)
 2007414:	27000044 	addi	fp,r4,1
 2007418:	10800044 	addi	r2,r2,1
 200741c:	d8c00d15 	stw	r3,52(sp)
 2007420:	20800005 	stb	r2,0(r4)
 2007424:	d9001617 	ldw	r4,88(sp)
 2007428:	d9400717 	ldw	r5,28(sp)
 200742c:	2009e2c0 	call	2009e2c <_Bfree>
 2007430:	e0000005 	stb	zero,0(fp)
 2007434:	d9800d17 	ldw	r6,52(sp)
 2007438:	d8c02717 	ldw	r3,156(sp)
 200743c:	d9002917 	ldw	r4,164(sp)
 2007440:	30800044 	addi	r2,r6,1
 2007444:	18800015 	stw	r2,0(r3)
 2007448:	20029c26 	beq	r4,zero,2007ebc <_dtoa_r+0x11c0>
 200744c:	d8c00517 	ldw	r3,20(sp)
 2007450:	27000015 	stw	fp,0(r4)
 2007454:	003e5d06 	br	2006dcc <_dtoa_r+0xd0>
 2007458:	d9800d17 	ldw	r6,52(sp)
 200745c:	00c08074 	movhi	r3,513
 2007460:	18c54e04 	addi	r3,r3,5432
 2007464:	d9001217 	ldw	r4,72(sp)
 2007468:	300490fa 	slli	r2,r6,3
 200746c:	d9401317 	ldw	r5,76(sp)
 2007470:	10c5883a 	add	r2,r2,r3
 2007474:	12000017 	ldw	r8,0(r2)
 2007478:	12400117 	ldw	r9,4(r2)
 200747c:	400d883a 	mov	r6,r8
 2007480:	480f883a 	mov	r7,r9
 2007484:	200d0000 	call	200d000 <__ltdf2>
 2007488:	1000030e 	bge	r2,zero,2007498 <_dtoa_r+0x79c>
 200748c:	d8800d17 	ldw	r2,52(sp)
 2007490:	10bfffc4 	addi	r2,r2,-1
 2007494:	d8800d15 	stw	r2,52(sp)
 2007498:	d8000c15 	stw	zero,48(sp)
 200749c:	003ea806 	br	2006f40 <_dtoa_r+0x244>
 20074a0:	d9000b17 	ldw	r4,44(sp)
 20074a4:	202cc03a 	cmpne	r22,r4,zero
 20074a8:	b000c71e 	bne	r22,zero,20077c8 <_dtoa_r+0xacc>
 20074ac:	dc001117 	ldw	r16,68(sp)
 20074b0:	dc801017 	ldw	r18,64(sp)
 20074b4:	0027883a 	mov	r19,zero
 20074b8:	04000b0e 	bge	zero,r16,20074e8 <_dtoa_r+0x7ec>
 20074bc:	d8c00a17 	ldw	r3,40(sp)
 20074c0:	00c0090e 	bge	zero,r3,20074e8 <_dtoa_r+0x7ec>
 20074c4:	8005883a 	mov	r2,r16
 20074c8:	1c011316 	blt	r3,r16,2007918 <_dtoa_r+0xc1c>
 20074cc:	d9000a17 	ldw	r4,40(sp)
 20074d0:	d9801117 	ldw	r6,68(sp)
 20074d4:	80a1c83a 	sub	r16,r16,r2
 20074d8:	2089c83a 	sub	r4,r4,r2
 20074dc:	308dc83a 	sub	r6,r6,r2
 20074e0:	d9000a15 	stw	r4,40(sp)
 20074e4:	d9801115 	stw	r6,68(sp)
 20074e8:	d8801017 	ldw	r2,64(sp)
 20074ec:	0080150e 	bge	zero,r2,2007544 <_dtoa_r+0x848>
 20074f0:	d8c00b17 	ldw	r3,44(sp)
 20074f4:	1805003a 	cmpeq	r2,r3,zero
 20074f8:	1001c91e 	bne	r2,zero,2007c20 <_dtoa_r+0xf24>
 20074fc:	04800e0e 	bge	zero,r18,2007538 <_dtoa_r+0x83c>
 2007500:	d9001617 	ldw	r4,88(sp)
 2007504:	980b883a 	mov	r5,r19
 2007508:	900d883a 	mov	r6,r18
 200750c:	200ac780 	call	200ac78 <__pow5mult>
 2007510:	d9001617 	ldw	r4,88(sp)
 2007514:	d9800717 	ldw	r6,28(sp)
 2007518:	100b883a 	mov	r5,r2
 200751c:	1027883a 	mov	r19,r2
 2007520:	200a8bc0 	call	200a8bc <__multiply>
 2007524:	d9001617 	ldw	r4,88(sp)
 2007528:	d9400717 	ldw	r5,28(sp)
 200752c:	1023883a 	mov	r17,r2
 2007530:	2009e2c0 	call	2009e2c <_Bfree>
 2007534:	dc400715 	stw	r17,28(sp)
 2007538:	d9001017 	ldw	r4,64(sp)
 200753c:	248dc83a 	sub	r6,r4,r18
 2007540:	30010e1e 	bne	r6,zero,200797c <_dtoa_r+0xc80>
 2007544:	d9001617 	ldw	r4,88(sp)
 2007548:	04400044 	movi	r17,1
 200754c:	880b883a 	mov	r5,r17
 2007550:	200ab100 	call	200ab10 <__i2b>
 2007554:	d9800917 	ldw	r6,36(sp)
 2007558:	1025883a 	mov	r18,r2
 200755c:	0180040e 	bge	zero,r6,2007570 <_dtoa_r+0x874>
 2007560:	d9001617 	ldw	r4,88(sp)
 2007564:	100b883a 	mov	r5,r2
 2007568:	200ac780 	call	200ac78 <__pow5mult>
 200756c:	1025883a 	mov	r18,r2
 2007570:	d8801717 	ldw	r2,92(sp)
 2007574:	8880f30e 	bge	r17,r2,2007944 <_dtoa_r+0xc48>
 2007578:	0023883a 	mov	r17,zero
 200757c:	d9800917 	ldw	r6,36(sp)
 2007580:	30019e1e 	bne	r6,zero,2007bfc <_dtoa_r+0xf00>
 2007584:	00c00044 	movi	r3,1
 2007588:	d9000a17 	ldw	r4,40(sp)
 200758c:	20c5883a 	add	r2,r4,r3
 2007590:	10c007cc 	andi	r3,r2,31
 2007594:	1800841e 	bne	r3,zero,20077a8 <_dtoa_r+0xaac>
 2007598:	00800704 	movi	r2,28
 200759c:	d9000a17 	ldw	r4,40(sp)
 20075a0:	d9801117 	ldw	r6,68(sp)
 20075a4:	80a1883a 	add	r16,r16,r2
 20075a8:	2089883a 	add	r4,r4,r2
 20075ac:	308d883a 	add	r6,r6,r2
 20075b0:	d9000a15 	stw	r4,40(sp)
 20075b4:	d9801115 	stw	r6,68(sp)
 20075b8:	d8801117 	ldw	r2,68(sp)
 20075bc:	0080050e 	bge	zero,r2,20075d4 <_dtoa_r+0x8d8>
 20075c0:	d9400717 	ldw	r5,28(sp)
 20075c4:	d9001617 	ldw	r4,88(sp)
 20075c8:	100d883a 	mov	r6,r2
 20075cc:	200a7700 	call	200a770 <__lshift>
 20075d0:	d8800715 	stw	r2,28(sp)
 20075d4:	d8c00a17 	ldw	r3,40(sp)
 20075d8:	00c0050e 	bge	zero,r3,20075f0 <_dtoa_r+0x8f4>
 20075dc:	d9001617 	ldw	r4,88(sp)
 20075e0:	900b883a 	mov	r5,r18
 20075e4:	180d883a 	mov	r6,r3
 20075e8:	200a7700 	call	200a770 <__lshift>
 20075ec:	1025883a 	mov	r18,r2
 20075f0:	d9000c17 	ldw	r4,48(sp)
 20075f4:	2005003a 	cmpeq	r2,r4,zero
 20075f8:	10016f26 	beq	r2,zero,2007bb8 <_dtoa_r+0xebc>
 20075fc:	d9000f17 	ldw	r4,60(sp)
 2007600:	0102170e 	bge	zero,r4,2007e60 <_dtoa_r+0x1164>
 2007604:	d9800b17 	ldw	r6,44(sp)
 2007608:	3005003a 	cmpeq	r2,r6,zero
 200760c:	1000881e 	bne	r2,zero,2007830 <_dtoa_r+0xb34>
 2007610:	0400050e 	bge	zero,r16,2007628 <_dtoa_r+0x92c>
 2007614:	d9001617 	ldw	r4,88(sp)
 2007618:	980b883a 	mov	r5,r19
 200761c:	800d883a 	mov	r6,r16
 2007620:	200a7700 	call	200a770 <__lshift>
 2007624:	1027883a 	mov	r19,r2
 2007628:	8804c03a 	cmpne	r2,r17,zero
 200762c:	1002541e 	bne	r2,zero,2007f80 <_dtoa_r+0x1284>
 2007630:	980b883a 	mov	r5,r19
 2007634:	dd800517 	ldw	r22,20(sp)
 2007638:	dcc00615 	stw	r19,24(sp)
 200763c:	a700004c 	andi	fp,r20,1
 2007640:	2827883a 	mov	r19,r5
 2007644:	d9000717 	ldw	r4,28(sp)
 2007648:	900b883a 	mov	r5,r18
 200764c:	2006ab80 	call	2006ab8 <quorem>
 2007650:	d9000717 	ldw	r4,28(sp)
 2007654:	d9400617 	ldw	r5,24(sp)
 2007658:	1023883a 	mov	r17,r2
 200765c:	8dc00c04 	addi	r23,r17,48
 2007660:	2009f880 	call	2009f88 <__mcmp>
 2007664:	d9001617 	ldw	r4,88(sp)
 2007668:	900b883a 	mov	r5,r18
 200766c:	980d883a 	mov	r6,r19
 2007670:	1029883a 	mov	r20,r2
 2007674:	200a5e40 	call	200a5e4 <__mdiff>
 2007678:	102b883a 	mov	r21,r2
 200767c:	10800317 	ldw	r2,12(r2)
 2007680:	1001281e 	bne	r2,zero,2007b24 <_dtoa_r+0xe28>
 2007684:	d9000717 	ldw	r4,28(sp)
 2007688:	a80b883a 	mov	r5,r21
 200768c:	2009f880 	call	2009f88 <__mcmp>
 2007690:	d9001617 	ldw	r4,88(sp)
 2007694:	1021883a 	mov	r16,r2
 2007698:	a80b883a 	mov	r5,r21
 200769c:	2009e2c0 	call	2009e2c <_Bfree>
 20076a0:	8000041e 	bne	r16,zero,20076b4 <_dtoa_r+0x9b8>
 20076a4:	d8801717 	ldw	r2,92(sp)
 20076a8:	1000021e 	bne	r2,zero,20076b4 <_dtoa_r+0x9b8>
 20076ac:	e004c03a 	cmpne	r2,fp,zero
 20076b0:	10011726 	beq	r2,zero,2007b10 <_dtoa_r+0xe14>
 20076b4:	a0010616 	blt	r20,zero,2007ad0 <_dtoa_r+0xdd4>
 20076b8:	a000041e 	bne	r20,zero,20076cc <_dtoa_r+0x9d0>
 20076bc:	d8c01717 	ldw	r3,92(sp)
 20076c0:	1800021e 	bne	r3,zero,20076cc <_dtoa_r+0x9d0>
 20076c4:	e004c03a 	cmpne	r2,fp,zero
 20076c8:	10010126 	beq	r2,zero,2007ad0 <_dtoa_r+0xdd4>
 20076cc:	04023d16 	blt	zero,r16,2007fc4 <_dtoa_r+0x12c8>
 20076d0:	b5c00005 	stb	r23,0(r22)
 20076d4:	d9800517 	ldw	r6,20(sp)
 20076d8:	d9000f17 	ldw	r4,60(sp)
 20076dc:	b5800044 	addi	r22,r22,1
 20076e0:	3105883a 	add	r2,r6,r4
 20076e4:	b0806526 	beq	r22,r2,200787c <_dtoa_r+0xb80>
 20076e8:	d9400717 	ldw	r5,28(sp)
 20076ec:	d9001617 	ldw	r4,88(sp)
 20076f0:	01800284 	movi	r6,10
 20076f4:	000f883a 	mov	r7,zero
 20076f8:	200ab4c0 	call	200ab4c <__multadd>
 20076fc:	d8800715 	stw	r2,28(sp)
 2007700:	d8800617 	ldw	r2,24(sp)
 2007704:	14c10c26 	beq	r2,r19,2007b38 <_dtoa_r+0xe3c>
 2007708:	d9400617 	ldw	r5,24(sp)
 200770c:	d9001617 	ldw	r4,88(sp)
 2007710:	01800284 	movi	r6,10
 2007714:	000f883a 	mov	r7,zero
 2007718:	200ab4c0 	call	200ab4c <__multadd>
 200771c:	d9001617 	ldw	r4,88(sp)
 2007720:	980b883a 	mov	r5,r19
 2007724:	01800284 	movi	r6,10
 2007728:	000f883a 	mov	r7,zero
 200772c:	d8800615 	stw	r2,24(sp)
 2007730:	200ab4c0 	call	200ab4c <__multadd>
 2007734:	1027883a 	mov	r19,r2
 2007738:	003fc206 	br	2007644 <_dtoa_r+0x948>
 200773c:	2445c83a 	sub	r2,r4,r17
 2007740:	a088983a 	sll	r4,r20,r2
 2007744:	003e4b06 	br	2007074 <_dtoa_r+0x378>
 2007748:	01bfffc4 	movi	r6,-1
 200774c:	00800044 	movi	r2,1
 2007750:	d9800e15 	stw	r6,56(sp)
 2007754:	d9800f15 	stw	r6,60(sp)
 2007758:	d8800b15 	stw	r2,44(sp)
 200775c:	d8c01617 	ldw	r3,88(sp)
 2007760:	008005c4 	movi	r2,23
 2007764:	18001115 	stw	zero,68(r3)
 2007768:	1580082e 	bgeu	r2,r22,200778c <_dtoa_r+0xa90>
 200776c:	00c00104 	movi	r3,4
 2007770:	0009883a 	mov	r4,zero
 2007774:	18c7883a 	add	r3,r3,r3
 2007778:	18800504 	addi	r2,r3,20
 200777c:	21000044 	addi	r4,r4,1
 2007780:	b0bffc2e 	bgeu	r22,r2,2007774 <_dtoa_r+0xa78>
 2007784:	d9801617 	ldw	r6,88(sp)
 2007788:	31001115 	stw	r4,68(r6)
 200778c:	dc000f17 	ldw	r16,60(sp)
 2007790:	003e4b06 	br	20070c0 <_dtoa_r+0x3c4>
 2007794:	d9801717 	ldw	r6,92(sp)
 2007798:	0023883a 	mov	r17,zero
 200779c:	31bfff04 	addi	r6,r6,-4
 20077a0:	d9801715 	stw	r6,92(sp)
 20077a4:	003df806 	br	2006f88 <_dtoa_r+0x28c>
 20077a8:	00800804 	movi	r2,32
 20077ac:	10c9c83a 	sub	r4,r2,r3
 20077b0:	00c00104 	movi	r3,4
 20077b4:	19005a16 	blt	r3,r4,2007920 <_dtoa_r+0xc24>
 20077b8:	008000c4 	movi	r2,3
 20077bc:	113f7e16 	blt	r2,r4,20075b8 <_dtoa_r+0x8bc>
 20077c0:	20800704 	addi	r2,r4,28
 20077c4:	003f7506 	br	200759c <_dtoa_r+0x8a0>
 20077c8:	d9801717 	ldw	r6,92(sp)
 20077cc:	00800044 	movi	r2,1
 20077d0:	1180a10e 	bge	r2,r6,2007a58 <_dtoa_r+0xd5c>
 20077d4:	d9800f17 	ldw	r6,60(sp)
 20077d8:	d8c01017 	ldw	r3,64(sp)
 20077dc:	30bfffc4 	addi	r2,r6,-1
 20077e0:	1881c616 	blt	r3,r2,2007efc <_dtoa_r+0x1200>
 20077e4:	18a5c83a 	sub	r18,r3,r2
 20077e8:	d8800f17 	ldw	r2,60(sp)
 20077ec:	10026216 	blt	r2,zero,2008178 <_dtoa_r+0x147c>
 20077f0:	dc001117 	ldw	r16,68(sp)
 20077f4:	1007883a 	mov	r3,r2
 20077f8:	d9800a17 	ldw	r6,40(sp)
 20077fc:	d8801117 	ldw	r2,68(sp)
 2007800:	d9001617 	ldw	r4,88(sp)
 2007804:	30cd883a 	add	r6,r6,r3
 2007808:	10c5883a 	add	r2,r2,r3
 200780c:	01400044 	movi	r5,1
 2007810:	d9800a15 	stw	r6,40(sp)
 2007814:	d8801115 	stw	r2,68(sp)
 2007818:	200ab100 	call	200ab10 <__i2b>
 200781c:	1027883a 	mov	r19,r2
 2007820:	003f2506 	br	20074b8 <_dtoa_r+0x7bc>
 2007824:	00c08074 	movhi	r3,513
 2007828:	18c47a04 	addi	r3,r3,4584
 200782c:	003d6706 	br	2006dcc <_dtoa_r+0xd0>
 2007830:	dd800517 	ldw	r22,20(sp)
 2007834:	04000044 	movi	r16,1
 2007838:	00000706 	br	2007858 <_dtoa_r+0xb5c>
 200783c:	d9400717 	ldw	r5,28(sp)
 2007840:	d9001617 	ldw	r4,88(sp)
 2007844:	01800284 	movi	r6,10
 2007848:	000f883a 	mov	r7,zero
 200784c:	200ab4c0 	call	200ab4c <__multadd>
 2007850:	d8800715 	stw	r2,28(sp)
 2007854:	84000044 	addi	r16,r16,1
 2007858:	d9000717 	ldw	r4,28(sp)
 200785c:	900b883a 	mov	r5,r18
 2007860:	2006ab80 	call	2006ab8 <quorem>
 2007864:	15c00c04 	addi	r23,r2,48
 2007868:	b5c00005 	stb	r23,0(r22)
 200786c:	d8c00f17 	ldw	r3,60(sp)
 2007870:	b5800044 	addi	r22,r22,1
 2007874:	80fff116 	blt	r16,r3,200783c <_dtoa_r+0xb40>
 2007878:	d8000615 	stw	zero,24(sp)
 200787c:	d9400717 	ldw	r5,28(sp)
 2007880:	d9001617 	ldw	r4,88(sp)
 2007884:	01800044 	movi	r6,1
 2007888:	200a7700 	call	200a770 <__lshift>
 200788c:	1009883a 	mov	r4,r2
 2007890:	900b883a 	mov	r5,r18
 2007894:	d8800715 	stw	r2,28(sp)
 2007898:	2009f880 	call	2009f88 <__mcmp>
 200789c:	00803c0e 	bge	zero,r2,2007990 <_dtoa_r+0xc94>
 20078a0:	b009883a 	mov	r4,r22
 20078a4:	213fffc4 	addi	r4,r4,-1
 20078a8:	21400003 	ldbu	r5,0(r4)
 20078ac:	00800e44 	movi	r2,57
 20078b0:	28c03fcc 	andi	r3,r5,255
 20078b4:	18c0201c 	xori	r3,r3,128
 20078b8:	18ffe004 	addi	r3,r3,-128
 20078bc:	1881981e 	bne	r3,r2,2007f20 <_dtoa_r+0x1224>
 20078c0:	d9800517 	ldw	r6,20(sp)
 20078c4:	21bff71e 	bne	r4,r6,20078a4 <_dtoa_r+0xba8>
 20078c8:	d8800d17 	ldw	r2,52(sp)
 20078cc:	37000044 	addi	fp,r6,1
 20078d0:	10800044 	addi	r2,r2,1
 20078d4:	d8800d15 	stw	r2,52(sp)
 20078d8:	00800c44 	movi	r2,49
 20078dc:	30800005 	stb	r2,0(r6)
 20078e0:	d9001617 	ldw	r4,88(sp)
 20078e4:	900b883a 	mov	r5,r18
 20078e8:	2009e2c0 	call	2009e2c <_Bfree>
 20078ec:	983ecd26 	beq	r19,zero,2007424 <_dtoa_r+0x728>
 20078f0:	d8c00617 	ldw	r3,24(sp)
 20078f4:	18000426 	beq	r3,zero,2007908 <_dtoa_r+0xc0c>
 20078f8:	1cc00326 	beq	r3,r19,2007908 <_dtoa_r+0xc0c>
 20078fc:	d9001617 	ldw	r4,88(sp)
 2007900:	180b883a 	mov	r5,r3
 2007904:	2009e2c0 	call	2009e2c <_Bfree>
 2007908:	d9001617 	ldw	r4,88(sp)
 200790c:	980b883a 	mov	r5,r19
 2007910:	2009e2c0 	call	2009e2c <_Bfree>
 2007914:	003ec306 	br	2007424 <_dtoa_r+0x728>
 2007918:	1805883a 	mov	r2,r3
 200791c:	003eeb06 	br	20074cc <_dtoa_r+0x7d0>
 2007920:	d9800a17 	ldw	r6,40(sp)
 2007924:	d8c01117 	ldw	r3,68(sp)
 2007928:	20bfff04 	addi	r2,r4,-4
 200792c:	308d883a 	add	r6,r6,r2
 2007930:	1887883a 	add	r3,r3,r2
 2007934:	80a1883a 	add	r16,r16,r2
 2007938:	d9800a15 	stw	r6,40(sp)
 200793c:	d8c01115 	stw	r3,68(sp)
 2007940:	003f1d06 	br	20075b8 <_dtoa_r+0x8bc>
 2007944:	a03f0c1e 	bne	r20,zero,2007578 <_dtoa_r+0x87c>
 2007948:	00800434 	movhi	r2,16
 200794c:	10bfffc4 	addi	r2,r2,-1
 2007950:	a884703a 	and	r2,r21,r2
 2007954:	103f081e 	bne	r2,zero,2007578 <_dtoa_r+0x87c>
 2007958:	a89ffc2c 	andhi	r2,r21,32752
 200795c:	103f0626 	beq	r2,zero,2007578 <_dtoa_r+0x87c>
 2007960:	d8c01117 	ldw	r3,68(sp)
 2007964:	d9000a17 	ldw	r4,40(sp)
 2007968:	18c00044 	addi	r3,r3,1
 200796c:	21000044 	addi	r4,r4,1
 2007970:	d8c01115 	stw	r3,68(sp)
 2007974:	d9000a15 	stw	r4,40(sp)
 2007978:	003f0006 	br	200757c <_dtoa_r+0x880>
 200797c:	d9400717 	ldw	r5,28(sp)
 2007980:	d9001617 	ldw	r4,88(sp)
 2007984:	200ac780 	call	200ac78 <__pow5mult>
 2007988:	d8800715 	stw	r2,28(sp)
 200798c:	003eed06 	br	2007544 <_dtoa_r+0x848>
 2007990:	1000021e 	bne	r2,zero,200799c <_dtoa_r+0xca0>
 2007994:	b880004c 	andi	r2,r23,1
 2007998:	103fc11e 	bne	r2,zero,20078a0 <_dtoa_r+0xba4>
 200799c:	b5bfffc4 	addi	r22,r22,-1
 20079a0:	b0c00007 	ldb	r3,0(r22)
 20079a4:	00800c04 	movi	r2,48
 20079a8:	18bffc26 	beq	r3,r2,200799c <_dtoa_r+0xca0>
 20079ac:	b7000044 	addi	fp,r22,1
 20079b0:	003fcb06 	br	20078e0 <_dtoa_r+0xbe4>
 20079b4:	d9800d17 	ldw	r6,52(sp)
 20079b8:	018fc83a 	sub	r7,zero,r6
 20079bc:	3801f726 	beq	r7,zero,200819c <_dtoa_r+0x14a0>
 20079c0:	398003cc 	andi	r6,r7,15
 20079c4:	300c90fa 	slli	r6,r6,3
 20079c8:	01408074 	movhi	r5,513
 20079cc:	29454e04 	addi	r5,r5,5432
 20079d0:	d9001217 	ldw	r4,72(sp)
 20079d4:	314d883a 	add	r6,r6,r5
 20079d8:	30c00117 	ldw	r3,4(r6)
 20079dc:	30800017 	ldw	r2,0(r6)
 20079e0:	d9401317 	ldw	r5,76(sp)
 20079e4:	3821d13a 	srai	r16,r7,4
 20079e8:	100d883a 	mov	r6,r2
 20079ec:	180f883a 	mov	r7,r3
 20079f0:	200c84c0 	call	200c84c <__muldf3>
 20079f4:	1011883a 	mov	r8,r2
 20079f8:	1813883a 	mov	r9,r3
 20079fc:	1029883a 	mov	r20,r2
 2007a00:	182b883a 	mov	r21,r3
 2007a04:	8001e526 	beq	r16,zero,200819c <_dtoa_r+0x14a0>
 2007a08:	05800084 	movi	r22,2
 2007a0c:	04408074 	movhi	r17,513
 2007a10:	8c458004 	addi	r17,r17,5632
 2007a14:	8080004c 	andi	r2,r16,1
 2007a18:	1005003a 	cmpeq	r2,r2,zero
 2007a1c:	1000081e 	bne	r2,zero,2007a40 <_dtoa_r+0xd44>
 2007a20:	89800017 	ldw	r6,0(r17)
 2007a24:	89c00117 	ldw	r7,4(r17)
 2007a28:	480b883a 	mov	r5,r9
 2007a2c:	4009883a 	mov	r4,r8
 2007a30:	200c84c0 	call	200c84c <__muldf3>
 2007a34:	1011883a 	mov	r8,r2
 2007a38:	b5800044 	addi	r22,r22,1
 2007a3c:	1813883a 	mov	r9,r3
 2007a40:	8021d07a 	srai	r16,r16,1
 2007a44:	8c400204 	addi	r17,r17,8
 2007a48:	803ff21e 	bne	r16,zero,2007a14 <_dtoa_r+0xd18>
 2007a4c:	4029883a 	mov	r20,r8
 2007a50:	482b883a 	mov	r21,r9
 2007a54:	003dca06 	br	2007180 <_dtoa_r+0x484>
 2007a58:	d9000817 	ldw	r4,32(sp)
 2007a5c:	2005003a 	cmpeq	r2,r4,zero
 2007a60:	1001f61e 	bne	r2,zero,200823c <_dtoa_r+0x1540>
 2007a64:	dc001117 	ldw	r16,68(sp)
 2007a68:	dc801017 	ldw	r18,64(sp)
 2007a6c:	18c10cc4 	addi	r3,r3,1075
 2007a70:	003f6106 	br	20077f8 <_dtoa_r+0xafc>
 2007a74:	d8000b15 	stw	zero,44(sp)
 2007a78:	d9802617 	ldw	r6,152(sp)
 2007a7c:	d8c00d17 	ldw	r3,52(sp)
 2007a80:	30800044 	addi	r2,r6,1
 2007a84:	18ad883a 	add	r22,r3,r2
 2007a88:	b13fffc4 	addi	r4,r22,-1
 2007a8c:	d9000e15 	stw	r4,56(sp)
 2007a90:	0581f60e 	bge	zero,r22,200826c <_dtoa_r+0x1570>
 2007a94:	dd800f15 	stw	r22,60(sp)
 2007a98:	003f3006 	br	200775c <_dtoa_r+0xa60>
 2007a9c:	d8000b15 	stw	zero,44(sp)
 2007aa0:	d9002617 	ldw	r4,152(sp)
 2007aa4:	0101eb0e 	bge	zero,r4,2008254 <_dtoa_r+0x1558>
 2007aa8:	202d883a 	mov	r22,r4
 2007aac:	d9000e15 	stw	r4,56(sp)
 2007ab0:	d9000f15 	stw	r4,60(sp)
 2007ab4:	003f2906 	br	200775c <_dtoa_r+0xa60>
 2007ab8:	01800044 	movi	r6,1
 2007abc:	d9800b15 	stw	r6,44(sp)
 2007ac0:	003ff706 	br	2007aa0 <_dtoa_r+0xda4>
 2007ac4:	01000044 	movi	r4,1
 2007ac8:	d9000b15 	stw	r4,44(sp)
 2007acc:	003fea06 	br	2007a78 <_dtoa_r+0xd7c>
 2007ad0:	04000c0e 	bge	zero,r16,2007b04 <_dtoa_r+0xe08>
 2007ad4:	d9400717 	ldw	r5,28(sp)
 2007ad8:	d9001617 	ldw	r4,88(sp)
 2007adc:	01800044 	movi	r6,1
 2007ae0:	200a7700 	call	200a770 <__lshift>
 2007ae4:	1009883a 	mov	r4,r2
 2007ae8:	900b883a 	mov	r5,r18
 2007aec:	d8800715 	stw	r2,28(sp)
 2007af0:	2009f880 	call	2009f88 <__mcmp>
 2007af4:	0081e00e 	bge	zero,r2,2008278 <_dtoa_r+0x157c>
 2007af8:	bdc00044 	addi	r23,r23,1
 2007afc:	00800e84 	movi	r2,58
 2007b00:	b881a226 	beq	r23,r2,200818c <_dtoa_r+0x1490>
 2007b04:	b7000044 	addi	fp,r22,1
 2007b08:	b5c00005 	stb	r23,0(r22)
 2007b0c:	003f7406 	br	20078e0 <_dtoa_r+0xbe4>
 2007b10:	00800e44 	movi	r2,57
 2007b14:	b8819d26 	beq	r23,r2,200818c <_dtoa_r+0x1490>
 2007b18:	053ffa0e 	bge	zero,r20,2007b04 <_dtoa_r+0xe08>
 2007b1c:	8dc00c44 	addi	r23,r17,49
 2007b20:	003ff806 	br	2007b04 <_dtoa_r+0xe08>
 2007b24:	d9001617 	ldw	r4,88(sp)
 2007b28:	a80b883a 	mov	r5,r21
 2007b2c:	04000044 	movi	r16,1
 2007b30:	2009e2c0 	call	2009e2c <_Bfree>
 2007b34:	003edf06 	br	20076b4 <_dtoa_r+0x9b8>
 2007b38:	d9001617 	ldw	r4,88(sp)
 2007b3c:	980b883a 	mov	r5,r19
 2007b40:	01800284 	movi	r6,10
 2007b44:	000f883a 	mov	r7,zero
 2007b48:	200ab4c0 	call	200ab4c <__multadd>
 2007b4c:	1027883a 	mov	r19,r2
 2007b50:	d8800615 	stw	r2,24(sp)
 2007b54:	003ebb06 	br	2007644 <_dtoa_r+0x948>
 2007b58:	d9801117 	ldw	r6,68(sp)
 2007b5c:	d8800d17 	ldw	r2,52(sp)
 2007b60:	d8000915 	stw	zero,36(sp)
 2007b64:	308dc83a 	sub	r6,r6,r2
 2007b68:	0087c83a 	sub	r3,zero,r2
 2007b6c:	d9801115 	stw	r6,68(sp)
 2007b70:	d8c01015 	stw	r3,64(sp)
 2007b74:	003cfe06 	br	2006f70 <_dtoa_r+0x274>
 2007b78:	018dc83a 	sub	r6,zero,r6
 2007b7c:	d9801115 	stw	r6,68(sp)
 2007b80:	d8000a15 	stw	zero,40(sp)
 2007b84:	003cf306 	br	2006f54 <_dtoa_r+0x258>
 2007b88:	d9000d17 	ldw	r4,52(sp)
 2007b8c:	2003c400 	call	2003c40 <__floatsidf>
 2007b90:	880b883a 	mov	r5,r17
 2007b94:	8009883a 	mov	r4,r16
 2007b98:	180f883a 	mov	r7,r3
 2007b9c:	100d883a 	mov	r6,r2
 2007ba0:	200cef00 	call	200cef0 <__nedf2>
 2007ba4:	103ce126 	beq	r2,zero,2006f2c <_dtoa_r+0x230>
 2007ba8:	d9800d17 	ldw	r6,52(sp)
 2007bac:	31bfffc4 	addi	r6,r6,-1
 2007bb0:	d9800d15 	stw	r6,52(sp)
 2007bb4:	003cdd06 	br	2006f2c <_dtoa_r+0x230>
 2007bb8:	d9000717 	ldw	r4,28(sp)
 2007bbc:	900b883a 	mov	r5,r18
 2007bc0:	2009f880 	call	2009f88 <__mcmp>
 2007bc4:	103e8d0e 	bge	r2,zero,20075fc <_dtoa_r+0x900>
 2007bc8:	d9400717 	ldw	r5,28(sp)
 2007bcc:	d9001617 	ldw	r4,88(sp)
 2007bd0:	01800284 	movi	r6,10
 2007bd4:	000f883a 	mov	r7,zero
 2007bd8:	200ab4c0 	call	200ab4c <__multadd>
 2007bdc:	d9800d17 	ldw	r6,52(sp)
 2007be0:	d8800715 	stw	r2,28(sp)
 2007be4:	31bfffc4 	addi	r6,r6,-1
 2007be8:	d9800d15 	stw	r6,52(sp)
 2007bec:	b001a71e 	bne	r22,zero,200828c <_dtoa_r+0x1590>
 2007bf0:	d8800e17 	ldw	r2,56(sp)
 2007bf4:	d8800f15 	stw	r2,60(sp)
 2007bf8:	003e8006 	br	20075fc <_dtoa_r+0x900>
 2007bfc:	90800417 	ldw	r2,16(r18)
 2007c00:	1085883a 	add	r2,r2,r2
 2007c04:	1085883a 	add	r2,r2,r2
 2007c08:	1485883a 	add	r2,r2,r18
 2007c0c:	11000417 	ldw	r4,16(r2)
 2007c10:	2009e540 	call	2009e54 <__hi0bits>
 2007c14:	00c00804 	movi	r3,32
 2007c18:	1887c83a 	sub	r3,r3,r2
 2007c1c:	003e5a06 	br	2007588 <_dtoa_r+0x88c>
 2007c20:	d9400717 	ldw	r5,28(sp)
 2007c24:	d9801017 	ldw	r6,64(sp)
 2007c28:	d9001617 	ldw	r4,88(sp)
 2007c2c:	200ac780 	call	200ac78 <__pow5mult>
 2007c30:	d8800715 	stw	r2,28(sp)
 2007c34:	003e4306 	br	2007544 <_dtoa_r+0x848>
 2007c38:	d9800f17 	ldw	r6,60(sp)
 2007c3c:	d8800d17 	ldw	r2,52(sp)
 2007c40:	d9800315 	stw	r6,12(sp)
 2007c44:	d8800415 	stw	r2,16(sp)
 2007c48:	d8c00b17 	ldw	r3,44(sp)
 2007c4c:	1805003a 	cmpeq	r2,r3,zero
 2007c50:	1000e21e 	bne	r2,zero,2007fdc <_dtoa_r+0x12e0>
 2007c54:	d9000317 	ldw	r4,12(sp)
 2007c58:	0005883a 	mov	r2,zero
 2007c5c:	00cff834 	movhi	r3,16352
 2007c60:	200c90fa 	slli	r6,r4,3
 2007c64:	01008074 	movhi	r4,513
 2007c68:	21054e04 	addi	r4,r4,5432
 2007c6c:	180b883a 	mov	r5,r3
 2007c70:	310d883a 	add	r6,r6,r4
 2007c74:	327fff17 	ldw	r9,-4(r6)
 2007c78:	323ffe17 	ldw	r8,-8(r6)
 2007c7c:	1009883a 	mov	r4,r2
 2007c80:	480f883a 	mov	r7,r9
 2007c84:	400d883a 	mov	r6,r8
 2007c88:	200cc100 	call	200cc10 <__divdf3>
 2007c8c:	180b883a 	mov	r5,r3
 2007c90:	b00d883a 	mov	r6,r22
 2007c94:	b80f883a 	mov	r7,r23
 2007c98:	1009883a 	mov	r4,r2
 2007c9c:	2003ac40 	call	2003ac4 <__subdf3>
 2007ca0:	a80b883a 	mov	r5,r21
 2007ca4:	a009883a 	mov	r4,r20
 2007ca8:	d8c01915 	stw	r3,100(sp)
 2007cac:	d8801815 	stw	r2,96(sp)
 2007cb0:	2003d380 	call	2003d38 <__fixdfsi>
 2007cb4:	1009883a 	mov	r4,r2
 2007cb8:	1027883a 	mov	r19,r2
 2007cbc:	2003c400 	call	2003c40 <__floatsidf>
 2007cc0:	a80b883a 	mov	r5,r21
 2007cc4:	a009883a 	mov	r4,r20
 2007cc8:	180f883a 	mov	r7,r3
 2007ccc:	100d883a 	mov	r6,r2
 2007cd0:	2003ac40 	call	2003ac4 <__subdf3>
 2007cd4:	d9801817 	ldw	r6,96(sp)
 2007cd8:	1823883a 	mov	r17,r3
 2007cdc:	d8801415 	stw	r2,80(sp)
 2007ce0:	302d883a 	mov	r22,r6
 2007ce4:	d9800517 	ldw	r6,20(sp)
 2007ce8:	9cc00c04 	addi	r19,r19,48
 2007cec:	dc401515 	stw	r17,84(sp)
 2007cf0:	d8c01917 	ldw	r3,100(sp)
 2007cf4:	34c00005 	stb	r19,0(r6)
 2007cf8:	d8800517 	ldw	r2,20(sp)
 2007cfc:	d9401917 	ldw	r5,100(sp)
 2007d00:	d9801417 	ldw	r6,80(sp)
 2007d04:	b009883a 	mov	r4,r22
 2007d08:	880f883a 	mov	r7,r17
 2007d0c:	182f883a 	mov	r23,r3
 2007d10:	17000044 	addi	fp,r2,1
 2007d14:	2003bb80 	call	2003bb8 <__gtdf2>
 2007d18:	00804e16 	blt	zero,r2,2007e54 <_dtoa_r+0x1158>
 2007d1c:	d9801417 	ldw	r6,80(sp)
 2007d20:	0005883a 	mov	r2,zero
 2007d24:	00cffc34 	movhi	r3,16368
 2007d28:	180b883a 	mov	r5,r3
 2007d2c:	880f883a 	mov	r7,r17
 2007d30:	1009883a 	mov	r4,r2
 2007d34:	2003ac40 	call	2003ac4 <__subdf3>
 2007d38:	d9401917 	ldw	r5,100(sp)
 2007d3c:	180f883a 	mov	r7,r3
 2007d40:	b009883a 	mov	r4,r22
 2007d44:	100d883a 	mov	r6,r2
 2007d48:	2003bb80 	call	2003bb8 <__gtdf2>
 2007d4c:	00bda216 	blt	zero,r2,20073d8 <_dtoa_r+0x6dc>
 2007d50:	d8c00317 	ldw	r3,12(sp)
 2007d54:	00800044 	movi	r2,1
 2007d58:	10c01216 	blt	r2,r3,2007da4 <_dtoa_r+0x10a8>
 2007d5c:	003d4506 	br	2007274 <_dtoa_r+0x578>
 2007d60:	d9801417 	ldw	r6,80(sp)
 2007d64:	0005883a 	mov	r2,zero
 2007d68:	00cffc34 	movhi	r3,16368
 2007d6c:	180b883a 	mov	r5,r3
 2007d70:	880f883a 	mov	r7,r17
 2007d74:	1009883a 	mov	r4,r2
 2007d78:	2003ac40 	call	2003ac4 <__subdf3>
 2007d7c:	d9c01b17 	ldw	r7,108(sp)
 2007d80:	180b883a 	mov	r5,r3
 2007d84:	1009883a 	mov	r4,r2
 2007d88:	b00d883a 	mov	r6,r22
 2007d8c:	200d0000 	call	200d000 <__ltdf2>
 2007d90:	103d9116 	blt	r2,zero,20073d8 <_dtoa_r+0x6dc>
 2007d94:	d9800517 	ldw	r6,20(sp)
 2007d98:	d9000317 	ldw	r4,12(sp)
 2007d9c:	3105883a 	add	r2,r6,r4
 2007da0:	e0bd3426 	beq	fp,r2,2007274 <_dtoa_r+0x578>
 2007da4:	04500934 	movhi	r17,16420
 2007da8:	0021883a 	mov	r16,zero
 2007dac:	b80b883a 	mov	r5,r23
 2007db0:	b009883a 	mov	r4,r22
 2007db4:	800d883a 	mov	r6,r16
 2007db8:	880f883a 	mov	r7,r17
 2007dbc:	200c84c0 	call	200c84c <__muldf3>
 2007dc0:	d9401517 	ldw	r5,84(sp)
 2007dc4:	d9001417 	ldw	r4,80(sp)
 2007dc8:	880f883a 	mov	r7,r17
 2007dcc:	000d883a 	mov	r6,zero
 2007dd0:	d8801a15 	stw	r2,104(sp)
 2007dd4:	d8c01b15 	stw	r3,108(sp)
 2007dd8:	200c84c0 	call	200c84c <__muldf3>
 2007ddc:	180b883a 	mov	r5,r3
 2007de0:	1009883a 	mov	r4,r2
 2007de4:	1823883a 	mov	r17,r3
 2007de8:	1021883a 	mov	r16,r2
 2007dec:	2003d380 	call	2003d38 <__fixdfsi>
 2007df0:	1009883a 	mov	r4,r2
 2007df4:	102b883a 	mov	r21,r2
 2007df8:	2003c400 	call	2003c40 <__floatsidf>
 2007dfc:	880b883a 	mov	r5,r17
 2007e00:	8009883a 	mov	r4,r16
 2007e04:	180f883a 	mov	r7,r3
 2007e08:	100d883a 	mov	r6,r2
 2007e0c:	2003ac40 	call	2003ac4 <__subdf3>
 2007e10:	1021883a 	mov	r16,r2
 2007e14:	d9001b17 	ldw	r4,108(sp)
 2007e18:	1823883a 	mov	r17,r3
 2007e1c:	dc001415 	stw	r16,80(sp)
 2007e20:	ad400c04 	addi	r21,r21,48
 2007e24:	dc401515 	stw	r17,84(sp)
 2007e28:	d8801a17 	ldw	r2,104(sp)
 2007e2c:	e5400005 	stb	r21,0(fp)
 2007e30:	202f883a 	mov	r23,r4
 2007e34:	d9c01b17 	ldw	r7,108(sp)
 2007e38:	d9001417 	ldw	r4,80(sp)
 2007e3c:	880b883a 	mov	r5,r17
 2007e40:	100d883a 	mov	r6,r2
 2007e44:	102d883a 	mov	r22,r2
 2007e48:	e7000044 	addi	fp,fp,1
 2007e4c:	200d0000 	call	200d000 <__ltdf2>
 2007e50:	103fc30e 	bge	r2,zero,2007d60 <_dtoa_r+0x1064>
 2007e54:	d9000417 	ldw	r4,16(sp)
 2007e58:	d9000d15 	stw	r4,52(sp)
 2007e5c:	003d7106 	br	2007424 <_dtoa_r+0x728>
 2007e60:	d9801717 	ldw	r6,92(sp)
 2007e64:	00800084 	movi	r2,2
 2007e68:	11bde60e 	bge	r2,r6,2007604 <_dtoa_r+0x908>
 2007e6c:	203cfb1e 	bne	r4,zero,200725c <_dtoa_r+0x560>
 2007e70:	d9001617 	ldw	r4,88(sp)
 2007e74:	900b883a 	mov	r5,r18
 2007e78:	01800144 	movi	r6,5
 2007e7c:	000f883a 	mov	r7,zero
 2007e80:	200ab4c0 	call	200ab4c <__multadd>
 2007e84:	d9000717 	ldw	r4,28(sp)
 2007e88:	100b883a 	mov	r5,r2
 2007e8c:	1025883a 	mov	r18,r2
 2007e90:	2009f880 	call	2009f88 <__mcmp>
 2007e94:	00bcf10e 	bge	zero,r2,200725c <_dtoa_r+0x560>
 2007e98:	d8c00d17 	ldw	r3,52(sp)
 2007e9c:	d9000517 	ldw	r4,20(sp)
 2007ea0:	d8000615 	stw	zero,24(sp)
 2007ea4:	18c00044 	addi	r3,r3,1
 2007ea8:	d8c00d15 	stw	r3,52(sp)
 2007eac:	00800c44 	movi	r2,49
 2007eb0:	27000044 	addi	fp,r4,1
 2007eb4:	20800005 	stb	r2,0(r4)
 2007eb8:	003e8906 	br	20078e0 <_dtoa_r+0xbe4>
 2007ebc:	d8c00517 	ldw	r3,20(sp)
 2007ec0:	003bc206 	br	2006dcc <_dtoa_r+0xd0>
 2007ec4:	01808074 	movhi	r6,513
 2007ec8:	31858004 	addi	r6,r6,5632
 2007ecc:	30c00917 	ldw	r3,36(r6)
 2007ed0:	30800817 	ldw	r2,32(r6)
 2007ed4:	d9001217 	ldw	r4,72(sp)
 2007ed8:	d9401317 	ldw	r5,76(sp)
 2007edc:	180f883a 	mov	r7,r3
 2007ee0:	100d883a 	mov	r6,r2
 2007ee4:	200cc100 	call	200cc10 <__divdf3>
 2007ee8:	948003cc 	andi	r18,r18,15
 2007eec:	058000c4 	movi	r22,3
 2007ef0:	1029883a 	mov	r20,r2
 2007ef4:	182b883a 	mov	r21,r3
 2007ef8:	003c8906 	br	2007120 <_dtoa_r+0x424>
 2007efc:	d9001017 	ldw	r4,64(sp)
 2007f00:	d9800917 	ldw	r6,36(sp)
 2007f04:	0025883a 	mov	r18,zero
 2007f08:	1105c83a 	sub	r2,r2,r4
 2007f0c:	2089883a 	add	r4,r4,r2
 2007f10:	308d883a 	add	r6,r6,r2
 2007f14:	d9001015 	stw	r4,64(sp)
 2007f18:	d9800915 	stw	r6,36(sp)
 2007f1c:	003e3206 	br	20077e8 <_dtoa_r+0xaec>
 2007f20:	28800044 	addi	r2,r5,1
 2007f24:	27000044 	addi	fp,r4,1
 2007f28:	20800005 	stb	r2,0(r4)
 2007f2c:	003e6c06 	br	20078e0 <_dtoa_r+0xbe4>
 2007f30:	d8800f17 	ldw	r2,60(sp)
 2007f34:	00bce016 	blt	zero,r2,20072b8 <_dtoa_r+0x5bc>
 2007f38:	d9800f17 	ldw	r6,60(sp)
 2007f3c:	303cc51e 	bne	r6,zero,2007254 <_dtoa_r+0x558>
 2007f40:	0005883a 	mov	r2,zero
 2007f44:	00d00534 	movhi	r3,16404
 2007f48:	980b883a 	mov	r5,r19
 2007f4c:	180f883a 	mov	r7,r3
 2007f50:	9009883a 	mov	r4,r18
 2007f54:	100d883a 	mov	r6,r2
 2007f58:	200c84c0 	call	200c84c <__muldf3>
 2007f5c:	180b883a 	mov	r5,r3
 2007f60:	a80f883a 	mov	r7,r21
 2007f64:	1009883a 	mov	r4,r2
 2007f68:	a00d883a 	mov	r6,r20
 2007f6c:	200cf780 	call	200cf78 <__gedf2>
 2007f70:	103cb80e 	bge	r2,zero,2007254 <_dtoa_r+0x558>
 2007f74:	0027883a 	mov	r19,zero
 2007f78:	0025883a 	mov	r18,zero
 2007f7c:	003fc606 	br	2007e98 <_dtoa_r+0x119c>
 2007f80:	99400117 	ldw	r5,4(r19)
 2007f84:	d9001617 	ldw	r4,88(sp)
 2007f88:	200a3ac0 	call	200a3ac <_Balloc>
 2007f8c:	99800417 	ldw	r6,16(r19)
 2007f90:	11000304 	addi	r4,r2,12
 2007f94:	99400304 	addi	r5,r19,12
 2007f98:	318d883a 	add	r6,r6,r6
 2007f9c:	318d883a 	add	r6,r6,r6
 2007fa0:	31800204 	addi	r6,r6,8
 2007fa4:	1023883a 	mov	r17,r2
 2007fa8:	2009cac0 	call	2009cac <memcpy>
 2007fac:	d9001617 	ldw	r4,88(sp)
 2007fb0:	880b883a 	mov	r5,r17
 2007fb4:	01800044 	movi	r6,1
 2007fb8:	200a7700 	call	200a770 <__lshift>
 2007fbc:	100b883a 	mov	r5,r2
 2007fc0:	003d9c06 	br	2007634 <_dtoa_r+0x938>
 2007fc4:	00800e44 	movi	r2,57
 2007fc8:	b8807026 	beq	r23,r2,200818c <_dtoa_r+0x1490>
 2007fcc:	b8800044 	addi	r2,r23,1
 2007fd0:	b7000044 	addi	fp,r22,1
 2007fd4:	b0800005 	stb	r2,0(r22)
 2007fd8:	003e4106 	br	20078e0 <_dtoa_r+0xbe4>
 2007fdc:	d8800317 	ldw	r2,12(sp)
 2007fe0:	01808074 	movhi	r6,513
 2007fe4:	31854e04 	addi	r6,r6,5432
 2007fe8:	b009883a 	mov	r4,r22
 2007fec:	100e90fa 	slli	r7,r2,3
 2007ff0:	b80b883a 	mov	r5,r23
 2007ff4:	398f883a 	add	r7,r7,r6
 2007ff8:	38bffe17 	ldw	r2,-8(r7)
 2007ffc:	d9800517 	ldw	r6,20(sp)
 2008000:	38ffff17 	ldw	r3,-4(r7)
 2008004:	37000044 	addi	fp,r6,1
 2008008:	180f883a 	mov	r7,r3
 200800c:	100d883a 	mov	r6,r2
 2008010:	200c84c0 	call	200c84c <__muldf3>
 2008014:	a80b883a 	mov	r5,r21
 2008018:	a009883a 	mov	r4,r20
 200801c:	182f883a 	mov	r23,r3
 2008020:	102d883a 	mov	r22,r2
 2008024:	2003d380 	call	2003d38 <__fixdfsi>
 2008028:	1009883a 	mov	r4,r2
 200802c:	1027883a 	mov	r19,r2
 2008030:	2003c400 	call	2003c40 <__floatsidf>
 2008034:	a80b883a 	mov	r5,r21
 2008038:	a009883a 	mov	r4,r20
 200803c:	180f883a 	mov	r7,r3
 2008040:	100d883a 	mov	r6,r2
 2008044:	2003ac40 	call	2003ac4 <__subdf3>
 2008048:	180b883a 	mov	r5,r3
 200804c:	d8c00517 	ldw	r3,20(sp)
 2008050:	9cc00c04 	addi	r19,r19,48
 2008054:	1009883a 	mov	r4,r2
 2008058:	1cc00005 	stb	r19,0(r3)
 200805c:	2021883a 	mov	r16,r4
 2008060:	d9000317 	ldw	r4,12(sp)
 2008064:	00800044 	movi	r2,1
 2008068:	2823883a 	mov	r17,r5
 200806c:	20802226 	beq	r4,r2,20080f8 <_dtoa_r+0x13fc>
 2008070:	1029883a 	mov	r20,r2
 2008074:	0005883a 	mov	r2,zero
 2008078:	00d00934 	movhi	r3,16420
 200807c:	180f883a 	mov	r7,r3
 2008080:	100d883a 	mov	r6,r2
 2008084:	880b883a 	mov	r5,r17
 2008088:	8009883a 	mov	r4,r16
 200808c:	200c84c0 	call	200c84c <__muldf3>
 2008090:	180b883a 	mov	r5,r3
 2008094:	1009883a 	mov	r4,r2
 2008098:	1823883a 	mov	r17,r3
 200809c:	1021883a 	mov	r16,r2
 20080a0:	2003d380 	call	2003d38 <__fixdfsi>
 20080a4:	1009883a 	mov	r4,r2
 20080a8:	102b883a 	mov	r21,r2
 20080ac:	2003c400 	call	2003c40 <__floatsidf>
 20080b0:	880b883a 	mov	r5,r17
 20080b4:	8009883a 	mov	r4,r16
 20080b8:	180f883a 	mov	r7,r3
 20080bc:	100d883a 	mov	r6,r2
 20080c0:	2003ac40 	call	2003ac4 <__subdf3>
 20080c4:	180b883a 	mov	r5,r3
 20080c8:	d8c00517 	ldw	r3,20(sp)
 20080cc:	1009883a 	mov	r4,r2
 20080d0:	ad400c04 	addi	r21,r21,48
 20080d4:	1d05883a 	add	r2,r3,r20
 20080d8:	15400005 	stb	r21,0(r2)
 20080dc:	2021883a 	mov	r16,r4
 20080e0:	d9000317 	ldw	r4,12(sp)
 20080e4:	a5000044 	addi	r20,r20,1
 20080e8:	2823883a 	mov	r17,r5
 20080ec:	a13fe11e 	bne	r20,r4,2008074 <_dtoa_r+0x1378>
 20080f0:	e505883a 	add	r2,fp,r20
 20080f4:	173fffc4 	addi	fp,r2,-1
 20080f8:	0025883a 	mov	r18,zero
 20080fc:	04cff834 	movhi	r19,16352
 2008100:	b009883a 	mov	r4,r22
 2008104:	b80b883a 	mov	r5,r23
 2008108:	900d883a 	mov	r6,r18
 200810c:	980f883a 	mov	r7,r19
 2008110:	2003b440 	call	2003b44 <__adddf3>
 2008114:	180b883a 	mov	r5,r3
 2008118:	1009883a 	mov	r4,r2
 200811c:	800d883a 	mov	r6,r16
 2008120:	880f883a 	mov	r7,r17
 2008124:	200d0000 	call	200d000 <__ltdf2>
 2008128:	103cab16 	blt	r2,zero,20073d8 <_dtoa_r+0x6dc>
 200812c:	0009883a 	mov	r4,zero
 2008130:	980b883a 	mov	r5,r19
 2008134:	b80f883a 	mov	r7,r23
 2008138:	b00d883a 	mov	r6,r22
 200813c:	2003ac40 	call	2003ac4 <__subdf3>
 2008140:	180b883a 	mov	r5,r3
 2008144:	880f883a 	mov	r7,r17
 2008148:	1009883a 	mov	r4,r2
 200814c:	800d883a 	mov	r6,r16
 2008150:	2003bb80 	call	2003bb8 <__gtdf2>
 2008154:	00bc470e 	bge	zero,r2,2007274 <_dtoa_r+0x578>
 2008158:	00c00c04 	movi	r3,48
 200815c:	e73fffc4 	addi	fp,fp,-1
 2008160:	e0800007 	ldb	r2,0(fp)
 2008164:	10fffd26 	beq	r2,r3,200815c <_dtoa_r+0x1460>
 2008168:	d9800417 	ldw	r6,16(sp)
 200816c:	e7000044 	addi	fp,fp,1
 2008170:	d9800d15 	stw	r6,52(sp)
 2008174:	003cab06 	br	2007424 <_dtoa_r+0x728>
 2008178:	d8c00f17 	ldw	r3,60(sp)
 200817c:	d9001117 	ldw	r4,68(sp)
 2008180:	20e1c83a 	sub	r16,r4,r3
 2008184:	0007883a 	mov	r3,zero
 2008188:	003d9b06 	br	20077f8 <_dtoa_r+0xafc>
 200818c:	00800e44 	movi	r2,57
 2008190:	b0800005 	stb	r2,0(r22)
 2008194:	b5800044 	addi	r22,r22,1
 2008198:	003dc106 	br	20078a0 <_dtoa_r+0xba4>
 200819c:	05800084 	movi	r22,2
 20081a0:	003bf706 	br	2007180 <_dtoa_r+0x484>
 20081a4:	d9000f17 	ldw	r4,60(sp)
 20081a8:	013c000e 	bge	zero,r4,20071ac <_dtoa_r+0x4b0>
 20081ac:	d9800e17 	ldw	r6,56(sp)
 20081b0:	01bc300e 	bge	zero,r6,2007274 <_dtoa_r+0x578>
 20081b4:	0005883a 	mov	r2,zero
 20081b8:	00d00934 	movhi	r3,16420
 20081bc:	a80b883a 	mov	r5,r21
 20081c0:	180f883a 	mov	r7,r3
 20081c4:	a009883a 	mov	r4,r20
 20081c8:	100d883a 	mov	r6,r2
 20081cc:	200c84c0 	call	200c84c <__muldf3>
 20081d0:	b1000044 	addi	r4,r22,1
 20081d4:	1021883a 	mov	r16,r2
 20081d8:	1823883a 	mov	r17,r3
 20081dc:	2003c400 	call	2003c40 <__floatsidf>
 20081e0:	880b883a 	mov	r5,r17
 20081e4:	8009883a 	mov	r4,r16
 20081e8:	180f883a 	mov	r7,r3
 20081ec:	100d883a 	mov	r6,r2
 20081f0:	200c84c0 	call	200c84c <__muldf3>
 20081f4:	0011883a 	mov	r8,zero
 20081f8:	02500734 	movhi	r9,16412
 20081fc:	180b883a 	mov	r5,r3
 2008200:	480f883a 	mov	r7,r9
 2008204:	1009883a 	mov	r4,r2
 2008208:	400d883a 	mov	r6,r8
 200820c:	2003b440 	call	2003b44 <__adddf3>
 2008210:	102d883a 	mov	r22,r2
 2008214:	00bf3034 	movhi	r2,64704
 2008218:	10ef883a 	add	r23,r2,r3
 200821c:	d8800d17 	ldw	r2,52(sp)
 2008220:	d8c00e17 	ldw	r3,56(sp)
 2008224:	8029883a 	mov	r20,r16
 2008228:	10bfffc4 	addi	r2,r2,-1
 200822c:	882b883a 	mov	r21,r17
 2008230:	d8800415 	stw	r2,16(sp)
 2008234:	d8c00315 	stw	r3,12(sp)
 2008238:	003e8306 	br	2007c48 <_dtoa_r+0xf4c>
 200823c:	d8800117 	ldw	r2,4(sp)
 2008240:	dc001117 	ldw	r16,68(sp)
 2008244:	dc801017 	ldw	r18,64(sp)
 2008248:	00c00d84 	movi	r3,54
 200824c:	1887c83a 	sub	r3,r3,r2
 2008250:	003d6906 	br	20077f8 <_dtoa_r+0xafc>
 2008254:	01800044 	movi	r6,1
 2008258:	3021883a 	mov	r16,r6
 200825c:	d9800f15 	stw	r6,60(sp)
 2008260:	d9802615 	stw	r6,152(sp)
 2008264:	d9800e15 	stw	r6,56(sp)
 2008268:	003b9306 	br	20070b8 <_dtoa_r+0x3bc>
 200826c:	b021883a 	mov	r16,r22
 2008270:	dd800f15 	stw	r22,60(sp)
 2008274:	003b9006 	br	20070b8 <_dtoa_r+0x3bc>
 2008278:	103e221e 	bne	r2,zero,2007b04 <_dtoa_r+0xe08>
 200827c:	b880004c 	andi	r2,r23,1
 2008280:	1005003a 	cmpeq	r2,r2,zero
 2008284:	103e1f1e 	bne	r2,zero,2007b04 <_dtoa_r+0xe08>
 2008288:	003e1b06 	br	2007af8 <_dtoa_r+0xdfc>
 200828c:	d9001617 	ldw	r4,88(sp)
 2008290:	980b883a 	mov	r5,r19
 2008294:	01800284 	movi	r6,10
 2008298:	000f883a 	mov	r7,zero
 200829c:	200ab4c0 	call	200ab4c <__multadd>
 20082a0:	d8c00e17 	ldw	r3,56(sp)
 20082a4:	1027883a 	mov	r19,r2
 20082a8:	d8c00f15 	stw	r3,60(sp)
 20082ac:	003cd306 	br	20075fc <_dtoa_r+0x900>

020082b0 <_fflush_r>:
 20082b0:	defffb04 	addi	sp,sp,-20
 20082b4:	dcc00315 	stw	r19,12(sp)
 20082b8:	dc800215 	stw	r18,8(sp)
 20082bc:	dfc00415 	stw	ra,16(sp)
 20082c0:	dc400115 	stw	r17,4(sp)
 20082c4:	dc000015 	stw	r16,0(sp)
 20082c8:	2027883a 	mov	r19,r4
 20082cc:	2825883a 	mov	r18,r5
 20082d0:	20000226 	beq	r4,zero,20082dc <_fflush_r+0x2c>
 20082d4:	20800e17 	ldw	r2,56(r4)
 20082d8:	10005626 	beq	r2,zero,2008434 <_fflush_r+0x184>
 20082dc:	9100030b 	ldhu	r4,12(r18)
 20082e0:	20ffffcc 	andi	r3,r4,65535
 20082e4:	18e0001c 	xori	r3,r3,32768
 20082e8:	18e00004 	addi	r3,r3,-32768
 20082ec:	1880020c 	andi	r2,r3,8
 20082f0:	1000261e 	bne	r2,zero,200838c <_fflush_r+0xdc>
 20082f4:	90c00117 	ldw	r3,4(r18)
 20082f8:	20820014 	ori	r2,r4,2048
 20082fc:	9080030d 	sth	r2,12(r18)
 2008300:	1009883a 	mov	r4,r2
 2008304:	00c0400e 	bge	zero,r3,2008408 <_fflush_r+0x158>
 2008308:	92000a17 	ldw	r8,40(r18)
 200830c:	40004026 	beq	r8,zero,2008410 <_fflush_r+0x160>
 2008310:	2084000c 	andi	r2,r4,4096
 2008314:	10005326 	beq	r2,zero,2008464 <_fflush_r+0x1b4>
 2008318:	94001417 	ldw	r16,80(r18)
 200831c:	9080030b 	ldhu	r2,12(r18)
 2008320:	1080010c 	andi	r2,r2,4
 2008324:	1000481e 	bne	r2,zero,2008448 <_fflush_r+0x198>
 2008328:	91400717 	ldw	r5,28(r18)
 200832c:	9809883a 	mov	r4,r19
 2008330:	800d883a 	mov	r6,r16
 2008334:	000f883a 	mov	r7,zero
 2008338:	403ee83a 	callr	r8
 200833c:	8080261e 	bne	r16,r2,20083d8 <_fflush_r+0x128>
 2008340:	9080030b 	ldhu	r2,12(r18)
 2008344:	91000417 	ldw	r4,16(r18)
 2008348:	90000115 	stw	zero,4(r18)
 200834c:	10bdffcc 	andi	r2,r2,63487
 2008350:	10ffffcc 	andi	r3,r2,65535
 2008354:	18c4000c 	andi	r3,r3,4096
 2008358:	9080030d 	sth	r2,12(r18)
 200835c:	91000015 	stw	r4,0(r18)
 2008360:	18002b26 	beq	r3,zero,2008410 <_fflush_r+0x160>
 2008364:	0007883a 	mov	r3,zero
 2008368:	1805883a 	mov	r2,r3
 200836c:	94001415 	stw	r16,80(r18)
 2008370:	dfc00417 	ldw	ra,16(sp)
 2008374:	dcc00317 	ldw	r19,12(sp)
 2008378:	dc800217 	ldw	r18,8(sp)
 200837c:	dc400117 	ldw	r17,4(sp)
 2008380:	dc000017 	ldw	r16,0(sp)
 2008384:	dec00504 	addi	sp,sp,20
 2008388:	f800283a 	ret
 200838c:	94400417 	ldw	r17,16(r18)
 2008390:	88001f26 	beq	r17,zero,2008410 <_fflush_r+0x160>
 2008394:	90800017 	ldw	r2,0(r18)
 2008398:	18c000cc 	andi	r3,r3,3
 200839c:	94400015 	stw	r17,0(r18)
 20083a0:	1461c83a 	sub	r16,r2,r17
 20083a4:	18002526 	beq	r3,zero,200843c <_fflush_r+0x18c>
 20083a8:	0005883a 	mov	r2,zero
 20083ac:	90800215 	stw	r2,8(r18)
 20083b0:	0400170e 	bge	zero,r16,2008410 <_fflush_r+0x160>
 20083b4:	90c00917 	ldw	r3,36(r18)
 20083b8:	91400717 	ldw	r5,28(r18)
 20083bc:	880d883a 	mov	r6,r17
 20083c0:	800f883a 	mov	r7,r16
 20083c4:	9809883a 	mov	r4,r19
 20083c8:	183ee83a 	callr	r3
 20083cc:	88a3883a 	add	r17,r17,r2
 20083d0:	80a1c83a 	sub	r16,r16,r2
 20083d4:	00bff616 	blt	zero,r2,20083b0 <_fflush_r+0x100>
 20083d8:	9080030b 	ldhu	r2,12(r18)
 20083dc:	00ffffc4 	movi	r3,-1
 20083e0:	10801014 	ori	r2,r2,64
 20083e4:	9080030d 	sth	r2,12(r18)
 20083e8:	1805883a 	mov	r2,r3
 20083ec:	dfc00417 	ldw	ra,16(sp)
 20083f0:	dcc00317 	ldw	r19,12(sp)
 20083f4:	dc800217 	ldw	r18,8(sp)
 20083f8:	dc400117 	ldw	r17,4(sp)
 20083fc:	dc000017 	ldw	r16,0(sp)
 2008400:	dec00504 	addi	sp,sp,20
 2008404:	f800283a 	ret
 2008408:	90800f17 	ldw	r2,60(r18)
 200840c:	00bfbe16 	blt	zero,r2,2008308 <_fflush_r+0x58>
 2008410:	0007883a 	mov	r3,zero
 2008414:	1805883a 	mov	r2,r3
 2008418:	dfc00417 	ldw	ra,16(sp)
 200841c:	dcc00317 	ldw	r19,12(sp)
 2008420:	dc800217 	ldw	r18,8(sp)
 2008424:	dc400117 	ldw	r17,4(sp)
 2008428:	dc000017 	ldw	r16,0(sp)
 200842c:	dec00504 	addi	sp,sp,20
 2008430:	f800283a 	ret
 2008434:	20085480 	call	2008548 <__sinit>
 2008438:	003fa806 	br	20082dc <_fflush_r+0x2c>
 200843c:	90800517 	ldw	r2,20(r18)
 2008440:	90800215 	stw	r2,8(r18)
 2008444:	003fda06 	br	20083b0 <_fflush_r+0x100>
 2008448:	90800117 	ldw	r2,4(r18)
 200844c:	90c00c17 	ldw	r3,48(r18)
 2008450:	80a1c83a 	sub	r16,r16,r2
 2008454:	183fb426 	beq	r3,zero,2008328 <_fflush_r+0x78>
 2008458:	90800f17 	ldw	r2,60(r18)
 200845c:	80a1c83a 	sub	r16,r16,r2
 2008460:	003fb106 	br	2008328 <_fflush_r+0x78>
 2008464:	91400717 	ldw	r5,28(r18)
 2008468:	9809883a 	mov	r4,r19
 200846c:	000d883a 	mov	r6,zero
 2008470:	01c00044 	movi	r7,1
 2008474:	403ee83a 	callr	r8
 2008478:	1021883a 	mov	r16,r2
 200847c:	00bfffc4 	movi	r2,-1
 2008480:	80800226 	beq	r16,r2,200848c <_fflush_r+0x1dc>
 2008484:	92000a17 	ldw	r8,40(r18)
 2008488:	003fa406 	br	200831c <_fflush_r+0x6c>
 200848c:	98c00017 	ldw	r3,0(r19)
 2008490:	00800744 	movi	r2,29
 2008494:	18bfde26 	beq	r3,r2,2008410 <_fflush_r+0x160>
 2008498:	9080030b 	ldhu	r2,12(r18)
 200849c:	8007883a 	mov	r3,r16
 20084a0:	10801014 	ori	r2,r2,64
 20084a4:	9080030d 	sth	r2,12(r18)
 20084a8:	003fcf06 	br	20083e8 <_fflush_r+0x138>

020084ac <fflush>:
 20084ac:	01408074 	movhi	r5,513
 20084b0:	2960ac04 	addi	r5,r5,-32080
 20084b4:	2007883a 	mov	r3,r4
 20084b8:	20000526 	beq	r4,zero,20084d0 <fflush+0x24>
 20084bc:	00808074 	movhi	r2,513
 20084c0:	108d6704 	addi	r2,r2,13724
 20084c4:	11000017 	ldw	r4,0(r2)
 20084c8:	180b883a 	mov	r5,r3
 20084cc:	20082b01 	jmpi	20082b0 <_fflush_r>
 20084d0:	00808074 	movhi	r2,513
 20084d4:	108d6804 	addi	r2,r2,13728
 20084d8:	11000017 	ldw	r4,0(r2)
 20084dc:	20090b01 	jmpi	20090b0 <_fwalk_reent>

020084e0 <std>:
 20084e0:	00808074 	movhi	r2,513
 20084e4:	10ad6304 	addi	r2,r2,-19060
 20084e8:	20800b15 	stw	r2,44(r4)
 20084ec:	00808074 	movhi	r2,513
 20084f0:	10ad9e04 	addi	r2,r2,-18824
 20084f4:	20800815 	stw	r2,32(r4)
 20084f8:	00c08074 	movhi	r3,513
 20084fc:	18ed7f04 	addi	r3,r3,-18948
 2008500:	00808074 	movhi	r2,513
 2008504:	10ad6504 	addi	r2,r2,-19052
 2008508:	2140030d 	sth	r5,12(r4)
 200850c:	2180038d 	sth	r6,14(r4)
 2008510:	20c00915 	stw	r3,36(r4)
 2008514:	20800a15 	stw	r2,40(r4)
 2008518:	20000015 	stw	zero,0(r4)
 200851c:	20000115 	stw	zero,4(r4)
 2008520:	20000215 	stw	zero,8(r4)
 2008524:	20000415 	stw	zero,16(r4)
 2008528:	20000515 	stw	zero,20(r4)
 200852c:	20000615 	stw	zero,24(r4)
 2008530:	21000715 	stw	r4,28(r4)
 2008534:	f800283a 	ret

02008538 <__sfp_lock_acquire>:
 2008538:	f800283a 	ret

0200853c <__sfp_lock_release>:
 200853c:	f800283a 	ret

02008540 <__sinit_lock_acquire>:
 2008540:	f800283a 	ret

02008544 <__sinit_lock_release>:
 2008544:	f800283a 	ret

02008548 <__sinit>:
 2008548:	20800e17 	ldw	r2,56(r4)
 200854c:	defffd04 	addi	sp,sp,-12
 2008550:	dc400115 	stw	r17,4(sp)
 2008554:	dc000015 	stw	r16,0(sp)
 2008558:	dfc00215 	stw	ra,8(sp)
 200855c:	04400044 	movi	r17,1
 2008560:	01400104 	movi	r5,4
 2008564:	000d883a 	mov	r6,zero
 2008568:	2021883a 	mov	r16,r4
 200856c:	2200bb04 	addi	r8,r4,748
 2008570:	200f883a 	mov	r7,r4
 2008574:	10000526 	beq	r2,zero,200858c <__sinit+0x44>
 2008578:	dfc00217 	ldw	ra,8(sp)
 200857c:	dc400117 	ldw	r17,4(sp)
 2008580:	dc000017 	ldw	r16,0(sp)
 2008584:	dec00304 	addi	sp,sp,12
 2008588:	f800283a 	ret
 200858c:	21000117 	ldw	r4,4(r4)
 2008590:	00808074 	movhi	r2,513
 2008594:	10a18b04 	addi	r2,r2,-31188
 2008598:	00c000c4 	movi	r3,3
 200859c:	80800f15 	stw	r2,60(r16)
 20085a0:	80c0b915 	stw	r3,740(r16)
 20085a4:	8200ba15 	stw	r8,744(r16)
 20085a8:	84400e15 	stw	r17,56(r16)
 20085ac:	8000b815 	stw	zero,736(r16)
 20085b0:	20084e00 	call	20084e0 <std>
 20085b4:	81000217 	ldw	r4,8(r16)
 20085b8:	880d883a 	mov	r6,r17
 20085bc:	800f883a 	mov	r7,r16
 20085c0:	01400284 	movi	r5,10
 20085c4:	20084e00 	call	20084e0 <std>
 20085c8:	81000317 	ldw	r4,12(r16)
 20085cc:	800f883a 	mov	r7,r16
 20085d0:	01400484 	movi	r5,18
 20085d4:	01800084 	movi	r6,2
 20085d8:	dfc00217 	ldw	ra,8(sp)
 20085dc:	dc400117 	ldw	r17,4(sp)
 20085e0:	dc000017 	ldw	r16,0(sp)
 20085e4:	dec00304 	addi	sp,sp,12
 20085e8:	20084e01 	jmpi	20084e0 <std>

020085ec <__fp_lock>:
 20085ec:	0005883a 	mov	r2,zero
 20085f0:	f800283a 	ret

020085f4 <__fp_unlock>:
 20085f4:	0005883a 	mov	r2,zero
 20085f8:	f800283a 	ret

020085fc <__fp_unlock_all>:
 20085fc:	00808074 	movhi	r2,513
 2008600:	108d6704 	addi	r2,r2,13724
 2008604:	11000017 	ldw	r4,0(r2)
 2008608:	01408074 	movhi	r5,513
 200860c:	29617d04 	addi	r5,r5,-31244
 2008610:	20091781 	jmpi	2009178 <_fwalk>

02008614 <__fp_lock_all>:
 2008614:	00808074 	movhi	r2,513
 2008618:	108d6704 	addi	r2,r2,13724
 200861c:	11000017 	ldw	r4,0(r2)
 2008620:	01408074 	movhi	r5,513
 2008624:	29617b04 	addi	r5,r5,-31252
 2008628:	20091781 	jmpi	2009178 <_fwalk>

0200862c <_cleanup_r>:
 200862c:	01408074 	movhi	r5,513
 2008630:	296e6604 	addi	r5,r5,-18024
 2008634:	20091781 	jmpi	2009178 <_fwalk>

02008638 <_cleanup>:
 2008638:	00808074 	movhi	r2,513
 200863c:	108d6804 	addi	r2,r2,13728
 2008640:	11000017 	ldw	r4,0(r2)
 2008644:	200862c1 	jmpi	200862c <_cleanup_r>

02008648 <__sfmoreglue>:
 2008648:	defffc04 	addi	sp,sp,-16
 200864c:	dc000015 	stw	r16,0(sp)
 2008650:	2821883a 	mov	r16,r5
 2008654:	dc400115 	stw	r17,4(sp)
 2008658:	01401704 	movi	r5,92
 200865c:	2023883a 	mov	r17,r4
 2008660:	8009883a 	mov	r4,r16
 2008664:	dfc00315 	stw	ra,12(sp)
 2008668:	dcc00215 	stw	r19,8(sp)
 200866c:	20040f00 	call	20040f0 <__mulsi3>
 2008670:	11400304 	addi	r5,r2,12
 2008674:	8809883a 	mov	r4,r17
 2008678:	1027883a 	mov	r19,r2
 200867c:	20094880 	call	2009488 <_malloc_r>
 2008680:	10c00304 	addi	r3,r2,12
 2008684:	1023883a 	mov	r17,r2
 2008688:	1809883a 	mov	r4,r3
 200868c:	980d883a 	mov	r6,r19
 2008690:	000b883a 	mov	r5,zero
 2008694:	10000b26 	beq	r2,zero,20086c4 <__sfmoreglue+0x7c>
 2008698:	14000115 	stw	r16,4(r2)
 200869c:	10c00215 	stw	r3,8(r2)
 20086a0:	10000015 	stw	zero,0(r2)
 20086a4:	20046bc0 	call	20046bc <memset>
 20086a8:	8805883a 	mov	r2,r17
 20086ac:	dfc00317 	ldw	ra,12(sp)
 20086b0:	dcc00217 	ldw	r19,8(sp)
 20086b4:	dc400117 	ldw	r17,4(sp)
 20086b8:	dc000017 	ldw	r16,0(sp)
 20086bc:	dec00404 	addi	sp,sp,16
 20086c0:	f800283a 	ret
 20086c4:	0023883a 	mov	r17,zero
 20086c8:	8805883a 	mov	r2,r17
 20086cc:	dfc00317 	ldw	ra,12(sp)
 20086d0:	dcc00217 	ldw	r19,8(sp)
 20086d4:	dc400117 	ldw	r17,4(sp)
 20086d8:	dc000017 	ldw	r16,0(sp)
 20086dc:	dec00404 	addi	sp,sp,16
 20086e0:	f800283a 	ret

020086e4 <__sfp>:
 20086e4:	defffd04 	addi	sp,sp,-12
 20086e8:	00808074 	movhi	r2,513
 20086ec:	108d6804 	addi	r2,r2,13728
 20086f0:	dc000015 	stw	r16,0(sp)
 20086f4:	14000017 	ldw	r16,0(r2)
 20086f8:	dc400115 	stw	r17,4(sp)
 20086fc:	dfc00215 	stw	ra,8(sp)
 2008700:	80800e17 	ldw	r2,56(r16)
 2008704:	2023883a 	mov	r17,r4
 2008708:	10002626 	beq	r2,zero,20087a4 <__sfp+0xc0>
 200870c:	8400b804 	addi	r16,r16,736
 2008710:	80800117 	ldw	r2,4(r16)
 2008714:	81000217 	ldw	r4,8(r16)
 2008718:	10ffffc4 	addi	r3,r2,-1
 200871c:	18000916 	blt	r3,zero,2008744 <__sfp+0x60>
 2008720:	2080030f 	ldh	r2,12(r4)
 2008724:	10000b26 	beq	r2,zero,2008754 <__sfp+0x70>
 2008728:	017fffc4 	movi	r5,-1
 200872c:	00000206 	br	2008738 <__sfp+0x54>
 2008730:	2080030f 	ldh	r2,12(r4)
 2008734:	10000726 	beq	r2,zero,2008754 <__sfp+0x70>
 2008738:	18ffffc4 	addi	r3,r3,-1
 200873c:	21001704 	addi	r4,r4,92
 2008740:	197ffb1e 	bne	r3,r5,2008730 <__sfp+0x4c>
 2008744:	80800017 	ldw	r2,0(r16)
 2008748:	10001926 	beq	r2,zero,20087b0 <__sfp+0xcc>
 200874c:	1021883a 	mov	r16,r2
 2008750:	003fef06 	br	2008710 <__sfp+0x2c>
 2008754:	00bfffc4 	movi	r2,-1
 2008758:	00c00044 	movi	r3,1
 200875c:	2080038d 	sth	r2,14(r4)
 2008760:	20c0030d 	sth	r3,12(r4)
 2008764:	20000015 	stw	zero,0(r4)
 2008768:	20000215 	stw	zero,8(r4)
 200876c:	20000115 	stw	zero,4(r4)
 2008770:	20000415 	stw	zero,16(r4)
 2008774:	20000515 	stw	zero,20(r4)
 2008778:	20000615 	stw	zero,24(r4)
 200877c:	20000c15 	stw	zero,48(r4)
 2008780:	20000d15 	stw	zero,52(r4)
 2008784:	20001115 	stw	zero,68(r4)
 2008788:	20001215 	stw	zero,72(r4)
 200878c:	2005883a 	mov	r2,r4
 2008790:	dfc00217 	ldw	ra,8(sp)
 2008794:	dc400117 	ldw	r17,4(sp)
 2008798:	dc000017 	ldw	r16,0(sp)
 200879c:	dec00304 	addi	sp,sp,12
 20087a0:	f800283a 	ret
 20087a4:	8009883a 	mov	r4,r16
 20087a8:	20085480 	call	2008548 <__sinit>
 20087ac:	003fd706 	br	200870c <__sfp+0x28>
 20087b0:	8809883a 	mov	r4,r17
 20087b4:	01400104 	movi	r5,4
 20087b8:	20086480 	call	2008648 <__sfmoreglue>
 20087bc:	80800015 	stw	r2,0(r16)
 20087c0:	103fe21e 	bne	r2,zero,200874c <__sfp+0x68>
 20087c4:	00800304 	movi	r2,12
 20087c8:	0009883a 	mov	r4,zero
 20087cc:	88800015 	stw	r2,0(r17)
 20087d0:	003fee06 	br	200878c <__sfp+0xa8>

020087d4 <_malloc_trim_r>:
 20087d4:	defffb04 	addi	sp,sp,-20
 20087d8:	dcc00315 	stw	r19,12(sp)
 20087dc:	04c08074 	movhi	r19,513
 20087e0:	9cc78d04 	addi	r19,r19,7732
 20087e4:	dc800215 	stw	r18,8(sp)
 20087e8:	dc400115 	stw	r17,4(sp)
 20087ec:	dc000015 	stw	r16,0(sp)
 20087f0:	2823883a 	mov	r17,r5
 20087f4:	2025883a 	mov	r18,r4
 20087f8:	dfc00415 	stw	ra,16(sp)
 20087fc:	200da000 	call	200da00 <__malloc_lock>
 2008800:	98800217 	ldw	r2,8(r19)
 2008804:	9009883a 	mov	r4,r18
 2008808:	000b883a 	mov	r5,zero
 200880c:	10c00117 	ldw	r3,4(r2)
 2008810:	00bfff04 	movi	r2,-4
 2008814:	18a0703a 	and	r16,r3,r2
 2008818:	8463c83a 	sub	r17,r16,r17
 200881c:	8c43fbc4 	addi	r17,r17,4079
 2008820:	8822d33a 	srli	r17,r17,12
 2008824:	0083ffc4 	movi	r2,4095
 2008828:	8c7fffc4 	addi	r17,r17,-1
 200882c:	8822933a 	slli	r17,r17,12
 2008830:	1440060e 	bge	r2,r17,200884c <_malloc_trim_r+0x78>
 2008834:	200b51c0 	call	200b51c <_sbrk_r>
 2008838:	98c00217 	ldw	r3,8(r19)
 200883c:	9009883a 	mov	r4,r18
 2008840:	044bc83a 	sub	r5,zero,r17
 2008844:	80c7883a 	add	r3,r16,r3
 2008848:	10c00926 	beq	r2,r3,2008870 <_malloc_trim_r+0x9c>
 200884c:	200da200 	call	200da20 <__malloc_unlock>
 2008850:	0005883a 	mov	r2,zero
 2008854:	dfc00417 	ldw	ra,16(sp)
 2008858:	dcc00317 	ldw	r19,12(sp)
 200885c:	dc800217 	ldw	r18,8(sp)
 2008860:	dc400117 	ldw	r17,4(sp)
 2008864:	dc000017 	ldw	r16,0(sp)
 2008868:	dec00504 	addi	sp,sp,20
 200886c:	f800283a 	ret
 2008870:	9009883a 	mov	r4,r18
 2008874:	200b51c0 	call	200b51c <_sbrk_r>
 2008878:	844dc83a 	sub	r6,r16,r17
 200887c:	00ffffc4 	movi	r3,-1
 2008880:	9009883a 	mov	r4,r18
 2008884:	000b883a 	mov	r5,zero
 2008888:	01c08074 	movhi	r7,513
 200888c:	39d4f404 	addi	r7,r7,21456
 2008890:	31800054 	ori	r6,r6,1
 2008894:	10c00926 	beq	r2,r3,20088bc <_malloc_trim_r+0xe8>
 2008898:	38800017 	ldw	r2,0(r7)
 200889c:	98c00217 	ldw	r3,8(r19)
 20088a0:	9009883a 	mov	r4,r18
 20088a4:	1445c83a 	sub	r2,r2,r17
 20088a8:	38800015 	stw	r2,0(r7)
 20088ac:	19800115 	stw	r6,4(r3)
 20088b0:	200da200 	call	200da20 <__malloc_unlock>
 20088b4:	00800044 	movi	r2,1
 20088b8:	003fe606 	br	2008854 <_malloc_trim_r+0x80>
 20088bc:	200b51c0 	call	200b51c <_sbrk_r>
 20088c0:	99800217 	ldw	r6,8(r19)
 20088c4:	100f883a 	mov	r7,r2
 20088c8:	9009883a 	mov	r4,r18
 20088cc:	1187c83a 	sub	r3,r2,r6
 20088d0:	008003c4 	movi	r2,15
 20088d4:	19400054 	ori	r5,r3,1
 20088d8:	10ffdc0e 	bge	r2,r3,200884c <_malloc_trim_r+0x78>
 20088dc:	00808074 	movhi	r2,513
 20088e0:	108d6c04 	addi	r2,r2,13744
 20088e4:	10c00017 	ldw	r3,0(r2)
 20088e8:	00808074 	movhi	r2,513
 20088ec:	1094f404 	addi	r2,r2,21456
 20088f0:	31400115 	stw	r5,4(r6)
 20088f4:	38c7c83a 	sub	r3,r7,r3
 20088f8:	10c00015 	stw	r3,0(r2)
 20088fc:	003fd306 	br	200884c <_malloc_trim_r+0x78>

02008900 <_free_r>:
 2008900:	defffd04 	addi	sp,sp,-12
 2008904:	dc400115 	stw	r17,4(sp)
 2008908:	dc000015 	stw	r16,0(sp)
 200890c:	dfc00215 	stw	ra,8(sp)
 2008910:	2821883a 	mov	r16,r5
 2008914:	2023883a 	mov	r17,r4
 2008918:	28005a26 	beq	r5,zero,2008a84 <_free_r+0x184>
 200891c:	200da000 	call	200da00 <__malloc_lock>
 2008920:	823ffe04 	addi	r8,r16,-8
 2008924:	41400117 	ldw	r5,4(r8)
 2008928:	00bfff84 	movi	r2,-2
 200892c:	02808074 	movhi	r10,513
 2008930:	52878d04 	addi	r10,r10,7732
 2008934:	288e703a 	and	r7,r5,r2
 2008938:	41cd883a 	add	r6,r8,r7
 200893c:	30c00117 	ldw	r3,4(r6)
 2008940:	51000217 	ldw	r4,8(r10)
 2008944:	00bfff04 	movi	r2,-4
 2008948:	1892703a 	and	r9,r3,r2
 200894c:	5017883a 	mov	r11,r10
 2008950:	31006726 	beq	r6,r4,2008af0 <_free_r+0x1f0>
 2008954:	2880004c 	andi	r2,r5,1
 2008958:	1005003a 	cmpeq	r2,r2,zero
 200895c:	32400115 	stw	r9,4(r6)
 2008960:	10001a1e 	bne	r2,zero,20089cc <_free_r+0xcc>
 2008964:	000b883a 	mov	r5,zero
 2008968:	3247883a 	add	r3,r6,r9
 200896c:	18800117 	ldw	r2,4(r3)
 2008970:	1080004c 	andi	r2,r2,1
 2008974:	1000231e 	bne	r2,zero,2008a04 <_free_r+0x104>
 2008978:	280ac03a 	cmpne	r5,r5,zero
 200897c:	3a4f883a 	add	r7,r7,r9
 2008980:	2800451e 	bne	r5,zero,2008a98 <_free_r+0x198>
 2008984:	31000217 	ldw	r4,8(r6)
 2008988:	00808074 	movhi	r2,513
 200898c:	10878f04 	addi	r2,r2,7740
 2008990:	20807b26 	beq	r4,r2,2008b80 <_free_r+0x280>
 2008994:	30800317 	ldw	r2,12(r6)
 2008998:	3a07883a 	add	r3,r7,r8
 200899c:	19c00015 	stw	r7,0(r3)
 20089a0:	11000215 	stw	r4,8(r2)
 20089a4:	20800315 	stw	r2,12(r4)
 20089a8:	38800054 	ori	r2,r7,1
 20089ac:	40800115 	stw	r2,4(r8)
 20089b0:	28001a26 	beq	r5,zero,2008a1c <_free_r+0x11c>
 20089b4:	8809883a 	mov	r4,r17
 20089b8:	dfc00217 	ldw	ra,8(sp)
 20089bc:	dc400117 	ldw	r17,4(sp)
 20089c0:	dc000017 	ldw	r16,0(sp)
 20089c4:	dec00304 	addi	sp,sp,12
 20089c8:	200da201 	jmpi	200da20 <__malloc_unlock>
 20089cc:	80bffe17 	ldw	r2,-8(r16)
 20089d0:	50c00204 	addi	r3,r10,8
 20089d4:	4091c83a 	sub	r8,r8,r2
 20089d8:	41000217 	ldw	r4,8(r8)
 20089dc:	388f883a 	add	r7,r7,r2
 20089e0:	20c06126 	beq	r4,r3,2008b68 <_free_r+0x268>
 20089e4:	40800317 	ldw	r2,12(r8)
 20089e8:	3247883a 	add	r3,r6,r9
 20089ec:	000b883a 	mov	r5,zero
 20089f0:	11000215 	stw	r4,8(r2)
 20089f4:	20800315 	stw	r2,12(r4)
 20089f8:	18800117 	ldw	r2,4(r3)
 20089fc:	1080004c 	andi	r2,r2,1
 2008a00:	103fdd26 	beq	r2,zero,2008978 <_free_r+0x78>
 2008a04:	38800054 	ori	r2,r7,1
 2008a08:	3a07883a 	add	r3,r7,r8
 2008a0c:	280ac03a 	cmpne	r5,r5,zero
 2008a10:	40800115 	stw	r2,4(r8)
 2008a14:	19c00015 	stw	r7,0(r3)
 2008a18:	283fe61e 	bne	r5,zero,20089b4 <_free_r+0xb4>
 2008a1c:	00807fc4 	movi	r2,511
 2008a20:	11c01f2e 	bgeu	r2,r7,2008aa0 <_free_r+0x1a0>
 2008a24:	3806d27a 	srli	r3,r7,9
 2008a28:	1800481e 	bne	r3,zero,2008b4c <_free_r+0x24c>
 2008a2c:	3804d0fa 	srli	r2,r7,3
 2008a30:	100690fa 	slli	r3,r2,3
 2008a34:	1acd883a 	add	r6,r3,r11
 2008a38:	31400217 	ldw	r5,8(r6)
 2008a3c:	31405926 	beq	r6,r5,2008ba4 <_free_r+0x2a4>
 2008a40:	28800117 	ldw	r2,4(r5)
 2008a44:	00ffff04 	movi	r3,-4
 2008a48:	10c4703a 	and	r2,r2,r3
 2008a4c:	3880022e 	bgeu	r7,r2,2008a58 <_free_r+0x158>
 2008a50:	29400217 	ldw	r5,8(r5)
 2008a54:	317ffa1e 	bne	r6,r5,2008a40 <_free_r+0x140>
 2008a58:	29800317 	ldw	r6,12(r5)
 2008a5c:	41800315 	stw	r6,12(r8)
 2008a60:	41400215 	stw	r5,8(r8)
 2008a64:	8809883a 	mov	r4,r17
 2008a68:	2a000315 	stw	r8,12(r5)
 2008a6c:	32000215 	stw	r8,8(r6)
 2008a70:	dfc00217 	ldw	ra,8(sp)
 2008a74:	dc400117 	ldw	r17,4(sp)
 2008a78:	dc000017 	ldw	r16,0(sp)
 2008a7c:	dec00304 	addi	sp,sp,12
 2008a80:	200da201 	jmpi	200da20 <__malloc_unlock>
 2008a84:	dfc00217 	ldw	ra,8(sp)
 2008a88:	dc400117 	ldw	r17,4(sp)
 2008a8c:	dc000017 	ldw	r16,0(sp)
 2008a90:	dec00304 	addi	sp,sp,12
 2008a94:	f800283a 	ret
 2008a98:	31000217 	ldw	r4,8(r6)
 2008a9c:	003fbd06 	br	2008994 <_free_r+0x94>
 2008aa0:	3806d0fa 	srli	r3,r7,3
 2008aa4:	00800044 	movi	r2,1
 2008aa8:	51400117 	ldw	r5,4(r10)
 2008aac:	180890fa 	slli	r4,r3,3
 2008ab0:	1807d0ba 	srai	r3,r3,2
 2008ab4:	22c9883a 	add	r4,r4,r11
 2008ab8:	21800217 	ldw	r6,8(r4)
 2008abc:	10c4983a 	sll	r2,r2,r3
 2008ac0:	41000315 	stw	r4,12(r8)
 2008ac4:	41800215 	stw	r6,8(r8)
 2008ac8:	288ab03a 	or	r5,r5,r2
 2008acc:	22000215 	stw	r8,8(r4)
 2008ad0:	8809883a 	mov	r4,r17
 2008ad4:	51400115 	stw	r5,4(r10)
 2008ad8:	32000315 	stw	r8,12(r6)
 2008adc:	dfc00217 	ldw	ra,8(sp)
 2008ae0:	dc400117 	ldw	r17,4(sp)
 2008ae4:	dc000017 	ldw	r16,0(sp)
 2008ae8:	dec00304 	addi	sp,sp,12
 2008aec:	200da201 	jmpi	200da20 <__malloc_unlock>
 2008af0:	2880004c 	andi	r2,r5,1
 2008af4:	3a4d883a 	add	r6,r7,r9
 2008af8:	1000071e 	bne	r2,zero,2008b18 <_free_r+0x218>
 2008afc:	80bffe17 	ldw	r2,-8(r16)
 2008b00:	4091c83a 	sub	r8,r8,r2
 2008b04:	41000317 	ldw	r4,12(r8)
 2008b08:	40c00217 	ldw	r3,8(r8)
 2008b0c:	308d883a 	add	r6,r6,r2
 2008b10:	20c00215 	stw	r3,8(r4)
 2008b14:	19000315 	stw	r4,12(r3)
 2008b18:	00808074 	movhi	r2,513
 2008b1c:	108d6b04 	addi	r2,r2,13740
 2008b20:	11000017 	ldw	r4,0(r2)
 2008b24:	30c00054 	ori	r3,r6,1
 2008b28:	52000215 	stw	r8,8(r10)
 2008b2c:	40c00115 	stw	r3,4(r8)
 2008b30:	313fa036 	bltu	r6,r4,20089b4 <_free_r+0xb4>
 2008b34:	00808074 	movhi	r2,513
 2008b38:	1094ea04 	addi	r2,r2,21416
 2008b3c:	11400017 	ldw	r5,0(r2)
 2008b40:	8809883a 	mov	r4,r17
 2008b44:	20087d40 	call	20087d4 <_malloc_trim_r>
 2008b48:	003f9a06 	br	20089b4 <_free_r+0xb4>
 2008b4c:	00800104 	movi	r2,4
 2008b50:	10c0072e 	bgeu	r2,r3,2008b70 <_free_r+0x270>
 2008b54:	00800504 	movi	r2,20
 2008b58:	10c01936 	bltu	r2,r3,2008bc0 <_free_r+0x2c0>
 2008b5c:	188016c4 	addi	r2,r3,91
 2008b60:	100690fa 	slli	r3,r2,3
 2008b64:	003fb306 	br	2008a34 <_free_r+0x134>
 2008b68:	01400044 	movi	r5,1
 2008b6c:	003f7e06 	br	2008968 <_free_r+0x68>
 2008b70:	3804d1ba 	srli	r2,r7,6
 2008b74:	10800e04 	addi	r2,r2,56
 2008b78:	100690fa 	slli	r3,r2,3
 2008b7c:	003fad06 	br	2008a34 <_free_r+0x134>
 2008b80:	22000315 	stw	r8,12(r4)
 2008b84:	22000215 	stw	r8,8(r4)
 2008b88:	3a05883a 	add	r2,r7,r8
 2008b8c:	38c00054 	ori	r3,r7,1
 2008b90:	11c00015 	stw	r7,0(r2)
 2008b94:	41000215 	stw	r4,8(r8)
 2008b98:	40c00115 	stw	r3,4(r8)
 2008b9c:	41000315 	stw	r4,12(r8)
 2008ba0:	003f8406 	br	20089b4 <_free_r+0xb4>
 2008ba4:	1005d0ba 	srai	r2,r2,2
 2008ba8:	00c00044 	movi	r3,1
 2008bac:	51000117 	ldw	r4,4(r10)
 2008bb0:	1886983a 	sll	r3,r3,r2
 2008bb4:	20c8b03a 	or	r4,r4,r3
 2008bb8:	51000115 	stw	r4,4(r10)
 2008bbc:	003fa706 	br	2008a5c <_free_r+0x15c>
 2008bc0:	00801504 	movi	r2,84
 2008bc4:	10c00436 	bltu	r2,r3,2008bd8 <_free_r+0x2d8>
 2008bc8:	3804d33a 	srli	r2,r7,12
 2008bcc:	10801b84 	addi	r2,r2,110
 2008bd0:	100690fa 	slli	r3,r2,3
 2008bd4:	003f9706 	br	2008a34 <_free_r+0x134>
 2008bd8:	00805504 	movi	r2,340
 2008bdc:	10c00436 	bltu	r2,r3,2008bf0 <_free_r+0x2f0>
 2008be0:	3804d3fa 	srli	r2,r7,15
 2008be4:	10801dc4 	addi	r2,r2,119
 2008be8:	100690fa 	slli	r3,r2,3
 2008bec:	003f9106 	br	2008a34 <_free_r+0x134>
 2008bf0:	00815504 	movi	r2,1364
 2008bf4:	10c0032e 	bgeu	r2,r3,2008c04 <_free_r+0x304>
 2008bf8:	00801f84 	movi	r2,126
 2008bfc:	00c0fc04 	movi	r3,1008
 2008c00:	003f8c06 	br	2008a34 <_free_r+0x134>
 2008c04:	3804d4ba 	srli	r2,r7,18
 2008c08:	10801f04 	addi	r2,r2,124
 2008c0c:	100690fa 	slli	r3,r2,3
 2008c10:	003f8806 	br	2008a34 <_free_r+0x134>

02008c14 <__sfvwrite_r>:
 2008c14:	30800217 	ldw	r2,8(r6)
 2008c18:	defff504 	addi	sp,sp,-44
 2008c1c:	df000915 	stw	fp,36(sp)
 2008c20:	dd800715 	stw	r22,28(sp)
 2008c24:	dc800315 	stw	r18,12(sp)
 2008c28:	dfc00a15 	stw	ra,40(sp)
 2008c2c:	ddc00815 	stw	r23,32(sp)
 2008c30:	dd400615 	stw	r21,24(sp)
 2008c34:	dd000515 	stw	r20,20(sp)
 2008c38:	dcc00415 	stw	r19,16(sp)
 2008c3c:	dc400215 	stw	r17,8(sp)
 2008c40:	dc000115 	stw	r16,4(sp)
 2008c44:	302d883a 	mov	r22,r6
 2008c48:	2039883a 	mov	fp,r4
 2008c4c:	2825883a 	mov	r18,r5
 2008c50:	10001c26 	beq	r2,zero,2008cc4 <__sfvwrite_r+0xb0>
 2008c54:	29c0030b 	ldhu	r7,12(r5)
 2008c58:	3880020c 	andi	r2,r7,8
 2008c5c:	10002726 	beq	r2,zero,2008cfc <__sfvwrite_r+0xe8>
 2008c60:	28800417 	ldw	r2,16(r5)
 2008c64:	10002526 	beq	r2,zero,2008cfc <__sfvwrite_r+0xe8>
 2008c68:	3880008c 	andi	r2,r7,2
 2008c6c:	b5400017 	ldw	r21,0(r22)
 2008c70:	10002826 	beq	r2,zero,2008d14 <__sfvwrite_r+0x100>
 2008c74:	0021883a 	mov	r16,zero
 2008c78:	0023883a 	mov	r17,zero
 2008c7c:	880d883a 	mov	r6,r17
 2008c80:	e009883a 	mov	r4,fp
 2008c84:	00810004 	movi	r2,1024
 2008c88:	80006e26 	beq	r16,zero,2008e44 <__sfvwrite_r+0x230>
 2008c8c:	800f883a 	mov	r7,r16
 2008c90:	91400717 	ldw	r5,28(r18)
 2008c94:	1400012e 	bgeu	r2,r16,2008c9c <__sfvwrite_r+0x88>
 2008c98:	100f883a 	mov	r7,r2
 2008c9c:	90c00917 	ldw	r3,36(r18)
 2008ca0:	183ee83a 	callr	r3
 2008ca4:	1007883a 	mov	r3,r2
 2008ca8:	80a1c83a 	sub	r16,r16,r2
 2008cac:	88a3883a 	add	r17,r17,r2
 2008cb0:	00806d0e 	bge	zero,r2,2008e68 <__sfvwrite_r+0x254>
 2008cb4:	b0800217 	ldw	r2,8(r22)
 2008cb8:	10c5c83a 	sub	r2,r2,r3
 2008cbc:	b0800215 	stw	r2,8(r22)
 2008cc0:	103fee1e 	bne	r2,zero,2008c7c <__sfvwrite_r+0x68>
 2008cc4:	0009883a 	mov	r4,zero
 2008cc8:	2005883a 	mov	r2,r4
 2008ccc:	dfc00a17 	ldw	ra,40(sp)
 2008cd0:	df000917 	ldw	fp,36(sp)
 2008cd4:	ddc00817 	ldw	r23,32(sp)
 2008cd8:	dd800717 	ldw	r22,28(sp)
 2008cdc:	dd400617 	ldw	r21,24(sp)
 2008ce0:	dd000517 	ldw	r20,20(sp)
 2008ce4:	dcc00417 	ldw	r19,16(sp)
 2008ce8:	dc800317 	ldw	r18,12(sp)
 2008cec:	dc400217 	ldw	r17,8(sp)
 2008cf0:	dc000117 	ldw	r16,4(sp)
 2008cf4:	dec00b04 	addi	sp,sp,44
 2008cf8:	f800283a 	ret
 2008cfc:	200697c0 	call	200697c <__swsetup_r>
 2008d00:	1000e41e 	bne	r2,zero,2009094 <__sfvwrite_r+0x480>
 2008d04:	91c0030b 	ldhu	r7,12(r18)
 2008d08:	b5400017 	ldw	r21,0(r22)
 2008d0c:	3880008c 	andi	r2,r7,2
 2008d10:	103fd81e 	bne	r2,zero,2008c74 <__sfvwrite_r+0x60>
 2008d14:	3880004c 	andi	r2,r7,1
 2008d18:	1005003a 	cmpeq	r2,r2,zero
 2008d1c:	10005726 	beq	r2,zero,2008e7c <__sfvwrite_r+0x268>
 2008d20:	0029883a 	mov	r20,zero
 2008d24:	002f883a 	mov	r23,zero
 2008d28:	a0004226 	beq	r20,zero,2008e34 <__sfvwrite_r+0x220>
 2008d2c:	3880800c 	andi	r2,r7,512
 2008d30:	94000217 	ldw	r16,8(r18)
 2008d34:	10008b26 	beq	r2,zero,2008f64 <__sfvwrite_r+0x350>
 2008d38:	800d883a 	mov	r6,r16
 2008d3c:	a400a536 	bltu	r20,r16,2008fd4 <__sfvwrite_r+0x3c0>
 2008d40:	3881200c 	andi	r2,r7,1152
 2008d44:	10002726 	beq	r2,zero,2008de4 <__sfvwrite_r+0x1d0>
 2008d48:	90800517 	ldw	r2,20(r18)
 2008d4c:	92000417 	ldw	r8,16(r18)
 2008d50:	91400017 	ldw	r5,0(r18)
 2008d54:	1087883a 	add	r3,r2,r2
 2008d58:	1887883a 	add	r3,r3,r2
 2008d5c:	1808d7fa 	srli	r4,r3,31
 2008d60:	2a21c83a 	sub	r16,r5,r8
 2008d64:	80800044 	addi	r2,r16,1
 2008d68:	20c9883a 	add	r4,r4,r3
 2008d6c:	2027d07a 	srai	r19,r4,1
 2008d70:	a085883a 	add	r2,r20,r2
 2008d74:	980d883a 	mov	r6,r19
 2008d78:	9880022e 	bgeu	r19,r2,2008d84 <__sfvwrite_r+0x170>
 2008d7c:	1027883a 	mov	r19,r2
 2008d80:	100d883a 	mov	r6,r2
 2008d84:	3881000c 	andi	r2,r7,1024
 2008d88:	1000b826 	beq	r2,zero,200906c <__sfvwrite_r+0x458>
 2008d8c:	300b883a 	mov	r5,r6
 2008d90:	e009883a 	mov	r4,fp
 2008d94:	20094880 	call	2009488 <_malloc_r>
 2008d98:	10003126 	beq	r2,zero,2008e60 <__sfvwrite_r+0x24c>
 2008d9c:	91400417 	ldw	r5,16(r18)
 2008da0:	1009883a 	mov	r4,r2
 2008da4:	800d883a 	mov	r6,r16
 2008da8:	1023883a 	mov	r17,r2
 2008dac:	2009cac0 	call	2009cac <memcpy>
 2008db0:	90c0030b 	ldhu	r3,12(r18)
 2008db4:	00beffc4 	movi	r2,-1025
 2008db8:	1886703a 	and	r3,r3,r2
 2008dbc:	18c02014 	ori	r3,r3,128
 2008dc0:	90c0030d 	sth	r3,12(r18)
 2008dc4:	9c07c83a 	sub	r3,r19,r16
 2008dc8:	8c05883a 	add	r2,r17,r16
 2008dcc:	a00d883a 	mov	r6,r20
 2008dd0:	a021883a 	mov	r16,r20
 2008dd4:	90800015 	stw	r2,0(r18)
 2008dd8:	90c00215 	stw	r3,8(r18)
 2008ddc:	94400415 	stw	r17,16(r18)
 2008de0:	94c00515 	stw	r19,20(r18)
 2008de4:	91000017 	ldw	r4,0(r18)
 2008de8:	b80b883a 	mov	r5,r23
 2008dec:	a023883a 	mov	r17,r20
 2008df0:	2009d4c0 	call	2009d4c <memmove>
 2008df4:	90c00217 	ldw	r3,8(r18)
 2008df8:	90800017 	ldw	r2,0(r18)
 2008dfc:	a027883a 	mov	r19,r20
 2008e00:	1c07c83a 	sub	r3,r3,r16
 2008e04:	1405883a 	add	r2,r2,r16
 2008e08:	90c00215 	stw	r3,8(r18)
 2008e0c:	a021883a 	mov	r16,r20
 2008e10:	90800015 	stw	r2,0(r18)
 2008e14:	b0800217 	ldw	r2,8(r22)
 2008e18:	1405c83a 	sub	r2,r2,r16
 2008e1c:	b0800215 	stw	r2,8(r22)
 2008e20:	103fa826 	beq	r2,zero,2008cc4 <__sfvwrite_r+0xb0>
 2008e24:	a469c83a 	sub	r20,r20,r17
 2008e28:	91c0030b 	ldhu	r7,12(r18)
 2008e2c:	bcef883a 	add	r23,r23,r19
 2008e30:	a03fbe1e 	bne	r20,zero,2008d2c <__sfvwrite_r+0x118>
 2008e34:	adc00017 	ldw	r23,0(r21)
 2008e38:	ad000117 	ldw	r20,4(r21)
 2008e3c:	ad400204 	addi	r21,r21,8
 2008e40:	003fb906 	br	2008d28 <__sfvwrite_r+0x114>
 2008e44:	ac400017 	ldw	r17,0(r21)
 2008e48:	ac000117 	ldw	r16,4(r21)
 2008e4c:	ad400204 	addi	r21,r21,8
 2008e50:	003f8a06 	br	2008c7c <__sfvwrite_r+0x68>
 2008e54:	91400417 	ldw	r5,16(r18)
 2008e58:	e009883a 	mov	r4,fp
 2008e5c:	20089000 	call	2008900 <_free_r>
 2008e60:	00800304 	movi	r2,12
 2008e64:	e0800015 	stw	r2,0(fp)
 2008e68:	9080030b 	ldhu	r2,12(r18)
 2008e6c:	013fffc4 	movi	r4,-1
 2008e70:	10801014 	ori	r2,r2,64
 2008e74:	9080030d 	sth	r2,12(r18)
 2008e78:	003f9306 	br	2008cc8 <__sfvwrite_r+0xb4>
 2008e7c:	0027883a 	mov	r19,zero
 2008e80:	002f883a 	mov	r23,zero
 2008e84:	d8000015 	stw	zero,0(sp)
 2008e88:	0029883a 	mov	r20,zero
 2008e8c:	98001e26 	beq	r19,zero,2008f08 <__sfvwrite_r+0x2f4>
 2008e90:	d8c00017 	ldw	r3,0(sp)
 2008e94:	1804c03a 	cmpne	r2,r3,zero
 2008e98:	10005e26 	beq	r2,zero,2009014 <__sfvwrite_r+0x400>
 2008e9c:	9821883a 	mov	r16,r19
 2008ea0:	a4c0012e 	bgeu	r20,r19,2008ea8 <__sfvwrite_r+0x294>
 2008ea4:	a021883a 	mov	r16,r20
 2008ea8:	91000017 	ldw	r4,0(r18)
 2008eac:	90800417 	ldw	r2,16(r18)
 2008eb0:	91800217 	ldw	r6,8(r18)
 2008eb4:	91c00517 	ldw	r7,20(r18)
 2008eb8:	1100022e 	bgeu	r2,r4,2008ec4 <__sfvwrite_r+0x2b0>
 2008ebc:	31e3883a 	add	r17,r6,r7
 2008ec0:	8c001616 	blt	r17,r16,2008f1c <__sfvwrite_r+0x308>
 2008ec4:	81c03816 	blt	r16,r7,2008fa8 <__sfvwrite_r+0x394>
 2008ec8:	90c00917 	ldw	r3,36(r18)
 2008ecc:	91400717 	ldw	r5,28(r18)
 2008ed0:	e009883a 	mov	r4,fp
 2008ed4:	b80d883a 	mov	r6,r23
 2008ed8:	183ee83a 	callr	r3
 2008edc:	1023883a 	mov	r17,r2
 2008ee0:	00bfe10e 	bge	zero,r2,2008e68 <__sfvwrite_r+0x254>
 2008ee4:	a469c83a 	sub	r20,r20,r17
 2008ee8:	a0001826 	beq	r20,zero,2008f4c <__sfvwrite_r+0x338>
 2008eec:	b0800217 	ldw	r2,8(r22)
 2008ef0:	1445c83a 	sub	r2,r2,r17
 2008ef4:	b0800215 	stw	r2,8(r22)
 2008ef8:	103f7226 	beq	r2,zero,2008cc4 <__sfvwrite_r+0xb0>
 2008efc:	9c67c83a 	sub	r19,r19,r17
 2008f00:	bc6f883a 	add	r23,r23,r17
 2008f04:	983fe21e 	bne	r19,zero,2008e90 <__sfvwrite_r+0x27c>
 2008f08:	adc00017 	ldw	r23,0(r21)
 2008f0c:	acc00117 	ldw	r19,4(r21)
 2008f10:	ad400204 	addi	r21,r21,8
 2008f14:	d8000015 	stw	zero,0(sp)
 2008f18:	003fdc06 	br	2008e8c <__sfvwrite_r+0x278>
 2008f1c:	b80b883a 	mov	r5,r23
 2008f20:	880d883a 	mov	r6,r17
 2008f24:	2009d4c0 	call	2009d4c <memmove>
 2008f28:	90c00017 	ldw	r3,0(r18)
 2008f2c:	e009883a 	mov	r4,fp
 2008f30:	900b883a 	mov	r5,r18
 2008f34:	1c47883a 	add	r3,r3,r17
 2008f38:	90c00015 	stw	r3,0(r18)
 2008f3c:	20082b00 	call	20082b0 <_fflush_r>
 2008f40:	103fc91e 	bne	r2,zero,2008e68 <__sfvwrite_r+0x254>
 2008f44:	a469c83a 	sub	r20,r20,r17
 2008f48:	a03fe81e 	bne	r20,zero,2008eec <__sfvwrite_r+0x2d8>
 2008f4c:	e009883a 	mov	r4,fp
 2008f50:	900b883a 	mov	r5,r18
 2008f54:	20082b00 	call	20082b0 <_fflush_r>
 2008f58:	103fc31e 	bne	r2,zero,2008e68 <__sfvwrite_r+0x254>
 2008f5c:	d8000015 	stw	zero,0(sp)
 2008f60:	003fe206 	br	2008eec <__sfvwrite_r+0x2d8>
 2008f64:	91000017 	ldw	r4,0(r18)
 2008f68:	90800417 	ldw	r2,16(r18)
 2008f6c:	1100022e 	bgeu	r2,r4,2008f78 <__sfvwrite_r+0x364>
 2008f70:	8023883a 	mov	r17,r16
 2008f74:	85003136 	bltu	r16,r20,200903c <__sfvwrite_r+0x428>
 2008f78:	91c00517 	ldw	r7,20(r18)
 2008f7c:	a1c01836 	bltu	r20,r7,2008fe0 <__sfvwrite_r+0x3cc>
 2008f80:	90c00917 	ldw	r3,36(r18)
 2008f84:	91400717 	ldw	r5,28(r18)
 2008f88:	e009883a 	mov	r4,fp
 2008f8c:	b80d883a 	mov	r6,r23
 2008f90:	183ee83a 	callr	r3
 2008f94:	1021883a 	mov	r16,r2
 2008f98:	00bfb30e 	bge	zero,r2,2008e68 <__sfvwrite_r+0x254>
 2008f9c:	1023883a 	mov	r17,r2
 2008fa0:	1027883a 	mov	r19,r2
 2008fa4:	003f9b06 	br	2008e14 <__sfvwrite_r+0x200>
 2008fa8:	b80b883a 	mov	r5,r23
 2008fac:	800d883a 	mov	r6,r16
 2008fb0:	2009d4c0 	call	2009d4c <memmove>
 2008fb4:	90c00217 	ldw	r3,8(r18)
 2008fb8:	90800017 	ldw	r2,0(r18)
 2008fbc:	8023883a 	mov	r17,r16
 2008fc0:	1c07c83a 	sub	r3,r3,r16
 2008fc4:	1405883a 	add	r2,r2,r16
 2008fc8:	90c00215 	stw	r3,8(r18)
 2008fcc:	90800015 	stw	r2,0(r18)
 2008fd0:	003fc406 	br	2008ee4 <__sfvwrite_r+0x2d0>
 2008fd4:	a00d883a 	mov	r6,r20
 2008fd8:	a021883a 	mov	r16,r20
 2008fdc:	003f8106 	br	2008de4 <__sfvwrite_r+0x1d0>
 2008fe0:	b80b883a 	mov	r5,r23
 2008fe4:	a00d883a 	mov	r6,r20
 2008fe8:	2009d4c0 	call	2009d4c <memmove>
 2008fec:	90c00217 	ldw	r3,8(r18)
 2008ff0:	90800017 	ldw	r2,0(r18)
 2008ff4:	a021883a 	mov	r16,r20
 2008ff8:	1d07c83a 	sub	r3,r3,r20
 2008ffc:	1505883a 	add	r2,r2,r20
 2009000:	a023883a 	mov	r17,r20
 2009004:	a027883a 	mov	r19,r20
 2009008:	90c00215 	stw	r3,8(r18)
 200900c:	90800015 	stw	r2,0(r18)
 2009010:	003f8006 	br	2008e14 <__sfvwrite_r+0x200>
 2009014:	b809883a 	mov	r4,r23
 2009018:	01400284 	movi	r5,10
 200901c:	980d883a 	mov	r6,r19
 2009020:	2009bc80 	call	2009bc8 <memchr>
 2009024:	10001726 	beq	r2,zero,2009084 <__sfvwrite_r+0x470>
 2009028:	15c5c83a 	sub	r2,r2,r23
 200902c:	15000044 	addi	r20,r2,1
 2009030:	00800044 	movi	r2,1
 2009034:	d8800015 	stw	r2,0(sp)
 2009038:	003f9806 	br	2008e9c <__sfvwrite_r+0x288>
 200903c:	b80b883a 	mov	r5,r23
 2009040:	800d883a 	mov	r6,r16
 2009044:	2009d4c0 	call	2009d4c <memmove>
 2009048:	90c00017 	ldw	r3,0(r18)
 200904c:	e009883a 	mov	r4,fp
 2009050:	900b883a 	mov	r5,r18
 2009054:	1c07883a 	add	r3,r3,r16
 2009058:	90c00015 	stw	r3,0(r18)
 200905c:	8027883a 	mov	r19,r16
 2009060:	20082b00 	call	20082b0 <_fflush_r>
 2009064:	103f6b26 	beq	r2,zero,2008e14 <__sfvwrite_r+0x200>
 2009068:	003f7f06 	br	2008e68 <__sfvwrite_r+0x254>
 200906c:	400b883a 	mov	r5,r8
 2009070:	e009883a 	mov	r4,fp
 2009074:	200aeb80 	call	200aeb8 <_realloc_r>
 2009078:	103f7626 	beq	r2,zero,2008e54 <__sfvwrite_r+0x240>
 200907c:	1023883a 	mov	r17,r2
 2009080:	003f5006 	br	2008dc4 <__sfvwrite_r+0x1b0>
 2009084:	00c00044 	movi	r3,1
 2009088:	9d000044 	addi	r20,r19,1
 200908c:	d8c00015 	stw	r3,0(sp)
 2009090:	003f8206 	br	2008e9c <__sfvwrite_r+0x288>
 2009094:	9080030b 	ldhu	r2,12(r18)
 2009098:	00c00244 	movi	r3,9
 200909c:	013fffc4 	movi	r4,-1
 20090a0:	10801014 	ori	r2,r2,64
 20090a4:	9080030d 	sth	r2,12(r18)
 20090a8:	e0c00015 	stw	r3,0(fp)
 20090ac:	003f0606 	br	2008cc8 <__sfvwrite_r+0xb4>

020090b0 <_fwalk_reent>:
 20090b0:	defff704 	addi	sp,sp,-36
 20090b4:	dcc00315 	stw	r19,12(sp)
 20090b8:	24c0b804 	addi	r19,r4,736
 20090bc:	dd800615 	stw	r22,24(sp)
 20090c0:	dd400515 	stw	r21,20(sp)
 20090c4:	dfc00815 	stw	ra,32(sp)
 20090c8:	ddc00715 	stw	r23,28(sp)
 20090cc:	dd000415 	stw	r20,16(sp)
 20090d0:	dc800215 	stw	r18,8(sp)
 20090d4:	dc400115 	stw	r17,4(sp)
 20090d8:	dc000015 	stw	r16,0(sp)
 20090dc:	202b883a 	mov	r21,r4
 20090e0:	282d883a 	mov	r22,r5
 20090e4:	20085380 	call	2008538 <__sfp_lock_acquire>
 20090e8:	98002126 	beq	r19,zero,2009170 <_fwalk_reent+0xc0>
 20090ec:	002f883a 	mov	r23,zero
 20090f0:	9c800117 	ldw	r18,4(r19)
 20090f4:	9c000217 	ldw	r16,8(r19)
 20090f8:	90bfffc4 	addi	r2,r18,-1
 20090fc:	10000d16 	blt	r2,zero,2009134 <_fwalk_reent+0x84>
 2009100:	0023883a 	mov	r17,zero
 2009104:	053fffc4 	movi	r20,-1
 2009108:	8080030f 	ldh	r2,12(r16)
 200910c:	8c400044 	addi	r17,r17,1
 2009110:	10000626 	beq	r2,zero,200912c <_fwalk_reent+0x7c>
 2009114:	8080038f 	ldh	r2,14(r16)
 2009118:	800b883a 	mov	r5,r16
 200911c:	a809883a 	mov	r4,r21
 2009120:	15000226 	beq	r2,r20,200912c <_fwalk_reent+0x7c>
 2009124:	b03ee83a 	callr	r22
 2009128:	b8aeb03a 	or	r23,r23,r2
 200912c:	84001704 	addi	r16,r16,92
 2009130:	947ff51e 	bne	r18,r17,2009108 <_fwalk_reent+0x58>
 2009134:	9cc00017 	ldw	r19,0(r19)
 2009138:	983fed1e 	bne	r19,zero,20090f0 <_fwalk_reent+0x40>
 200913c:	200853c0 	call	200853c <__sfp_lock_release>
 2009140:	b805883a 	mov	r2,r23
 2009144:	dfc00817 	ldw	ra,32(sp)
 2009148:	ddc00717 	ldw	r23,28(sp)
 200914c:	dd800617 	ldw	r22,24(sp)
 2009150:	dd400517 	ldw	r21,20(sp)
 2009154:	dd000417 	ldw	r20,16(sp)
 2009158:	dcc00317 	ldw	r19,12(sp)
 200915c:	dc800217 	ldw	r18,8(sp)
 2009160:	dc400117 	ldw	r17,4(sp)
 2009164:	dc000017 	ldw	r16,0(sp)
 2009168:	dec00904 	addi	sp,sp,36
 200916c:	f800283a 	ret
 2009170:	002f883a 	mov	r23,zero
 2009174:	003ff106 	br	200913c <_fwalk_reent+0x8c>

02009178 <_fwalk>:
 2009178:	defff804 	addi	sp,sp,-32
 200917c:	dcc00315 	stw	r19,12(sp)
 2009180:	24c0b804 	addi	r19,r4,736
 2009184:	dd400515 	stw	r21,20(sp)
 2009188:	dfc00715 	stw	ra,28(sp)
 200918c:	dd800615 	stw	r22,24(sp)
 2009190:	dd000415 	stw	r20,16(sp)
 2009194:	dc800215 	stw	r18,8(sp)
 2009198:	dc400115 	stw	r17,4(sp)
 200919c:	dc000015 	stw	r16,0(sp)
 20091a0:	282b883a 	mov	r21,r5
 20091a4:	20085380 	call	2008538 <__sfp_lock_acquire>
 20091a8:	98001f26 	beq	r19,zero,2009228 <_fwalk+0xb0>
 20091ac:	002d883a 	mov	r22,zero
 20091b0:	9c800117 	ldw	r18,4(r19)
 20091b4:	9c000217 	ldw	r16,8(r19)
 20091b8:	90bfffc4 	addi	r2,r18,-1
 20091bc:	10000c16 	blt	r2,zero,20091f0 <_fwalk+0x78>
 20091c0:	0023883a 	mov	r17,zero
 20091c4:	053fffc4 	movi	r20,-1
 20091c8:	8080030f 	ldh	r2,12(r16)
 20091cc:	8c400044 	addi	r17,r17,1
 20091d0:	10000526 	beq	r2,zero,20091e8 <_fwalk+0x70>
 20091d4:	8080038f 	ldh	r2,14(r16)
 20091d8:	8009883a 	mov	r4,r16
 20091dc:	15000226 	beq	r2,r20,20091e8 <_fwalk+0x70>
 20091e0:	a83ee83a 	callr	r21
 20091e4:	b0acb03a 	or	r22,r22,r2
 20091e8:	84001704 	addi	r16,r16,92
 20091ec:	947ff61e 	bne	r18,r17,20091c8 <_fwalk+0x50>
 20091f0:	9cc00017 	ldw	r19,0(r19)
 20091f4:	983fee1e 	bne	r19,zero,20091b0 <_fwalk+0x38>
 20091f8:	200853c0 	call	200853c <__sfp_lock_release>
 20091fc:	b005883a 	mov	r2,r22
 2009200:	dfc00717 	ldw	ra,28(sp)
 2009204:	dd800617 	ldw	r22,24(sp)
 2009208:	dd400517 	ldw	r21,20(sp)
 200920c:	dd000417 	ldw	r20,16(sp)
 2009210:	dcc00317 	ldw	r19,12(sp)
 2009214:	dc800217 	ldw	r18,8(sp)
 2009218:	dc400117 	ldw	r17,4(sp)
 200921c:	dc000017 	ldw	r16,0(sp)
 2009220:	dec00804 	addi	sp,sp,32
 2009224:	f800283a 	ret
 2009228:	002d883a 	mov	r22,zero
 200922c:	003ff206 	br	20091f8 <_fwalk+0x80>

02009230 <__locale_charset>:
 2009230:	d0a01117 	ldw	r2,-32700(gp)
 2009234:	f800283a 	ret

02009238 <_localeconv_r>:
 2009238:	00808074 	movhi	r2,513
 200923c:	10854204 	addi	r2,r2,5384
 2009240:	f800283a 	ret

02009244 <localeconv>:
 2009244:	00808074 	movhi	r2,513
 2009248:	108d6704 	addi	r2,r2,13724
 200924c:	11000017 	ldw	r4,0(r2)
 2009250:	20092381 	jmpi	2009238 <_localeconv_r>

02009254 <_setlocale_r>:
 2009254:	defffc04 	addi	sp,sp,-16
 2009258:	00c08074 	movhi	r3,513
 200925c:	18c53e04 	addi	r3,r3,5368
 2009260:	dc800215 	stw	r18,8(sp)
 2009264:	dc400115 	stw	r17,4(sp)
 2009268:	dc000015 	stw	r16,0(sp)
 200926c:	2023883a 	mov	r17,r4
 2009270:	2825883a 	mov	r18,r5
 2009274:	dfc00315 	stw	ra,12(sp)
 2009278:	3021883a 	mov	r16,r6
 200927c:	3009883a 	mov	r4,r6
 2009280:	180b883a 	mov	r5,r3
 2009284:	30000926 	beq	r6,zero,20092ac <_setlocale_r+0x58>
 2009288:	20048800 	call	2004880 <strcmp>
 200928c:	8009883a 	mov	r4,r16
 2009290:	01408074 	movhi	r5,513
 2009294:	29452a04 	addi	r5,r5,5288
 2009298:	10000b1e 	bne	r2,zero,20092c8 <_setlocale_r+0x74>
 200929c:	8c000d15 	stw	r16,52(r17)
 20092a0:	8c800c15 	stw	r18,48(r17)
 20092a4:	00c08074 	movhi	r3,513
 20092a8:	18c53e04 	addi	r3,r3,5368
 20092ac:	1805883a 	mov	r2,r3
 20092b0:	dfc00317 	ldw	ra,12(sp)
 20092b4:	dc800217 	ldw	r18,8(sp)
 20092b8:	dc400117 	ldw	r17,4(sp)
 20092bc:	dc000017 	ldw	r16,0(sp)
 20092c0:	dec00404 	addi	sp,sp,16
 20092c4:	f800283a 	ret
 20092c8:	20048800 	call	2004880 <strcmp>
 20092cc:	0007883a 	mov	r3,zero
 20092d0:	103ff226 	beq	r2,zero,200929c <_setlocale_r+0x48>
 20092d4:	003ff506 	br	20092ac <_setlocale_r+0x58>

020092d8 <setlocale>:
 20092d8:	01808074 	movhi	r6,513
 20092dc:	318d6704 	addi	r6,r6,13724
 20092e0:	2007883a 	mov	r3,r4
 20092e4:	31000017 	ldw	r4,0(r6)
 20092e8:	280d883a 	mov	r6,r5
 20092ec:	180b883a 	mov	r5,r3
 20092f0:	20092541 	jmpi	2009254 <_setlocale_r>

020092f4 <__smakebuf_r>:
 20092f4:	2880030b 	ldhu	r2,12(r5)
 20092f8:	deffed04 	addi	sp,sp,-76
 20092fc:	dc401015 	stw	r17,64(sp)
 2009300:	1080008c 	andi	r2,r2,2
 2009304:	dc000f15 	stw	r16,60(sp)
 2009308:	dfc01215 	stw	ra,72(sp)
 200930c:	dc801115 	stw	r18,68(sp)
 2009310:	2821883a 	mov	r16,r5
 2009314:	2023883a 	mov	r17,r4
 2009318:	10000b26 	beq	r2,zero,2009348 <__smakebuf_r+0x54>
 200931c:	28c010c4 	addi	r3,r5,67
 2009320:	00800044 	movi	r2,1
 2009324:	28800515 	stw	r2,20(r5)
 2009328:	28c00415 	stw	r3,16(r5)
 200932c:	28c00015 	stw	r3,0(r5)
 2009330:	dfc01217 	ldw	ra,72(sp)
 2009334:	dc801117 	ldw	r18,68(sp)
 2009338:	dc401017 	ldw	r17,64(sp)
 200933c:	dc000f17 	ldw	r16,60(sp)
 2009340:	dec01304 	addi	sp,sp,76
 2009344:	f800283a 	ret
 2009348:	2940038f 	ldh	r5,14(r5)
 200934c:	28002116 	blt	r5,zero,20093d4 <__smakebuf_r+0xe0>
 2009350:	d80d883a 	mov	r6,sp
 2009354:	200b9ac0 	call	200b9ac <_fstat_r>
 2009358:	10001e16 	blt	r2,zero,20093d4 <__smakebuf_r+0xe0>
 200935c:	d8800117 	ldw	r2,4(sp)
 2009360:	00e00014 	movui	r3,32768
 2009364:	113c000c 	andi	r4,r2,61440
 2009368:	20c03126 	beq	r4,r3,2009430 <__smakebuf_r+0x13c>
 200936c:	8080030b 	ldhu	r2,12(r16)
 2009370:	00c80004 	movi	r3,8192
 2009374:	10820014 	ori	r2,r2,2048
 2009378:	8080030d 	sth	r2,12(r16)
 200937c:	20c01e26 	beq	r4,r3,20093f8 <__smakebuf_r+0x104>
 2009380:	04810004 	movi	r18,1024
 2009384:	8809883a 	mov	r4,r17
 2009388:	900b883a 	mov	r5,r18
 200938c:	20094880 	call	2009488 <_malloc_r>
 2009390:	1009883a 	mov	r4,r2
 2009394:	10003126 	beq	r2,zero,200945c <__smakebuf_r+0x168>
 2009398:	80c0030b 	ldhu	r3,12(r16)
 200939c:	00808074 	movhi	r2,513
 20093a0:	10a18b04 	addi	r2,r2,-31188
 20093a4:	88800f15 	stw	r2,60(r17)
 20093a8:	18c02014 	ori	r3,r3,128
 20093ac:	84800515 	stw	r18,20(r16)
 20093b0:	80c0030d 	sth	r3,12(r16)
 20093b4:	81000415 	stw	r4,16(r16)
 20093b8:	81000015 	stw	r4,0(r16)
 20093bc:	dfc01217 	ldw	ra,72(sp)
 20093c0:	dc801117 	ldw	r18,68(sp)
 20093c4:	dc401017 	ldw	r17,64(sp)
 20093c8:	dc000f17 	ldw	r16,60(sp)
 20093cc:	dec01304 	addi	sp,sp,76
 20093d0:	f800283a 	ret
 20093d4:	80c0030b 	ldhu	r3,12(r16)
 20093d8:	1880200c 	andi	r2,r3,128
 20093dc:	10000426 	beq	r2,zero,20093f0 <__smakebuf_r+0xfc>
 20093e0:	04801004 	movi	r18,64
 20093e4:	18820014 	ori	r2,r3,2048
 20093e8:	8080030d 	sth	r2,12(r16)
 20093ec:	003fe506 	br	2009384 <__smakebuf_r+0x90>
 20093f0:	04810004 	movi	r18,1024
 20093f4:	003ffb06 	br	20093e4 <__smakebuf_r+0xf0>
 20093f8:	8140038f 	ldh	r5,14(r16)
 20093fc:	8809883a 	mov	r4,r17
 2009400:	200ba200 	call	200ba20 <_isatty_r>
 2009404:	103fde26 	beq	r2,zero,2009380 <__smakebuf_r+0x8c>
 2009408:	8080030b 	ldhu	r2,12(r16)
 200940c:	80c010c4 	addi	r3,r16,67
 2009410:	04810004 	movi	r18,1024
 2009414:	10800054 	ori	r2,r2,1
 2009418:	8080030d 	sth	r2,12(r16)
 200941c:	00800044 	movi	r2,1
 2009420:	80c00415 	stw	r3,16(r16)
 2009424:	80800515 	stw	r2,20(r16)
 2009428:	80c00015 	stw	r3,0(r16)
 200942c:	003fd506 	br	2009384 <__smakebuf_r+0x90>
 2009430:	80c00a17 	ldw	r3,40(r16)
 2009434:	00808074 	movhi	r2,513
 2009438:	10ad6504 	addi	r2,r2,-19052
 200943c:	18bfcb1e 	bne	r3,r2,200936c <__smakebuf_r+0x78>
 2009440:	8080030b 	ldhu	r2,12(r16)
 2009444:	00c10004 	movi	r3,1024
 2009448:	1825883a 	mov	r18,r3
 200944c:	10c4b03a 	or	r2,r2,r3
 2009450:	8080030d 	sth	r2,12(r16)
 2009454:	80c01315 	stw	r3,76(r16)
 2009458:	003fca06 	br	2009384 <__smakebuf_r+0x90>
 200945c:	8100030b 	ldhu	r4,12(r16)
 2009460:	2080800c 	andi	r2,r4,512
 2009464:	103fb21e 	bne	r2,zero,2009330 <__smakebuf_r+0x3c>
 2009468:	80c010c4 	addi	r3,r16,67
 200946c:	21000094 	ori	r4,r4,2
 2009470:	00800044 	movi	r2,1
 2009474:	80800515 	stw	r2,20(r16)
 2009478:	8100030d 	sth	r4,12(r16)
 200947c:	80c00415 	stw	r3,16(r16)
 2009480:	80c00015 	stw	r3,0(r16)
 2009484:	003faa06 	br	2009330 <__smakebuf_r+0x3c>

02009488 <_malloc_r>:
 2009488:	defff604 	addi	sp,sp,-40
 200948c:	28c002c4 	addi	r3,r5,11
 2009490:	00800584 	movi	r2,22
 2009494:	dc800215 	stw	r18,8(sp)
 2009498:	dfc00915 	stw	ra,36(sp)
 200949c:	df000815 	stw	fp,32(sp)
 20094a0:	ddc00715 	stw	r23,28(sp)
 20094a4:	dd800615 	stw	r22,24(sp)
 20094a8:	dd400515 	stw	r21,20(sp)
 20094ac:	dd000415 	stw	r20,16(sp)
 20094b0:	dcc00315 	stw	r19,12(sp)
 20094b4:	dc400115 	stw	r17,4(sp)
 20094b8:	dc000015 	stw	r16,0(sp)
 20094bc:	2025883a 	mov	r18,r4
 20094c0:	10c01236 	bltu	r2,r3,200950c <_malloc_r+0x84>
 20094c4:	04400404 	movi	r17,16
 20094c8:	8940142e 	bgeu	r17,r5,200951c <_malloc_r+0x94>
 20094cc:	00800304 	movi	r2,12
 20094d0:	0007883a 	mov	r3,zero
 20094d4:	90800015 	stw	r2,0(r18)
 20094d8:	1805883a 	mov	r2,r3
 20094dc:	dfc00917 	ldw	ra,36(sp)
 20094e0:	df000817 	ldw	fp,32(sp)
 20094e4:	ddc00717 	ldw	r23,28(sp)
 20094e8:	dd800617 	ldw	r22,24(sp)
 20094ec:	dd400517 	ldw	r21,20(sp)
 20094f0:	dd000417 	ldw	r20,16(sp)
 20094f4:	dcc00317 	ldw	r19,12(sp)
 20094f8:	dc800217 	ldw	r18,8(sp)
 20094fc:	dc400117 	ldw	r17,4(sp)
 2009500:	dc000017 	ldw	r16,0(sp)
 2009504:	dec00a04 	addi	sp,sp,40
 2009508:	f800283a 	ret
 200950c:	00bffe04 	movi	r2,-8
 2009510:	18a2703a 	and	r17,r3,r2
 2009514:	883fed16 	blt	r17,zero,20094cc <_malloc_r+0x44>
 2009518:	897fec36 	bltu	r17,r5,20094cc <_malloc_r+0x44>
 200951c:	9009883a 	mov	r4,r18
 2009520:	200da000 	call	200da00 <__malloc_lock>
 2009524:	00807dc4 	movi	r2,503
 2009528:	14402b2e 	bgeu	r2,r17,20095d8 <_malloc_r+0x150>
 200952c:	8806d27a 	srli	r3,r17,9
 2009530:	18003f1e 	bne	r3,zero,2009630 <_malloc_r+0x1a8>
 2009534:	880cd0fa 	srli	r6,r17,3
 2009538:	300490fa 	slli	r2,r6,3
 200953c:	02c08074 	movhi	r11,513
 2009540:	5ac78d04 	addi	r11,r11,7732
 2009544:	12cb883a 	add	r5,r2,r11
 2009548:	2c000317 	ldw	r16,12(r5)
 200954c:	580f883a 	mov	r7,r11
 2009550:	2c00041e 	bne	r5,r16,2009564 <_malloc_r+0xdc>
 2009554:	00000a06 	br	2009580 <_malloc_r+0xf8>
 2009558:	1800860e 	bge	r3,zero,2009774 <_malloc_r+0x2ec>
 200955c:	84000317 	ldw	r16,12(r16)
 2009560:	2c000726 	beq	r5,r16,2009580 <_malloc_r+0xf8>
 2009564:	80800117 	ldw	r2,4(r16)
 2009568:	00ffff04 	movi	r3,-4
 200956c:	10c8703a 	and	r4,r2,r3
 2009570:	2447c83a 	sub	r3,r4,r17
 2009574:	008003c4 	movi	r2,15
 2009578:	10fff70e 	bge	r2,r3,2009558 <_malloc_r+0xd0>
 200957c:	31bfffc4 	addi	r6,r6,-1
 2009580:	32400044 	addi	r9,r6,1
 2009584:	02808074 	movhi	r10,513
 2009588:	52878f04 	addi	r10,r10,7740
 200958c:	54000217 	ldw	r16,8(r10)
 2009590:	8280a026 	beq	r16,r10,2009814 <_malloc_r+0x38c>
 2009594:	80800117 	ldw	r2,4(r16)
 2009598:	00ffff04 	movi	r3,-4
 200959c:	10ca703a 	and	r5,r2,r3
 20095a0:	2c4dc83a 	sub	r6,r5,r17
 20095a4:	008003c4 	movi	r2,15
 20095a8:	11808316 	blt	r2,r6,20097b8 <_malloc_r+0x330>
 20095ac:	52800315 	stw	r10,12(r10)
 20095b0:	52800215 	stw	r10,8(r10)
 20095b4:	30002916 	blt	r6,zero,200965c <_malloc_r+0x1d4>
 20095b8:	8147883a 	add	r3,r16,r5
 20095bc:	18800117 	ldw	r2,4(r3)
 20095c0:	9009883a 	mov	r4,r18
 20095c4:	10800054 	ori	r2,r2,1
 20095c8:	18800115 	stw	r2,4(r3)
 20095cc:	200da200 	call	200da20 <__malloc_unlock>
 20095d0:	80c00204 	addi	r3,r16,8
 20095d4:	003fc006 	br	20094d8 <_malloc_r+0x50>
 20095d8:	02c08074 	movhi	r11,513
 20095dc:	5ac78d04 	addi	r11,r11,7732
 20095e0:	8ac5883a 	add	r2,r17,r11
 20095e4:	14000317 	ldw	r16,12(r2)
 20095e8:	580f883a 	mov	r7,r11
 20095ec:	8806d0fa 	srli	r3,r17,3
 20095f0:	14006c26 	beq	r2,r16,20097a4 <_malloc_r+0x31c>
 20095f4:	80c00117 	ldw	r3,4(r16)
 20095f8:	00bfff04 	movi	r2,-4
 20095fc:	81800317 	ldw	r6,12(r16)
 2009600:	1886703a 	and	r3,r3,r2
 2009604:	80c7883a 	add	r3,r16,r3
 2009608:	18800117 	ldw	r2,4(r3)
 200960c:	81400217 	ldw	r5,8(r16)
 2009610:	9009883a 	mov	r4,r18
 2009614:	10800054 	ori	r2,r2,1
 2009618:	18800115 	stw	r2,4(r3)
 200961c:	31400215 	stw	r5,8(r6)
 2009620:	29800315 	stw	r6,12(r5)
 2009624:	200da200 	call	200da20 <__malloc_unlock>
 2009628:	80c00204 	addi	r3,r16,8
 200962c:	003faa06 	br	20094d8 <_malloc_r+0x50>
 2009630:	00800104 	movi	r2,4
 2009634:	10c0052e 	bgeu	r2,r3,200964c <_malloc_r+0x1c4>
 2009638:	00800504 	movi	r2,20
 200963c:	10c07836 	bltu	r2,r3,2009820 <_malloc_r+0x398>
 2009640:	198016c4 	addi	r6,r3,91
 2009644:	300490fa 	slli	r2,r6,3
 2009648:	003fbc06 	br	200953c <_malloc_r+0xb4>
 200964c:	8804d1ba 	srli	r2,r17,6
 2009650:	11800e04 	addi	r6,r2,56
 2009654:	300490fa 	slli	r2,r6,3
 2009658:	003fb806 	br	200953c <_malloc_r+0xb4>
 200965c:	00807fc4 	movi	r2,511
 2009660:	1140bb36 	bltu	r2,r5,2009950 <_malloc_r+0x4c8>
 2009664:	2806d0fa 	srli	r3,r5,3
 2009668:	573ffe04 	addi	fp,r10,-8
 200966c:	00800044 	movi	r2,1
 2009670:	180890fa 	slli	r4,r3,3
 2009674:	1807d0ba 	srai	r3,r3,2
 2009678:	e1c00117 	ldw	r7,4(fp)
 200967c:	5909883a 	add	r4,r11,r4
 2009680:	21400217 	ldw	r5,8(r4)
 2009684:	10c4983a 	sll	r2,r2,r3
 2009688:	81000315 	stw	r4,12(r16)
 200968c:	81400215 	stw	r5,8(r16)
 2009690:	388eb03a 	or	r7,r7,r2
 2009694:	2c000315 	stw	r16,12(r5)
 2009698:	24000215 	stw	r16,8(r4)
 200969c:	e1c00115 	stw	r7,4(fp)
 20096a0:	4807883a 	mov	r3,r9
 20096a4:	4800cd16 	blt	r9,zero,20099dc <_malloc_r+0x554>
 20096a8:	1807d0ba 	srai	r3,r3,2
 20096ac:	00800044 	movi	r2,1
 20096b0:	10c8983a 	sll	r4,r2,r3
 20096b4:	39004436 	bltu	r7,r4,20097c8 <_malloc_r+0x340>
 20096b8:	21c4703a 	and	r2,r4,r7
 20096bc:	10000a1e 	bne	r2,zero,20096e8 <_malloc_r+0x260>
 20096c0:	2109883a 	add	r4,r4,r4
 20096c4:	00bfff04 	movi	r2,-4
 20096c8:	4884703a 	and	r2,r9,r2
 20096cc:	3906703a 	and	r3,r7,r4
 20096d0:	12400104 	addi	r9,r2,4
 20096d4:	1800041e 	bne	r3,zero,20096e8 <_malloc_r+0x260>
 20096d8:	2109883a 	add	r4,r4,r4
 20096dc:	3904703a 	and	r2,r7,r4
 20096e0:	4a400104 	addi	r9,r9,4
 20096e4:	103ffc26 	beq	r2,zero,20096d8 <_malloc_r+0x250>
 20096e8:	480490fa 	slli	r2,r9,3
 20096ec:	4819883a 	mov	r12,r9
 20096f0:	023fff04 	movi	r8,-4
 20096f4:	589b883a 	add	r13,r11,r2
 20096f8:	6807883a 	mov	r3,r13
 20096fc:	014003c4 	movi	r5,15
 2009700:	1c000317 	ldw	r16,12(r3)
 2009704:	1c00041e 	bne	r3,r16,2009718 <_malloc_r+0x290>
 2009708:	0000a706 	br	20099a8 <_malloc_r+0x520>
 200970c:	3000ab0e 	bge	r6,zero,20099bc <_malloc_r+0x534>
 2009710:	84000317 	ldw	r16,12(r16)
 2009714:	1c00a426 	beq	r3,r16,20099a8 <_malloc_r+0x520>
 2009718:	80800117 	ldw	r2,4(r16)
 200971c:	1204703a 	and	r2,r2,r8
 2009720:	144dc83a 	sub	r6,r2,r17
 2009724:	29bff90e 	bge	r5,r6,200970c <_malloc_r+0x284>
 2009728:	81000317 	ldw	r4,12(r16)
 200972c:	80c00217 	ldw	r3,8(r16)
 2009730:	89400054 	ori	r5,r17,1
 2009734:	8445883a 	add	r2,r16,r17
 2009738:	20c00215 	stw	r3,8(r4)
 200973c:	19000315 	stw	r4,12(r3)
 2009740:	81400115 	stw	r5,4(r16)
 2009744:	1187883a 	add	r3,r2,r6
 2009748:	31000054 	ori	r4,r6,1
 200974c:	50800315 	stw	r2,12(r10)
 2009750:	50800215 	stw	r2,8(r10)
 2009754:	19800015 	stw	r6,0(r3)
 2009758:	11000115 	stw	r4,4(r2)
 200975c:	12800215 	stw	r10,8(r2)
 2009760:	12800315 	stw	r10,12(r2)
 2009764:	9009883a 	mov	r4,r18
 2009768:	200da200 	call	200da20 <__malloc_unlock>
 200976c:	80c00204 	addi	r3,r16,8
 2009770:	003f5906 	br	20094d8 <_malloc_r+0x50>
 2009774:	8109883a 	add	r4,r16,r4
 2009778:	20800117 	ldw	r2,4(r4)
 200977c:	80c00217 	ldw	r3,8(r16)
 2009780:	81400317 	ldw	r5,12(r16)
 2009784:	10800054 	ori	r2,r2,1
 2009788:	20800115 	stw	r2,4(r4)
 200978c:	28c00215 	stw	r3,8(r5)
 2009790:	19400315 	stw	r5,12(r3)
 2009794:	9009883a 	mov	r4,r18
 2009798:	200da200 	call	200da20 <__malloc_unlock>
 200979c:	80c00204 	addi	r3,r16,8
 20097a0:	003f4d06 	br	20094d8 <_malloc_r+0x50>
 20097a4:	80800204 	addi	r2,r16,8
 20097a8:	14000317 	ldw	r16,12(r2)
 20097ac:	143f911e 	bne	r2,r16,20095f4 <_malloc_r+0x16c>
 20097b0:	1a400084 	addi	r9,r3,2
 20097b4:	003f7306 	br	2009584 <_malloc_r+0xfc>
 20097b8:	88c00054 	ori	r3,r17,1
 20097bc:	8445883a 	add	r2,r16,r17
 20097c0:	80c00115 	stw	r3,4(r16)
 20097c4:	003fdf06 	br	2009744 <_malloc_r+0x2bc>
 20097c8:	e4000217 	ldw	r16,8(fp)
 20097cc:	00bfff04 	movi	r2,-4
 20097d0:	80c00117 	ldw	r3,4(r16)
 20097d4:	802d883a 	mov	r22,r16
 20097d8:	18aa703a 	and	r21,r3,r2
 20097dc:	ac401636 	bltu	r21,r17,2009838 <_malloc_r+0x3b0>
 20097e0:	ac49c83a 	sub	r4,r21,r17
 20097e4:	008003c4 	movi	r2,15
 20097e8:	1100130e 	bge	r2,r4,2009838 <_malloc_r+0x3b0>
 20097ec:	88800054 	ori	r2,r17,1
 20097f0:	8447883a 	add	r3,r16,r17
 20097f4:	80800115 	stw	r2,4(r16)
 20097f8:	20800054 	ori	r2,r4,1
 20097fc:	18800115 	stw	r2,4(r3)
 2009800:	e0c00215 	stw	r3,8(fp)
 2009804:	9009883a 	mov	r4,r18
 2009808:	200da200 	call	200da20 <__malloc_unlock>
 200980c:	80c00204 	addi	r3,r16,8
 2009810:	003f3106 	br	20094d8 <_malloc_r+0x50>
 2009814:	39c00117 	ldw	r7,4(r7)
 2009818:	573ffe04 	addi	fp,r10,-8
 200981c:	003fa006 	br	20096a0 <_malloc_r+0x218>
 2009820:	00801504 	movi	r2,84
 2009824:	10c06736 	bltu	r2,r3,20099c4 <_malloc_r+0x53c>
 2009828:	8804d33a 	srli	r2,r17,12
 200982c:	11801b84 	addi	r6,r2,110
 2009830:	300490fa 	slli	r2,r6,3
 2009834:	003f4106 	br	200953c <_malloc_r+0xb4>
 2009838:	d0a79117 	ldw	r2,-25020(gp)
 200983c:	d0e01317 	ldw	r3,-32692(gp)
 2009840:	053fffc4 	movi	r20,-1
 2009844:	10800404 	addi	r2,r2,16
 2009848:	88a7883a 	add	r19,r17,r2
 200984c:	1d000326 	beq	r3,r20,200985c <_malloc_r+0x3d4>
 2009850:	98c3ffc4 	addi	r3,r19,4095
 2009854:	00bc0004 	movi	r2,-4096
 2009858:	18a6703a 	and	r19,r3,r2
 200985c:	9009883a 	mov	r4,r18
 2009860:	980b883a 	mov	r5,r19
 2009864:	200b51c0 	call	200b51c <_sbrk_r>
 2009868:	1009883a 	mov	r4,r2
 200986c:	15000426 	beq	r2,r20,2009880 <_malloc_r+0x3f8>
 2009870:	854b883a 	add	r5,r16,r21
 2009874:	1029883a 	mov	r20,r2
 2009878:	11405a2e 	bgeu	r2,r5,20099e4 <_malloc_r+0x55c>
 200987c:	87000c26 	beq	r16,fp,20098b0 <_malloc_r+0x428>
 2009880:	e4000217 	ldw	r16,8(fp)
 2009884:	80c00117 	ldw	r3,4(r16)
 2009888:	00bfff04 	movi	r2,-4
 200988c:	1884703a 	and	r2,r3,r2
 2009890:	14400336 	bltu	r2,r17,20098a0 <_malloc_r+0x418>
 2009894:	1449c83a 	sub	r4,r2,r17
 2009898:	008003c4 	movi	r2,15
 200989c:	113fd316 	blt	r2,r4,20097ec <_malloc_r+0x364>
 20098a0:	9009883a 	mov	r4,r18
 20098a4:	200da200 	call	200da20 <__malloc_unlock>
 20098a8:	0007883a 	mov	r3,zero
 20098ac:	003f0a06 	br	20094d8 <_malloc_r+0x50>
 20098b0:	05c08074 	movhi	r23,513
 20098b4:	bdd4f404 	addi	r23,r23,21456
 20098b8:	b8800017 	ldw	r2,0(r23)
 20098bc:	988d883a 	add	r6,r19,r2
 20098c0:	b9800015 	stw	r6,0(r23)
 20098c4:	d0e01317 	ldw	r3,-32692(gp)
 20098c8:	00bfffc4 	movi	r2,-1
 20098cc:	18808e26 	beq	r3,r2,2009b08 <_malloc_r+0x680>
 20098d0:	2145c83a 	sub	r2,r4,r5
 20098d4:	3085883a 	add	r2,r6,r2
 20098d8:	b8800015 	stw	r2,0(r23)
 20098dc:	20c001cc 	andi	r3,r4,7
 20098e0:	18005f1e 	bne	r3,zero,2009a60 <_malloc_r+0x5d8>
 20098e4:	000b883a 	mov	r5,zero
 20098e8:	a4c5883a 	add	r2,r20,r19
 20098ec:	1083ffcc 	andi	r2,r2,4095
 20098f0:	00c40004 	movi	r3,4096
 20098f4:	1887c83a 	sub	r3,r3,r2
 20098f8:	28e7883a 	add	r19,r5,r3
 20098fc:	9009883a 	mov	r4,r18
 2009900:	980b883a 	mov	r5,r19
 2009904:	200b51c0 	call	200b51c <_sbrk_r>
 2009908:	1007883a 	mov	r3,r2
 200990c:	00bfffc4 	movi	r2,-1
 2009910:	18807a26 	beq	r3,r2,2009afc <_malloc_r+0x674>
 2009914:	1d05c83a 	sub	r2,r3,r20
 2009918:	9885883a 	add	r2,r19,r2
 200991c:	10c00054 	ori	r3,r2,1
 2009920:	b8800017 	ldw	r2,0(r23)
 2009924:	a021883a 	mov	r16,r20
 2009928:	a0c00115 	stw	r3,4(r20)
 200992c:	9885883a 	add	r2,r19,r2
 2009930:	b8800015 	stw	r2,0(r23)
 2009934:	e5000215 	stw	r20,8(fp)
 2009938:	b7003626 	beq	r22,fp,2009a14 <_malloc_r+0x58c>
 200993c:	018003c4 	movi	r6,15
 2009940:	35404b36 	bltu	r6,r21,2009a70 <_malloc_r+0x5e8>
 2009944:	00800044 	movi	r2,1
 2009948:	a0800115 	stw	r2,4(r20)
 200994c:	003fcd06 	br	2009884 <_malloc_r+0x3fc>
 2009950:	2808d27a 	srli	r4,r5,9
 2009954:	2000371e 	bne	r4,zero,2009a34 <_malloc_r+0x5ac>
 2009958:	2808d0fa 	srli	r4,r5,3
 200995c:	200690fa 	slli	r3,r4,3
 2009960:	1ad1883a 	add	r8,r3,r11
 2009964:	41800217 	ldw	r6,8(r8)
 2009968:	41805b26 	beq	r8,r6,2009ad8 <_malloc_r+0x650>
 200996c:	30800117 	ldw	r2,4(r6)
 2009970:	00ffff04 	movi	r3,-4
 2009974:	10c4703a 	and	r2,r2,r3
 2009978:	2880022e 	bgeu	r5,r2,2009984 <_malloc_r+0x4fc>
 200997c:	31800217 	ldw	r6,8(r6)
 2009980:	41bffa1e 	bne	r8,r6,200996c <_malloc_r+0x4e4>
 2009984:	32000317 	ldw	r8,12(r6)
 2009988:	39c00117 	ldw	r7,4(r7)
 200998c:	82000315 	stw	r8,12(r16)
 2009990:	81800215 	stw	r6,8(r16)
 2009994:	07008074 	movhi	fp,513
 2009998:	e7078d04 	addi	fp,fp,7732
 200999c:	34000315 	stw	r16,12(r6)
 20099a0:	44000215 	stw	r16,8(r8)
 20099a4:	003f3e06 	br	20096a0 <_malloc_r+0x218>
 20099a8:	63000044 	addi	r12,r12,1
 20099ac:	608000cc 	andi	r2,r12,3
 20099b0:	10005d26 	beq	r2,zero,2009b28 <_malloc_r+0x6a0>
 20099b4:	18c00204 	addi	r3,r3,8
 20099b8:	003f5106 	br	2009700 <_malloc_r+0x278>
 20099bc:	8089883a 	add	r4,r16,r2
 20099c0:	003f6d06 	br	2009778 <_malloc_r+0x2f0>
 20099c4:	00805504 	movi	r2,340
 20099c8:	10c02036 	bltu	r2,r3,2009a4c <_malloc_r+0x5c4>
 20099cc:	8804d3fa 	srli	r2,r17,15
 20099d0:	11801dc4 	addi	r6,r2,119
 20099d4:	300490fa 	slli	r2,r6,3
 20099d8:	003ed806 	br	200953c <_malloc_r+0xb4>
 20099dc:	48c000c4 	addi	r3,r9,3
 20099e0:	003f3106 	br	20096a8 <_malloc_r+0x220>
 20099e4:	05c08074 	movhi	r23,513
 20099e8:	bdd4f404 	addi	r23,r23,21456
 20099ec:	b8800017 	ldw	r2,0(r23)
 20099f0:	988d883a 	add	r6,r19,r2
 20099f4:	b9800015 	stw	r6,0(r23)
 20099f8:	293fb21e 	bne	r5,r4,20098c4 <_malloc_r+0x43c>
 20099fc:	2083ffcc 	andi	r2,r4,4095
 2009a00:	103fb01e 	bne	r2,zero,20098c4 <_malloc_r+0x43c>
 2009a04:	e4000217 	ldw	r16,8(fp)
 2009a08:	9d45883a 	add	r2,r19,r21
 2009a0c:	10800054 	ori	r2,r2,1
 2009a10:	80800115 	stw	r2,4(r16)
 2009a14:	b8c00017 	ldw	r3,0(r23)
 2009a18:	d0a79217 	ldw	r2,-25016(gp)
 2009a1c:	10c0012e 	bgeu	r2,r3,2009a24 <_malloc_r+0x59c>
 2009a20:	d0e79215 	stw	r3,-25016(gp)
 2009a24:	d0a79317 	ldw	r2,-25012(gp)
 2009a28:	10ff962e 	bgeu	r2,r3,2009884 <_malloc_r+0x3fc>
 2009a2c:	d0e79315 	stw	r3,-25012(gp)
 2009a30:	003f9406 	br	2009884 <_malloc_r+0x3fc>
 2009a34:	00800104 	movi	r2,4
 2009a38:	11001e36 	bltu	r2,r4,2009ab4 <_malloc_r+0x62c>
 2009a3c:	2804d1ba 	srli	r2,r5,6
 2009a40:	11000e04 	addi	r4,r2,56
 2009a44:	200690fa 	slli	r3,r4,3
 2009a48:	003fc506 	br	2009960 <_malloc_r+0x4d8>
 2009a4c:	00815504 	movi	r2,1364
 2009a50:	10c01d2e 	bgeu	r2,r3,2009ac8 <_malloc_r+0x640>
 2009a54:	01801f84 	movi	r6,126
 2009a58:	0080fc04 	movi	r2,1008
 2009a5c:	003eb706 	br	200953c <_malloc_r+0xb4>
 2009a60:	00800204 	movi	r2,8
 2009a64:	10cbc83a 	sub	r5,r2,r3
 2009a68:	2169883a 	add	r20,r4,r5
 2009a6c:	003f9e06 	br	20098e8 <_malloc_r+0x460>
 2009a70:	00bffe04 	movi	r2,-8
 2009a74:	a93ffd04 	addi	r4,r21,-12
 2009a78:	2088703a 	and	r4,r4,r2
 2009a7c:	b10b883a 	add	r5,r22,r4
 2009a80:	00c00144 	movi	r3,5
 2009a84:	28c00215 	stw	r3,8(r5)
 2009a88:	28c00115 	stw	r3,4(r5)
 2009a8c:	b0800117 	ldw	r2,4(r22)
 2009a90:	1080004c 	andi	r2,r2,1
 2009a94:	2084b03a 	or	r2,r4,r2
 2009a98:	b0800115 	stw	r2,4(r22)
 2009a9c:	313fdd2e 	bgeu	r6,r4,2009a14 <_malloc_r+0x58c>
 2009aa0:	b1400204 	addi	r5,r22,8
 2009aa4:	9009883a 	mov	r4,r18
 2009aa8:	20089000 	call	2008900 <_free_r>
 2009aac:	e4000217 	ldw	r16,8(fp)
 2009ab0:	003fd806 	br	2009a14 <_malloc_r+0x58c>
 2009ab4:	00800504 	movi	r2,20
 2009ab8:	11001536 	bltu	r2,r4,2009b10 <_malloc_r+0x688>
 2009abc:	210016c4 	addi	r4,r4,91
 2009ac0:	200690fa 	slli	r3,r4,3
 2009ac4:	003fa606 	br	2009960 <_malloc_r+0x4d8>
 2009ac8:	8804d4ba 	srli	r2,r17,18
 2009acc:	11801f04 	addi	r6,r2,124
 2009ad0:	300490fa 	slli	r2,r6,3
 2009ad4:	003e9906 	br	200953c <_malloc_r+0xb4>
 2009ad8:	2009d0ba 	srai	r4,r4,2
 2009adc:	01408074 	movhi	r5,513
 2009ae0:	29478d04 	addi	r5,r5,7732
 2009ae4:	00c00044 	movi	r3,1
 2009ae8:	28800117 	ldw	r2,4(r5)
 2009aec:	1906983a 	sll	r3,r3,r4
 2009af0:	10c4b03a 	or	r2,r2,r3
 2009af4:	28800115 	stw	r2,4(r5)
 2009af8:	003fa306 	br	2009988 <_malloc_r+0x500>
 2009afc:	0027883a 	mov	r19,zero
 2009b00:	00c00044 	movi	r3,1
 2009b04:	003f8606 	br	2009920 <_malloc_r+0x498>
 2009b08:	d1201315 	stw	r4,-32692(gp)
 2009b0c:	003f7306 	br	20098dc <_malloc_r+0x454>
 2009b10:	00801504 	movi	r2,84
 2009b14:	11001936 	bltu	r2,r4,2009b7c <_malloc_r+0x6f4>
 2009b18:	2804d33a 	srli	r2,r5,12
 2009b1c:	11001b84 	addi	r4,r2,110
 2009b20:	200690fa 	slli	r3,r4,3
 2009b24:	003f8e06 	br	2009960 <_malloc_r+0x4d8>
 2009b28:	480b883a 	mov	r5,r9
 2009b2c:	6807883a 	mov	r3,r13
 2009b30:	288000cc 	andi	r2,r5,3
 2009b34:	18fffe04 	addi	r3,r3,-8
 2009b38:	297fffc4 	addi	r5,r5,-1
 2009b3c:	10001526 	beq	r2,zero,2009b94 <_malloc_r+0x70c>
 2009b40:	18800217 	ldw	r2,8(r3)
 2009b44:	10fffa26 	beq	r2,r3,2009b30 <_malloc_r+0x6a8>
 2009b48:	2109883a 	add	r4,r4,r4
 2009b4c:	393f1e36 	bltu	r7,r4,20097c8 <_malloc_r+0x340>
 2009b50:	203f1d26 	beq	r4,zero,20097c8 <_malloc_r+0x340>
 2009b54:	21c4703a 	and	r2,r4,r7
 2009b58:	10000226 	beq	r2,zero,2009b64 <_malloc_r+0x6dc>
 2009b5c:	6013883a 	mov	r9,r12
 2009b60:	003ee106 	br	20096e8 <_malloc_r+0x260>
 2009b64:	2109883a 	add	r4,r4,r4
 2009b68:	3904703a 	and	r2,r7,r4
 2009b6c:	63000104 	addi	r12,r12,4
 2009b70:	103ffc26 	beq	r2,zero,2009b64 <_malloc_r+0x6dc>
 2009b74:	6013883a 	mov	r9,r12
 2009b78:	003edb06 	br	20096e8 <_malloc_r+0x260>
 2009b7c:	00805504 	movi	r2,340
 2009b80:	11000836 	bltu	r2,r4,2009ba4 <_malloc_r+0x71c>
 2009b84:	2804d3fa 	srli	r2,r5,15
 2009b88:	11001dc4 	addi	r4,r2,119
 2009b8c:	200690fa 	slli	r3,r4,3
 2009b90:	003f7306 	br	2009960 <_malloc_r+0x4d8>
 2009b94:	0104303a 	nor	r2,zero,r4
 2009b98:	388e703a 	and	r7,r7,r2
 2009b9c:	e1c00115 	stw	r7,4(fp)
 2009ba0:	003fe906 	br	2009b48 <_malloc_r+0x6c0>
 2009ba4:	00815504 	movi	r2,1364
 2009ba8:	1100032e 	bgeu	r2,r4,2009bb8 <_malloc_r+0x730>
 2009bac:	01001f84 	movi	r4,126
 2009bb0:	00c0fc04 	movi	r3,1008
 2009bb4:	003f6a06 	br	2009960 <_malloc_r+0x4d8>
 2009bb8:	2804d4ba 	srli	r2,r5,18
 2009bbc:	11001f04 	addi	r4,r2,124
 2009bc0:	200690fa 	slli	r3,r4,3
 2009bc4:	003f6606 	br	2009960 <_malloc_r+0x4d8>

02009bc8 <memchr>:
 2009bc8:	008000c4 	movi	r2,3
 2009bcc:	29403fcc 	andi	r5,r5,255
 2009bd0:	2007883a 	mov	r3,r4
 2009bd4:	1180022e 	bgeu	r2,r6,2009be0 <memchr+0x18>
 2009bd8:	2084703a 	and	r2,r4,r2
 2009bdc:	10000b26 	beq	r2,zero,2009c0c <memchr+0x44>
 2009be0:	313fffc4 	addi	r4,r6,-1
 2009be4:	3000051e 	bne	r6,zero,2009bfc <memchr+0x34>
 2009be8:	00002c06 	br	2009c9c <memchr+0xd4>
 2009bec:	213fffc4 	addi	r4,r4,-1
 2009bf0:	00bfffc4 	movi	r2,-1
 2009bf4:	18c00044 	addi	r3,r3,1
 2009bf8:	20802826 	beq	r4,r2,2009c9c <memchr+0xd4>
 2009bfc:	18800003 	ldbu	r2,0(r3)
 2009c00:	28bffa1e 	bne	r5,r2,2009bec <memchr+0x24>
 2009c04:	1805883a 	mov	r2,r3
 2009c08:	f800283a 	ret
 2009c0c:	0011883a 	mov	r8,zero
 2009c10:	0007883a 	mov	r3,zero
 2009c14:	01c00104 	movi	r7,4
 2009c18:	4004923a 	slli	r2,r8,8
 2009c1c:	18c00044 	addi	r3,r3,1
 2009c20:	1151883a 	add	r8,r2,r5
 2009c24:	19fffc1e 	bne	r3,r7,2009c18 <memchr+0x50>
 2009c28:	02bfbff4 	movhi	r10,65279
 2009c2c:	52bfbfc4 	addi	r10,r10,-257
 2009c30:	02602074 	movhi	r9,32897
 2009c34:	4a602004 	addi	r9,r9,-32640
 2009c38:	02c000c4 	movi	r11,3
 2009c3c:	20800017 	ldw	r2,0(r4)
 2009c40:	31bfff04 	addi	r6,r6,-4
 2009c44:	200f883a 	mov	r7,r4
 2009c48:	1204f03a 	xor	r2,r2,r8
 2009c4c:	1287883a 	add	r3,r2,r10
 2009c50:	1a46703a 	and	r3,r3,r9
 2009c54:	0084303a 	nor	r2,zero,r2
 2009c58:	10c4703a 	and	r2,r2,r3
 2009c5c:	10000b26 	beq	r2,zero,2009c8c <memchr+0xc4>
 2009c60:	20800003 	ldbu	r2,0(r4)
 2009c64:	28800f26 	beq	r5,r2,2009ca4 <memchr+0xdc>
 2009c68:	20800043 	ldbu	r2,1(r4)
 2009c6c:	21c00044 	addi	r7,r4,1
 2009c70:	28800c26 	beq	r5,r2,2009ca4 <memchr+0xdc>
 2009c74:	20800083 	ldbu	r2,2(r4)
 2009c78:	21c00084 	addi	r7,r4,2
 2009c7c:	28800926 	beq	r5,r2,2009ca4 <memchr+0xdc>
 2009c80:	208000c3 	ldbu	r2,3(r4)
 2009c84:	21c000c4 	addi	r7,r4,3
 2009c88:	28800626 	beq	r5,r2,2009ca4 <memchr+0xdc>
 2009c8c:	21000104 	addi	r4,r4,4
 2009c90:	59bfea36 	bltu	r11,r6,2009c3c <memchr+0x74>
 2009c94:	2007883a 	mov	r3,r4
 2009c98:	003fd106 	br	2009be0 <memchr+0x18>
 2009c9c:	0005883a 	mov	r2,zero
 2009ca0:	f800283a 	ret
 2009ca4:	3805883a 	mov	r2,r7
 2009ca8:	f800283a 	ret

02009cac <memcpy>:
 2009cac:	01c003c4 	movi	r7,15
 2009cb0:	2007883a 	mov	r3,r4
 2009cb4:	3980032e 	bgeu	r7,r6,2009cc4 <memcpy+0x18>
 2009cb8:	2904b03a 	or	r2,r5,r4
 2009cbc:	108000cc 	andi	r2,r2,3
 2009cc0:	10000926 	beq	r2,zero,2009ce8 <memcpy+0x3c>
 2009cc4:	30000626 	beq	r6,zero,2009ce0 <memcpy+0x34>
 2009cc8:	30cd883a 	add	r6,r6,r3
 2009ccc:	28800003 	ldbu	r2,0(r5)
 2009cd0:	29400044 	addi	r5,r5,1
 2009cd4:	18800005 	stb	r2,0(r3)
 2009cd8:	18c00044 	addi	r3,r3,1
 2009cdc:	30fffb1e 	bne	r6,r3,2009ccc <memcpy+0x20>
 2009ce0:	2005883a 	mov	r2,r4
 2009ce4:	f800283a 	ret
 2009ce8:	3811883a 	mov	r8,r7
 2009cec:	200f883a 	mov	r7,r4
 2009cf0:	28c00017 	ldw	r3,0(r5)
 2009cf4:	31bffc04 	addi	r6,r6,-16
 2009cf8:	38c00015 	stw	r3,0(r7)
 2009cfc:	28800117 	ldw	r2,4(r5)
 2009d00:	38800115 	stw	r2,4(r7)
 2009d04:	28c00217 	ldw	r3,8(r5)
 2009d08:	38c00215 	stw	r3,8(r7)
 2009d0c:	28800317 	ldw	r2,12(r5)
 2009d10:	29400404 	addi	r5,r5,16
 2009d14:	38800315 	stw	r2,12(r7)
 2009d18:	39c00404 	addi	r7,r7,16
 2009d1c:	41bff436 	bltu	r8,r6,2009cf0 <memcpy+0x44>
 2009d20:	008000c4 	movi	r2,3
 2009d24:	1180072e 	bgeu	r2,r6,2009d44 <memcpy+0x98>
 2009d28:	1007883a 	mov	r3,r2
 2009d2c:	28800017 	ldw	r2,0(r5)
 2009d30:	31bfff04 	addi	r6,r6,-4
 2009d34:	29400104 	addi	r5,r5,4
 2009d38:	38800015 	stw	r2,0(r7)
 2009d3c:	39c00104 	addi	r7,r7,4
 2009d40:	19bffa36 	bltu	r3,r6,2009d2c <memcpy+0x80>
 2009d44:	3807883a 	mov	r3,r7
 2009d48:	003fde06 	br	2009cc4 <memcpy+0x18>

02009d4c <memmove>:
 2009d4c:	2807883a 	mov	r3,r5
 2009d50:	2011883a 	mov	r8,r4
 2009d54:	29000c2e 	bgeu	r5,r4,2009d88 <memmove+0x3c>
 2009d58:	298f883a 	add	r7,r5,r6
 2009d5c:	21c00a2e 	bgeu	r4,r7,2009d88 <memmove+0x3c>
 2009d60:	30000726 	beq	r6,zero,2009d80 <memmove+0x34>
 2009d64:	2187883a 	add	r3,r4,r6
 2009d68:	198dc83a 	sub	r6,r3,r6
 2009d6c:	39ffffc4 	addi	r7,r7,-1
 2009d70:	38800003 	ldbu	r2,0(r7)
 2009d74:	18ffffc4 	addi	r3,r3,-1
 2009d78:	18800005 	stb	r2,0(r3)
 2009d7c:	19bffb1e 	bne	r3,r6,2009d6c <memmove+0x20>
 2009d80:	2005883a 	mov	r2,r4
 2009d84:	f800283a 	ret
 2009d88:	01c003c4 	movi	r7,15
 2009d8c:	39800a36 	bltu	r7,r6,2009db8 <memmove+0x6c>
 2009d90:	303ffb26 	beq	r6,zero,2009d80 <memmove+0x34>
 2009d94:	400f883a 	mov	r7,r8
 2009d98:	320d883a 	add	r6,r6,r8
 2009d9c:	28800003 	ldbu	r2,0(r5)
 2009da0:	29400044 	addi	r5,r5,1
 2009da4:	38800005 	stb	r2,0(r7)
 2009da8:	39c00044 	addi	r7,r7,1
 2009dac:	39bffb1e 	bne	r7,r6,2009d9c <memmove+0x50>
 2009db0:	2005883a 	mov	r2,r4
 2009db4:	f800283a 	ret
 2009db8:	1904b03a 	or	r2,r3,r4
 2009dbc:	108000cc 	andi	r2,r2,3
 2009dc0:	103ff31e 	bne	r2,zero,2009d90 <memmove+0x44>
 2009dc4:	3811883a 	mov	r8,r7
 2009dc8:	180b883a 	mov	r5,r3
 2009dcc:	200f883a 	mov	r7,r4
 2009dd0:	28c00017 	ldw	r3,0(r5)
 2009dd4:	31bffc04 	addi	r6,r6,-16
 2009dd8:	38c00015 	stw	r3,0(r7)
 2009ddc:	28800117 	ldw	r2,4(r5)
 2009de0:	38800115 	stw	r2,4(r7)
 2009de4:	28c00217 	ldw	r3,8(r5)
 2009de8:	38c00215 	stw	r3,8(r7)
 2009dec:	28800317 	ldw	r2,12(r5)
 2009df0:	29400404 	addi	r5,r5,16
 2009df4:	38800315 	stw	r2,12(r7)
 2009df8:	39c00404 	addi	r7,r7,16
 2009dfc:	41bff436 	bltu	r8,r6,2009dd0 <memmove+0x84>
 2009e00:	008000c4 	movi	r2,3
 2009e04:	1180072e 	bgeu	r2,r6,2009e24 <memmove+0xd8>
 2009e08:	1007883a 	mov	r3,r2
 2009e0c:	28800017 	ldw	r2,0(r5)
 2009e10:	31bfff04 	addi	r6,r6,-4
 2009e14:	29400104 	addi	r5,r5,4
 2009e18:	38800015 	stw	r2,0(r7)
 2009e1c:	39c00104 	addi	r7,r7,4
 2009e20:	19bffa36 	bltu	r3,r6,2009e0c <memmove+0xc0>
 2009e24:	3811883a 	mov	r8,r7
 2009e28:	003fd906 	br	2009d90 <memmove+0x44>

02009e2c <_Bfree>:
 2009e2c:	28000826 	beq	r5,zero,2009e50 <_Bfree+0x24>
 2009e30:	28800117 	ldw	r2,4(r5)
 2009e34:	21001317 	ldw	r4,76(r4)
 2009e38:	1085883a 	add	r2,r2,r2
 2009e3c:	1085883a 	add	r2,r2,r2
 2009e40:	1105883a 	add	r2,r2,r4
 2009e44:	10c00017 	ldw	r3,0(r2)
 2009e48:	28c00015 	stw	r3,0(r5)
 2009e4c:	11400015 	stw	r5,0(r2)
 2009e50:	f800283a 	ret

02009e54 <__hi0bits>:
 2009e54:	20bfffec 	andhi	r2,r4,65535
 2009e58:	10001426 	beq	r2,zero,2009eac <__hi0bits+0x58>
 2009e5c:	0007883a 	mov	r3,zero
 2009e60:	20bfc02c 	andhi	r2,r4,65280
 2009e64:	1000021e 	bne	r2,zero,2009e70 <__hi0bits+0x1c>
 2009e68:	2008923a 	slli	r4,r4,8
 2009e6c:	18c00204 	addi	r3,r3,8
 2009e70:	20bc002c 	andhi	r2,r4,61440
 2009e74:	1000021e 	bne	r2,zero,2009e80 <__hi0bits+0x2c>
 2009e78:	2008913a 	slli	r4,r4,4
 2009e7c:	18c00104 	addi	r3,r3,4
 2009e80:	20b0002c 	andhi	r2,r4,49152
 2009e84:	1000031e 	bne	r2,zero,2009e94 <__hi0bits+0x40>
 2009e88:	2105883a 	add	r2,r4,r4
 2009e8c:	18c00084 	addi	r3,r3,2
 2009e90:	1089883a 	add	r4,r2,r2
 2009e94:	20000316 	blt	r4,zero,2009ea4 <__hi0bits+0x50>
 2009e98:	2090002c 	andhi	r2,r4,16384
 2009e9c:	10000626 	beq	r2,zero,2009eb8 <__hi0bits+0x64>
 2009ea0:	18c00044 	addi	r3,r3,1
 2009ea4:	1805883a 	mov	r2,r3
 2009ea8:	f800283a 	ret
 2009eac:	2008943a 	slli	r4,r4,16
 2009eb0:	00c00404 	movi	r3,16
 2009eb4:	003fea06 	br	2009e60 <__hi0bits+0xc>
 2009eb8:	00c00804 	movi	r3,32
 2009ebc:	1805883a 	mov	r2,r3
 2009ec0:	f800283a 	ret

02009ec4 <__lo0bits>:
 2009ec4:	20c00017 	ldw	r3,0(r4)
 2009ec8:	188001cc 	andi	r2,r3,7
 2009ecc:	10000a26 	beq	r2,zero,2009ef8 <__lo0bits+0x34>
 2009ed0:	1880004c 	andi	r2,r3,1
 2009ed4:	1005003a 	cmpeq	r2,r2,zero
 2009ed8:	10002126 	beq	r2,zero,2009f60 <__lo0bits+0x9c>
 2009edc:	1880008c 	andi	r2,r3,2
 2009ee0:	1000251e 	bne	r2,zero,2009f78 <__lo0bits+0xb4>
 2009ee4:	1804d0ba 	srli	r2,r3,2
 2009ee8:	01400084 	movi	r5,2
 2009eec:	20800015 	stw	r2,0(r4)
 2009ef0:	2805883a 	mov	r2,r5
 2009ef4:	f800283a 	ret
 2009ef8:	18bfffcc 	andi	r2,r3,65535
 2009efc:	10001526 	beq	r2,zero,2009f54 <__lo0bits+0x90>
 2009f00:	000b883a 	mov	r5,zero
 2009f04:	18803fcc 	andi	r2,r3,255
 2009f08:	1000021e 	bne	r2,zero,2009f14 <__lo0bits+0x50>
 2009f0c:	1806d23a 	srli	r3,r3,8
 2009f10:	29400204 	addi	r5,r5,8
 2009f14:	188003cc 	andi	r2,r3,15
 2009f18:	1000021e 	bne	r2,zero,2009f24 <__lo0bits+0x60>
 2009f1c:	1806d13a 	srli	r3,r3,4
 2009f20:	29400104 	addi	r5,r5,4
 2009f24:	188000cc 	andi	r2,r3,3
 2009f28:	1000021e 	bne	r2,zero,2009f34 <__lo0bits+0x70>
 2009f2c:	1806d0ba 	srli	r3,r3,2
 2009f30:	29400084 	addi	r5,r5,2
 2009f34:	1880004c 	andi	r2,r3,1
 2009f38:	1000031e 	bne	r2,zero,2009f48 <__lo0bits+0x84>
 2009f3c:	1806d07a 	srli	r3,r3,1
 2009f40:	18000a26 	beq	r3,zero,2009f6c <__lo0bits+0xa8>
 2009f44:	29400044 	addi	r5,r5,1
 2009f48:	2805883a 	mov	r2,r5
 2009f4c:	20c00015 	stw	r3,0(r4)
 2009f50:	f800283a 	ret
 2009f54:	1806d43a 	srli	r3,r3,16
 2009f58:	01400404 	movi	r5,16
 2009f5c:	003fe906 	br	2009f04 <__lo0bits+0x40>
 2009f60:	000b883a 	mov	r5,zero
 2009f64:	2805883a 	mov	r2,r5
 2009f68:	f800283a 	ret
 2009f6c:	01400804 	movi	r5,32
 2009f70:	2805883a 	mov	r2,r5
 2009f74:	f800283a 	ret
 2009f78:	1804d07a 	srli	r2,r3,1
 2009f7c:	01400044 	movi	r5,1
 2009f80:	20800015 	stw	r2,0(r4)
 2009f84:	003fda06 	br	2009ef0 <__lo0bits+0x2c>

02009f88 <__mcmp>:
 2009f88:	20800417 	ldw	r2,16(r4)
 2009f8c:	28c00417 	ldw	r3,16(r5)
 2009f90:	10cfc83a 	sub	r7,r2,r3
 2009f94:	38000c1e 	bne	r7,zero,2009fc8 <__mcmp+0x40>
 2009f98:	18c5883a 	add	r2,r3,r3
 2009f9c:	1085883a 	add	r2,r2,r2
 2009fa0:	10c00504 	addi	r3,r2,20
 2009fa4:	21000504 	addi	r4,r4,20
 2009fa8:	28cb883a 	add	r5,r5,r3
 2009fac:	2085883a 	add	r2,r4,r2
 2009fb0:	10bfff04 	addi	r2,r2,-4
 2009fb4:	297fff04 	addi	r5,r5,-4
 2009fb8:	11800017 	ldw	r6,0(r2)
 2009fbc:	28c00017 	ldw	r3,0(r5)
 2009fc0:	30c0031e 	bne	r6,r3,2009fd0 <__mcmp+0x48>
 2009fc4:	20bffa36 	bltu	r4,r2,2009fb0 <__mcmp+0x28>
 2009fc8:	3805883a 	mov	r2,r7
 2009fcc:	f800283a 	ret
 2009fd0:	30c00336 	bltu	r6,r3,2009fe0 <__mcmp+0x58>
 2009fd4:	01c00044 	movi	r7,1
 2009fd8:	3805883a 	mov	r2,r7
 2009fdc:	f800283a 	ret
 2009fe0:	01ffffc4 	movi	r7,-1
 2009fe4:	003ff806 	br	2009fc8 <__mcmp+0x40>

02009fe8 <__ulp>:
 2009fe8:	295ffc2c 	andhi	r5,r5,32752
 2009fec:	013f3034 	movhi	r4,64704
 2009ff0:	290b883a 	add	r5,r5,r4
 2009ff4:	0145c83a 	sub	r2,zero,r5
 2009ff8:	1007d53a 	srai	r3,r2,20
 2009ffc:	000d883a 	mov	r6,zero
 200a000:	0140040e 	bge	zero,r5,200a014 <__ulp+0x2c>
 200a004:	280f883a 	mov	r7,r5
 200a008:	3807883a 	mov	r3,r7
 200a00c:	3005883a 	mov	r2,r6
 200a010:	f800283a 	ret
 200a014:	008004c4 	movi	r2,19
 200a018:	193ffb04 	addi	r4,r3,-20
 200a01c:	10c00c0e 	bge	r2,r3,200a050 <__ulp+0x68>
 200a020:	008007c4 	movi	r2,31
 200a024:	1107c83a 	sub	r3,r2,r4
 200a028:	00800784 	movi	r2,30
 200a02c:	01400044 	movi	r5,1
 200a030:	11000216 	blt	r2,r4,200a03c <__ulp+0x54>
 200a034:	00800044 	movi	r2,1
 200a038:	10ca983a 	sll	r5,r2,r3
 200a03c:	000f883a 	mov	r7,zero
 200a040:	280d883a 	mov	r6,r5
 200a044:	3807883a 	mov	r3,r7
 200a048:	3005883a 	mov	r2,r6
 200a04c:	f800283a 	ret
 200a050:	00800234 	movhi	r2,8
 200a054:	10cfd83a 	sra	r7,r2,r3
 200a058:	000d883a 	mov	r6,zero
 200a05c:	3005883a 	mov	r2,r6
 200a060:	3807883a 	mov	r3,r7
 200a064:	f800283a 	ret

0200a068 <__b2d>:
 200a068:	20800417 	ldw	r2,16(r4)
 200a06c:	defff904 	addi	sp,sp,-28
 200a070:	dd000415 	stw	r20,16(sp)
 200a074:	1085883a 	add	r2,r2,r2
 200a078:	25000504 	addi	r20,r4,20
 200a07c:	1085883a 	add	r2,r2,r2
 200a080:	dc000015 	stw	r16,0(sp)
 200a084:	a0a1883a 	add	r16,r20,r2
 200a088:	dd400515 	stw	r21,20(sp)
 200a08c:	857fff17 	ldw	r21,-4(r16)
 200a090:	dc400115 	stw	r17,4(sp)
 200a094:	dfc00615 	stw	ra,24(sp)
 200a098:	a809883a 	mov	r4,r21
 200a09c:	2823883a 	mov	r17,r5
 200a0a0:	dcc00315 	stw	r19,12(sp)
 200a0a4:	dc800215 	stw	r18,8(sp)
 200a0a8:	2009e540 	call	2009e54 <__hi0bits>
 200a0ac:	100b883a 	mov	r5,r2
 200a0b0:	00800804 	movi	r2,32
 200a0b4:	1145c83a 	sub	r2,r2,r5
 200a0b8:	88800015 	stw	r2,0(r17)
 200a0bc:	00800284 	movi	r2,10
 200a0c0:	80ffff04 	addi	r3,r16,-4
 200a0c4:	11401416 	blt	r2,r5,200a118 <__b2d+0xb0>
 200a0c8:	008002c4 	movi	r2,11
 200a0cc:	1149c83a 	sub	r4,r2,r5
 200a0d0:	a0c02736 	bltu	r20,r3,200a170 <__b2d+0x108>
 200a0d4:	000d883a 	mov	r6,zero
 200a0d8:	28800544 	addi	r2,r5,21
 200a0dc:	a906d83a 	srl	r3,r21,r4
 200a0e0:	a884983a 	sll	r2,r21,r2
 200a0e4:	1ccffc34 	orhi	r19,r3,16368
 200a0e8:	11a4b03a 	or	r18,r2,r6
 200a0ec:	9005883a 	mov	r2,r18
 200a0f0:	9807883a 	mov	r3,r19
 200a0f4:	dfc00617 	ldw	ra,24(sp)
 200a0f8:	dd400517 	ldw	r21,20(sp)
 200a0fc:	dd000417 	ldw	r20,16(sp)
 200a100:	dcc00317 	ldw	r19,12(sp)
 200a104:	dc800217 	ldw	r18,8(sp)
 200a108:	dc400117 	ldw	r17,4(sp)
 200a10c:	dc000017 	ldw	r16,0(sp)
 200a110:	dec00704 	addi	sp,sp,28
 200a114:	f800283a 	ret
 200a118:	a0c00e36 	bltu	r20,r3,200a154 <__b2d+0xec>
 200a11c:	293ffd44 	addi	r4,r5,-11
 200a120:	000d883a 	mov	r6,zero
 200a124:	20000f26 	beq	r4,zero,200a164 <__b2d+0xfc>
 200a128:	00800804 	movi	r2,32
 200a12c:	110bc83a 	sub	r5,r2,r4
 200a130:	a0c01236 	bltu	r20,r3,200a17c <__b2d+0x114>
 200a134:	000f883a 	mov	r7,zero
 200a138:	a904983a 	sll	r2,r21,r4
 200a13c:	3146d83a 	srl	r3,r6,r5
 200a140:	3108983a 	sll	r4,r6,r4
 200a144:	108ffc34 	orhi	r2,r2,16368
 200a148:	18a6b03a 	or	r19,r3,r2
 200a14c:	3924b03a 	or	r18,r7,r4
 200a150:	003fe606 	br	200a0ec <__b2d+0x84>
 200a154:	293ffd44 	addi	r4,r5,-11
 200a158:	81bffe17 	ldw	r6,-8(r16)
 200a15c:	80fffe04 	addi	r3,r16,-8
 200a160:	203ff11e 	bne	r4,zero,200a128 <__b2d+0xc0>
 200a164:	accffc34 	orhi	r19,r21,16368
 200a168:	3025883a 	mov	r18,r6
 200a16c:	003fdf06 	br	200a0ec <__b2d+0x84>
 200a170:	18bfff17 	ldw	r2,-4(r3)
 200a174:	110cd83a 	srl	r6,r2,r4
 200a178:	003fd706 	br	200a0d8 <__b2d+0x70>
 200a17c:	18bfff17 	ldw	r2,-4(r3)
 200a180:	114ed83a 	srl	r7,r2,r5
 200a184:	003fec06 	br	200a138 <__b2d+0xd0>

0200a188 <__ratio>:
 200a188:	defff904 	addi	sp,sp,-28
 200a18c:	dc400215 	stw	r17,8(sp)
 200a190:	2823883a 	mov	r17,r5
 200a194:	d80b883a 	mov	r5,sp
 200a198:	dfc00615 	stw	ra,24(sp)
 200a19c:	dd000515 	stw	r20,20(sp)
 200a1a0:	dcc00415 	stw	r19,16(sp)
 200a1a4:	dc800315 	stw	r18,12(sp)
 200a1a8:	2025883a 	mov	r18,r4
 200a1ac:	200a0680 	call	200a068 <__b2d>
 200a1b0:	8809883a 	mov	r4,r17
 200a1b4:	d9400104 	addi	r5,sp,4
 200a1b8:	1027883a 	mov	r19,r2
 200a1bc:	1829883a 	mov	r20,r3
 200a1c0:	200a0680 	call	200a068 <__b2d>
 200a1c4:	89000417 	ldw	r4,16(r17)
 200a1c8:	91c00417 	ldw	r7,16(r18)
 200a1cc:	d9800117 	ldw	r6,4(sp)
 200a1d0:	180b883a 	mov	r5,r3
 200a1d4:	390fc83a 	sub	r7,r7,r4
 200a1d8:	1009883a 	mov	r4,r2
 200a1dc:	d8800017 	ldw	r2,0(sp)
 200a1e0:	380e917a 	slli	r7,r7,5
 200a1e4:	2011883a 	mov	r8,r4
 200a1e8:	1185c83a 	sub	r2,r2,r6
 200a1ec:	11c5883a 	add	r2,r2,r7
 200a1f0:	1006953a 	slli	r3,r2,20
 200a1f4:	2813883a 	mov	r9,r5
 200a1f8:	00800d0e 	bge	zero,r2,200a230 <__ratio+0xa8>
 200a1fc:	1d29883a 	add	r20,r3,r20
 200a200:	a00b883a 	mov	r5,r20
 200a204:	480f883a 	mov	r7,r9
 200a208:	9809883a 	mov	r4,r19
 200a20c:	400d883a 	mov	r6,r8
 200a210:	200cc100 	call	200cc10 <__divdf3>
 200a214:	dfc00617 	ldw	ra,24(sp)
 200a218:	dd000517 	ldw	r20,20(sp)
 200a21c:	dcc00417 	ldw	r19,16(sp)
 200a220:	dc800317 	ldw	r18,12(sp)
 200a224:	dc400217 	ldw	r17,8(sp)
 200a228:	dec00704 	addi	sp,sp,28
 200a22c:	f800283a 	ret
 200a230:	28d3c83a 	sub	r9,r5,r3
 200a234:	003ff206 	br	200a200 <__ratio+0x78>

0200a238 <_mprec_log10>:
 200a238:	defffe04 	addi	sp,sp,-8
 200a23c:	008005c4 	movi	r2,23
 200a240:	dc000015 	stw	r16,0(sp)
 200a244:	dfc00115 	stw	ra,4(sp)
 200a248:	2021883a 	mov	r16,r4
 200a24c:	11000c16 	blt	r2,r4,200a280 <_mprec_log10+0x48>
 200a250:	200490fa 	slli	r2,r4,3
 200a254:	00c08074 	movhi	r3,513
 200a258:	18c54e04 	addi	r3,r3,5432
 200a25c:	10c5883a 	add	r2,r2,r3
 200a260:	12400117 	ldw	r9,4(r2)
 200a264:	12000017 	ldw	r8,0(r2)
 200a268:	4807883a 	mov	r3,r9
 200a26c:	4005883a 	mov	r2,r8
 200a270:	dfc00117 	ldw	ra,4(sp)
 200a274:	dc000017 	ldw	r16,0(sp)
 200a278:	dec00204 	addi	sp,sp,8
 200a27c:	f800283a 	ret
 200a280:	0011883a 	mov	r8,zero
 200a284:	024ffc34 	movhi	r9,16368
 200a288:	0005883a 	mov	r2,zero
 200a28c:	00d00934 	movhi	r3,16420
 200a290:	480b883a 	mov	r5,r9
 200a294:	4009883a 	mov	r4,r8
 200a298:	180f883a 	mov	r7,r3
 200a29c:	100d883a 	mov	r6,r2
 200a2a0:	200c84c0 	call	200c84c <__muldf3>
 200a2a4:	843fffc4 	addi	r16,r16,-1
 200a2a8:	1011883a 	mov	r8,r2
 200a2ac:	1813883a 	mov	r9,r3
 200a2b0:	803ff51e 	bne	r16,zero,200a288 <_mprec_log10+0x50>
 200a2b4:	4005883a 	mov	r2,r8
 200a2b8:	4807883a 	mov	r3,r9
 200a2bc:	dfc00117 	ldw	ra,4(sp)
 200a2c0:	dc000017 	ldw	r16,0(sp)
 200a2c4:	dec00204 	addi	sp,sp,8
 200a2c8:	f800283a 	ret

0200a2cc <__copybits>:
 200a2cc:	297fffc4 	addi	r5,r5,-1
 200a2d0:	30800417 	ldw	r2,16(r6)
 200a2d4:	280bd17a 	srai	r5,r5,5
 200a2d8:	31800504 	addi	r6,r6,20
 200a2dc:	1085883a 	add	r2,r2,r2
 200a2e0:	294b883a 	add	r5,r5,r5
 200a2e4:	294b883a 	add	r5,r5,r5
 200a2e8:	1085883a 	add	r2,r2,r2
 200a2ec:	290b883a 	add	r5,r5,r4
 200a2f0:	3087883a 	add	r3,r6,r2
 200a2f4:	29400104 	addi	r5,r5,4
 200a2f8:	30c0052e 	bgeu	r6,r3,200a310 <__copybits+0x44>
 200a2fc:	30800017 	ldw	r2,0(r6)
 200a300:	31800104 	addi	r6,r6,4
 200a304:	20800015 	stw	r2,0(r4)
 200a308:	21000104 	addi	r4,r4,4
 200a30c:	30fffb36 	bltu	r6,r3,200a2fc <__copybits+0x30>
 200a310:	2140032e 	bgeu	r4,r5,200a320 <__copybits+0x54>
 200a314:	20000015 	stw	zero,0(r4)
 200a318:	21000104 	addi	r4,r4,4
 200a31c:	217ffd36 	bltu	r4,r5,200a314 <__copybits+0x48>
 200a320:	f800283a 	ret

0200a324 <__any_on>:
 200a324:	20800417 	ldw	r2,16(r4)
 200a328:	2807d17a 	srai	r3,r5,5
 200a32c:	21000504 	addi	r4,r4,20
 200a330:	10c00d0e 	bge	r2,r3,200a368 <__any_on+0x44>
 200a334:	1085883a 	add	r2,r2,r2
 200a338:	1085883a 	add	r2,r2,r2
 200a33c:	208d883a 	add	r6,r4,r2
 200a340:	2180182e 	bgeu	r4,r6,200a3a4 <__any_on+0x80>
 200a344:	30bfff17 	ldw	r2,-4(r6)
 200a348:	30ffff04 	addi	r3,r6,-4
 200a34c:	1000041e 	bne	r2,zero,200a360 <__any_on+0x3c>
 200a350:	20c0142e 	bgeu	r4,r3,200a3a4 <__any_on+0x80>
 200a354:	18ffff04 	addi	r3,r3,-4
 200a358:	18800017 	ldw	r2,0(r3)
 200a35c:	103ffc26 	beq	r2,zero,200a350 <__any_on+0x2c>
 200a360:	00800044 	movi	r2,1
 200a364:	f800283a 	ret
 200a368:	18800a0e 	bge	r3,r2,200a394 <__any_on+0x70>
 200a36c:	294007cc 	andi	r5,r5,31
 200a370:	28000826 	beq	r5,zero,200a394 <__any_on+0x70>
 200a374:	18c5883a 	add	r2,r3,r3
 200a378:	1085883a 	add	r2,r2,r2
 200a37c:	208d883a 	add	r6,r4,r2
 200a380:	30c00017 	ldw	r3,0(r6)
 200a384:	1944d83a 	srl	r2,r3,r5
 200a388:	1144983a 	sll	r2,r2,r5
 200a38c:	18bff41e 	bne	r3,r2,200a360 <__any_on+0x3c>
 200a390:	003feb06 	br	200a340 <__any_on+0x1c>
 200a394:	18c5883a 	add	r2,r3,r3
 200a398:	1085883a 	add	r2,r2,r2
 200a39c:	208d883a 	add	r6,r4,r2
 200a3a0:	003fe706 	br	200a340 <__any_on+0x1c>
 200a3a4:	0005883a 	mov	r2,zero
 200a3a8:	f800283a 	ret

0200a3ac <_Balloc>:
 200a3ac:	20c01317 	ldw	r3,76(r4)
 200a3b0:	defffb04 	addi	sp,sp,-20
 200a3b4:	dcc00315 	stw	r19,12(sp)
 200a3b8:	dc800215 	stw	r18,8(sp)
 200a3bc:	dfc00415 	stw	ra,16(sp)
 200a3c0:	2825883a 	mov	r18,r5
 200a3c4:	dc400115 	stw	r17,4(sp)
 200a3c8:	dc000015 	stw	r16,0(sp)
 200a3cc:	2027883a 	mov	r19,r4
 200a3d0:	01800404 	movi	r6,16
 200a3d4:	01400104 	movi	r5,4
 200a3d8:	18001726 	beq	r3,zero,200a438 <_Balloc+0x8c>
 200a3dc:	01400044 	movi	r5,1
 200a3e0:	9485883a 	add	r2,r18,r18
 200a3e4:	2ca2983a 	sll	r17,r5,r18
 200a3e8:	1085883a 	add	r2,r2,r2
 200a3ec:	10c7883a 	add	r3,r2,r3
 200a3f0:	1c000017 	ldw	r16,0(r3)
 200a3f4:	8c4d883a 	add	r6,r17,r17
 200a3f8:	318d883a 	add	r6,r6,r6
 200a3fc:	9809883a 	mov	r4,r19
 200a400:	31800504 	addi	r6,r6,20
 200a404:	80001226 	beq	r16,zero,200a450 <_Balloc+0xa4>
 200a408:	80800017 	ldw	r2,0(r16)
 200a40c:	18800015 	stw	r2,0(r3)
 200a410:	80000415 	stw	zero,16(r16)
 200a414:	80000315 	stw	zero,12(r16)
 200a418:	8005883a 	mov	r2,r16
 200a41c:	dfc00417 	ldw	ra,16(sp)
 200a420:	dcc00317 	ldw	r19,12(sp)
 200a424:	dc800217 	ldw	r18,8(sp)
 200a428:	dc400117 	ldw	r17,4(sp)
 200a42c:	dc000017 	ldw	r16,0(sp)
 200a430:	dec00504 	addi	sp,sp,20
 200a434:	f800283a 	ret
 200a438:	200b7500 	call	200b750 <_calloc_r>
 200a43c:	1007883a 	mov	r3,r2
 200a440:	0021883a 	mov	r16,zero
 200a444:	98801315 	stw	r2,76(r19)
 200a448:	103fe41e 	bne	r2,zero,200a3dc <_Balloc+0x30>
 200a44c:	003ff206 	br	200a418 <_Balloc+0x6c>
 200a450:	200b7500 	call	200b750 <_calloc_r>
 200a454:	103ff026 	beq	r2,zero,200a418 <_Balloc+0x6c>
 200a458:	1021883a 	mov	r16,r2
 200a45c:	14800115 	stw	r18,4(r2)
 200a460:	14400215 	stw	r17,8(r2)
 200a464:	003fea06 	br	200a410 <_Balloc+0x64>

0200a468 <__d2b>:
 200a468:	defff504 	addi	sp,sp,-44
 200a46c:	dcc00515 	stw	r19,20(sp)
 200a470:	04c00044 	movi	r19,1
 200a474:	dc000215 	stw	r16,8(sp)
 200a478:	2821883a 	mov	r16,r5
 200a47c:	980b883a 	mov	r5,r19
 200a480:	ddc00915 	stw	r23,36(sp)
 200a484:	dd800815 	stw	r22,32(sp)
 200a488:	dd400715 	stw	r21,28(sp)
 200a48c:	dd000615 	stw	r20,24(sp)
 200a490:	dc800415 	stw	r18,16(sp)
 200a494:	dc400315 	stw	r17,12(sp)
 200a498:	dfc00a15 	stw	ra,40(sp)
 200a49c:	3023883a 	mov	r17,r6
 200a4a0:	382d883a 	mov	r22,r7
 200a4a4:	ddc00b17 	ldw	r23,44(sp)
 200a4a8:	200a3ac0 	call	200a3ac <_Balloc>
 200a4ac:	1025883a 	mov	r18,r2
 200a4b0:	00a00034 	movhi	r2,32768
 200a4b4:	10bfffc4 	addi	r2,r2,-1
 200a4b8:	8888703a 	and	r4,r17,r2
 200a4bc:	202ad53a 	srli	r21,r4,20
 200a4c0:	00800434 	movhi	r2,16
 200a4c4:	10bfffc4 	addi	r2,r2,-1
 200a4c8:	8886703a 	and	r3,r17,r2
 200a4cc:	a829003a 	cmpeq	r20,r21,zero
 200a4d0:	800b883a 	mov	r5,r16
 200a4d4:	d8c00115 	stw	r3,4(sp)
 200a4d8:	94000504 	addi	r16,r18,20
 200a4dc:	a000021e 	bne	r20,zero,200a4e8 <__d2b+0x80>
 200a4e0:	18c00434 	orhi	r3,r3,16
 200a4e4:	d8c00115 	stw	r3,4(sp)
 200a4e8:	28002726 	beq	r5,zero,200a588 <__d2b+0x120>
 200a4ec:	d809883a 	mov	r4,sp
 200a4f0:	d9400015 	stw	r5,0(sp)
 200a4f4:	2009ec40 	call	2009ec4 <__lo0bits>
 200a4f8:	100d883a 	mov	r6,r2
 200a4fc:	10003526 	beq	r2,zero,200a5d4 <__d2b+0x16c>
 200a500:	d8c00117 	ldw	r3,4(sp)
 200a504:	00800804 	movi	r2,32
 200a508:	1185c83a 	sub	r2,r2,r6
 200a50c:	d9000017 	ldw	r4,0(sp)
 200a510:	1886983a 	sll	r3,r3,r2
 200a514:	1906b03a 	or	r3,r3,r4
 200a518:	90c00515 	stw	r3,20(r18)
 200a51c:	d8c00117 	ldw	r3,4(sp)
 200a520:	1986d83a 	srl	r3,r3,r6
 200a524:	d8c00115 	stw	r3,4(sp)
 200a528:	180b003a 	cmpeq	r5,r3,zero
 200a52c:	00800084 	movi	r2,2
 200a530:	114bc83a 	sub	r5,r2,r5
 200a534:	80c00115 	stw	r3,4(r16)
 200a538:	91400415 	stw	r5,16(r18)
 200a53c:	a0001a1e 	bne	r20,zero,200a5a8 <__d2b+0x140>
 200a540:	3545883a 	add	r2,r6,r21
 200a544:	10bef344 	addi	r2,r2,-1075
 200a548:	00c00d44 	movi	r3,53
 200a54c:	b0800015 	stw	r2,0(r22)
 200a550:	1987c83a 	sub	r3,r3,r6
 200a554:	b8c00015 	stw	r3,0(r23)
 200a558:	9005883a 	mov	r2,r18
 200a55c:	dfc00a17 	ldw	ra,40(sp)
 200a560:	ddc00917 	ldw	r23,36(sp)
 200a564:	dd800817 	ldw	r22,32(sp)
 200a568:	dd400717 	ldw	r21,28(sp)
 200a56c:	dd000617 	ldw	r20,24(sp)
 200a570:	dcc00517 	ldw	r19,20(sp)
 200a574:	dc800417 	ldw	r18,16(sp)
 200a578:	dc400317 	ldw	r17,12(sp)
 200a57c:	dc000217 	ldw	r16,8(sp)
 200a580:	dec00b04 	addi	sp,sp,44
 200a584:	f800283a 	ret
 200a588:	d9000104 	addi	r4,sp,4
 200a58c:	2009ec40 	call	2009ec4 <__lo0bits>
 200a590:	11800804 	addi	r6,r2,32
 200a594:	d8800117 	ldw	r2,4(sp)
 200a598:	94c00415 	stw	r19,16(r18)
 200a59c:	980b883a 	mov	r5,r19
 200a5a0:	90800515 	stw	r2,20(r18)
 200a5a4:	a03fe626 	beq	r20,zero,200a540 <__d2b+0xd8>
 200a5a8:	2945883a 	add	r2,r5,r5
 200a5ac:	1085883a 	add	r2,r2,r2
 200a5b0:	1405883a 	add	r2,r2,r16
 200a5b4:	113fff17 	ldw	r4,-4(r2)
 200a5b8:	30fef384 	addi	r3,r6,-1074
 200a5bc:	2820917a 	slli	r16,r5,5
 200a5c0:	b0c00015 	stw	r3,0(r22)
 200a5c4:	2009e540 	call	2009e54 <__hi0bits>
 200a5c8:	80a1c83a 	sub	r16,r16,r2
 200a5cc:	bc000015 	stw	r16,0(r23)
 200a5d0:	003fe106 	br	200a558 <__d2b+0xf0>
 200a5d4:	d8800017 	ldw	r2,0(sp)
 200a5d8:	90800515 	stw	r2,20(r18)
 200a5dc:	d8c00117 	ldw	r3,4(sp)
 200a5e0:	003fd106 	br	200a528 <__d2b+0xc0>

0200a5e4 <__mdiff>:
 200a5e4:	defffb04 	addi	sp,sp,-20
 200a5e8:	dc000015 	stw	r16,0(sp)
 200a5ec:	2821883a 	mov	r16,r5
 200a5f0:	dc800215 	stw	r18,8(sp)
 200a5f4:	300b883a 	mov	r5,r6
 200a5f8:	2025883a 	mov	r18,r4
 200a5fc:	8009883a 	mov	r4,r16
 200a600:	dc400115 	stw	r17,4(sp)
 200a604:	dfc00415 	stw	ra,16(sp)
 200a608:	dcc00315 	stw	r19,12(sp)
 200a60c:	3023883a 	mov	r17,r6
 200a610:	2009f880 	call	2009f88 <__mcmp>
 200a614:	10004226 	beq	r2,zero,200a720 <__mdiff+0x13c>
 200a618:	10005016 	blt	r2,zero,200a75c <__mdiff+0x178>
 200a61c:	0027883a 	mov	r19,zero
 200a620:	81400117 	ldw	r5,4(r16)
 200a624:	9009883a 	mov	r4,r18
 200a628:	200a3ac0 	call	200a3ac <_Balloc>
 200a62c:	1019883a 	mov	r12,r2
 200a630:	82800417 	ldw	r10,16(r16)
 200a634:	88800417 	ldw	r2,16(r17)
 200a638:	81800504 	addi	r6,r16,20
 200a63c:	5287883a 	add	r3,r10,r10
 200a640:	1085883a 	add	r2,r2,r2
 200a644:	18c7883a 	add	r3,r3,r3
 200a648:	1085883a 	add	r2,r2,r2
 200a64c:	8a000504 	addi	r8,r17,20
 200a650:	64c00315 	stw	r19,12(r12)
 200a654:	30db883a 	add	r13,r6,r3
 200a658:	4097883a 	add	r11,r8,r2
 200a65c:	61c00504 	addi	r7,r12,20
 200a660:	0013883a 	mov	r9,zero
 200a664:	31000017 	ldw	r4,0(r6)
 200a668:	41400017 	ldw	r5,0(r8)
 200a66c:	42000104 	addi	r8,r8,4
 200a670:	20bfffcc 	andi	r2,r4,65535
 200a674:	28ffffcc 	andi	r3,r5,65535
 200a678:	10c5c83a 	sub	r2,r2,r3
 200a67c:	1245883a 	add	r2,r2,r9
 200a680:	2008d43a 	srli	r4,r4,16
 200a684:	280ad43a 	srli	r5,r5,16
 200a688:	1007d43a 	srai	r3,r2,16
 200a68c:	3880000d 	sth	r2,0(r7)
 200a690:	2149c83a 	sub	r4,r4,r5
 200a694:	20c9883a 	add	r4,r4,r3
 200a698:	3900008d 	sth	r4,2(r7)
 200a69c:	31800104 	addi	r6,r6,4
 200a6a0:	39c00104 	addi	r7,r7,4
 200a6a4:	2013d43a 	srai	r9,r4,16
 200a6a8:	42ffee36 	bltu	r8,r11,200a664 <__mdiff+0x80>
 200a6ac:	33400c2e 	bgeu	r6,r13,200a6e0 <__mdiff+0xfc>
 200a6b0:	30800017 	ldw	r2,0(r6)
 200a6b4:	31800104 	addi	r6,r6,4
 200a6b8:	10ffffcc 	andi	r3,r2,65535
 200a6bc:	1a47883a 	add	r3,r3,r9
 200a6c0:	1004d43a 	srli	r2,r2,16
 200a6c4:	1809d43a 	srai	r4,r3,16
 200a6c8:	38c0000d 	sth	r3,0(r7)
 200a6cc:	1105883a 	add	r2,r2,r4
 200a6d0:	3880008d 	sth	r2,2(r7)
 200a6d4:	1013d43a 	srai	r9,r2,16
 200a6d8:	39c00104 	addi	r7,r7,4
 200a6dc:	337ff436 	bltu	r6,r13,200a6b0 <__mdiff+0xcc>
 200a6e0:	38bfff17 	ldw	r2,-4(r7)
 200a6e4:	38ffff04 	addi	r3,r7,-4
 200a6e8:	1000041e 	bne	r2,zero,200a6fc <__mdiff+0x118>
 200a6ec:	18ffff04 	addi	r3,r3,-4
 200a6f0:	18800017 	ldw	r2,0(r3)
 200a6f4:	52bfffc4 	addi	r10,r10,-1
 200a6f8:	103ffc26 	beq	r2,zero,200a6ec <__mdiff+0x108>
 200a6fc:	6005883a 	mov	r2,r12
 200a700:	62800415 	stw	r10,16(r12)
 200a704:	dfc00417 	ldw	ra,16(sp)
 200a708:	dcc00317 	ldw	r19,12(sp)
 200a70c:	dc800217 	ldw	r18,8(sp)
 200a710:	dc400117 	ldw	r17,4(sp)
 200a714:	dc000017 	ldw	r16,0(sp)
 200a718:	dec00504 	addi	sp,sp,20
 200a71c:	f800283a 	ret
 200a720:	9009883a 	mov	r4,r18
 200a724:	000b883a 	mov	r5,zero
 200a728:	200a3ac0 	call	200a3ac <_Balloc>
 200a72c:	1019883a 	mov	r12,r2
 200a730:	00800044 	movi	r2,1
 200a734:	60800415 	stw	r2,16(r12)
 200a738:	6005883a 	mov	r2,r12
 200a73c:	60000515 	stw	zero,20(r12)
 200a740:	dfc00417 	ldw	ra,16(sp)
 200a744:	dcc00317 	ldw	r19,12(sp)
 200a748:	dc800217 	ldw	r18,8(sp)
 200a74c:	dc400117 	ldw	r17,4(sp)
 200a750:	dc000017 	ldw	r16,0(sp)
 200a754:	dec00504 	addi	sp,sp,20
 200a758:	f800283a 	ret
 200a75c:	880d883a 	mov	r6,r17
 200a760:	04c00044 	movi	r19,1
 200a764:	8023883a 	mov	r17,r16
 200a768:	3021883a 	mov	r16,r6
 200a76c:	003fac06 	br	200a620 <__mdiff+0x3c>

0200a770 <__lshift>:
 200a770:	defff904 	addi	sp,sp,-28
 200a774:	28800417 	ldw	r2,16(r5)
 200a778:	dc000015 	stw	r16,0(sp)
 200a77c:	3021d17a 	srai	r16,r6,5
 200a780:	28c00217 	ldw	r3,8(r5)
 200a784:	10800044 	addi	r2,r2,1
 200a788:	dc400115 	stw	r17,4(sp)
 200a78c:	80a3883a 	add	r17,r16,r2
 200a790:	dd400515 	stw	r21,20(sp)
 200a794:	dd000415 	stw	r20,16(sp)
 200a798:	dc800215 	stw	r18,8(sp)
 200a79c:	dfc00615 	stw	ra,24(sp)
 200a7a0:	2825883a 	mov	r18,r5
 200a7a4:	dcc00315 	stw	r19,12(sp)
 200a7a8:	3029883a 	mov	r20,r6
 200a7ac:	202b883a 	mov	r21,r4
 200a7b0:	29400117 	ldw	r5,4(r5)
 200a7b4:	1c40030e 	bge	r3,r17,200a7c4 <__lshift+0x54>
 200a7b8:	18c7883a 	add	r3,r3,r3
 200a7bc:	29400044 	addi	r5,r5,1
 200a7c0:	1c7ffd16 	blt	r3,r17,200a7b8 <__lshift+0x48>
 200a7c4:	a809883a 	mov	r4,r21
 200a7c8:	200a3ac0 	call	200a3ac <_Balloc>
 200a7cc:	1027883a 	mov	r19,r2
 200a7d0:	11400504 	addi	r5,r2,20
 200a7d4:	0400090e 	bge	zero,r16,200a7fc <__lshift+0x8c>
 200a7d8:	2805883a 	mov	r2,r5
 200a7dc:	0007883a 	mov	r3,zero
 200a7e0:	18c00044 	addi	r3,r3,1
 200a7e4:	10000015 	stw	zero,0(r2)
 200a7e8:	10800104 	addi	r2,r2,4
 200a7ec:	80fffc1e 	bne	r16,r3,200a7e0 <__lshift+0x70>
 200a7f0:	8405883a 	add	r2,r16,r16
 200a7f4:	1085883a 	add	r2,r2,r2
 200a7f8:	288b883a 	add	r5,r5,r2
 200a7fc:	90800417 	ldw	r2,16(r18)
 200a800:	91000504 	addi	r4,r18,20
 200a804:	a18007cc 	andi	r6,r20,31
 200a808:	1085883a 	add	r2,r2,r2
 200a80c:	1085883a 	add	r2,r2,r2
 200a810:	208f883a 	add	r7,r4,r2
 200a814:	30001e26 	beq	r6,zero,200a890 <__lshift+0x120>
 200a818:	00800804 	movi	r2,32
 200a81c:	1191c83a 	sub	r8,r2,r6
 200a820:	0007883a 	mov	r3,zero
 200a824:	20800017 	ldw	r2,0(r4)
 200a828:	1184983a 	sll	r2,r2,r6
 200a82c:	1884b03a 	or	r2,r3,r2
 200a830:	28800015 	stw	r2,0(r5)
 200a834:	20c00017 	ldw	r3,0(r4)
 200a838:	21000104 	addi	r4,r4,4
 200a83c:	29400104 	addi	r5,r5,4
 200a840:	1a06d83a 	srl	r3,r3,r8
 200a844:	21fff736 	bltu	r4,r7,200a824 <__lshift+0xb4>
 200a848:	28c00015 	stw	r3,0(r5)
 200a84c:	18000126 	beq	r3,zero,200a854 <__lshift+0xe4>
 200a850:	8c400044 	addi	r17,r17,1
 200a854:	88bfffc4 	addi	r2,r17,-1
 200a858:	98800415 	stw	r2,16(r19)
 200a85c:	a809883a 	mov	r4,r21
 200a860:	900b883a 	mov	r5,r18
 200a864:	2009e2c0 	call	2009e2c <_Bfree>
 200a868:	9805883a 	mov	r2,r19
 200a86c:	dfc00617 	ldw	ra,24(sp)
 200a870:	dd400517 	ldw	r21,20(sp)
 200a874:	dd000417 	ldw	r20,16(sp)
 200a878:	dcc00317 	ldw	r19,12(sp)
 200a87c:	dc800217 	ldw	r18,8(sp)
 200a880:	dc400117 	ldw	r17,4(sp)
 200a884:	dc000017 	ldw	r16,0(sp)
 200a888:	dec00704 	addi	sp,sp,28
 200a88c:	f800283a 	ret
 200a890:	20800017 	ldw	r2,0(r4)
 200a894:	21000104 	addi	r4,r4,4
 200a898:	28800015 	stw	r2,0(r5)
 200a89c:	29400104 	addi	r5,r5,4
 200a8a0:	21ffec2e 	bgeu	r4,r7,200a854 <__lshift+0xe4>
 200a8a4:	20800017 	ldw	r2,0(r4)
 200a8a8:	21000104 	addi	r4,r4,4
 200a8ac:	28800015 	stw	r2,0(r5)
 200a8b0:	29400104 	addi	r5,r5,4
 200a8b4:	21fff636 	bltu	r4,r7,200a890 <__lshift+0x120>
 200a8b8:	003fe606 	br	200a854 <__lshift+0xe4>

0200a8bc <__multiply>:
 200a8bc:	defff004 	addi	sp,sp,-64
 200a8c0:	dc800815 	stw	r18,32(sp)
 200a8c4:	dc400715 	stw	r17,28(sp)
 200a8c8:	2c800417 	ldw	r18,16(r5)
 200a8cc:	34400417 	ldw	r17,16(r6)
 200a8d0:	dcc00915 	stw	r19,36(sp)
 200a8d4:	dc000615 	stw	r16,24(sp)
 200a8d8:	dfc00f15 	stw	ra,60(sp)
 200a8dc:	df000e15 	stw	fp,56(sp)
 200a8e0:	ddc00d15 	stw	r23,52(sp)
 200a8e4:	dd800c15 	stw	r22,48(sp)
 200a8e8:	dd400b15 	stw	r21,44(sp)
 200a8ec:	dd000a15 	stw	r20,40(sp)
 200a8f0:	2821883a 	mov	r16,r5
 200a8f4:	3027883a 	mov	r19,r6
 200a8f8:	9440040e 	bge	r18,r17,200a90c <__multiply+0x50>
 200a8fc:	8825883a 	mov	r18,r17
 200a900:	2c400417 	ldw	r17,16(r5)
 200a904:	2827883a 	mov	r19,r5
 200a908:	3021883a 	mov	r16,r6
 200a90c:	80800217 	ldw	r2,8(r16)
 200a910:	9447883a 	add	r3,r18,r17
 200a914:	d8c00415 	stw	r3,16(sp)
 200a918:	81400117 	ldw	r5,4(r16)
 200a91c:	10c0010e 	bge	r2,r3,200a924 <__multiply+0x68>
 200a920:	29400044 	addi	r5,r5,1
 200a924:	200a3ac0 	call	200a3ac <_Balloc>
 200a928:	d8800515 	stw	r2,20(sp)
 200a92c:	d9000417 	ldw	r4,16(sp)
 200a930:	d8c00517 	ldw	r3,20(sp)
 200a934:	2105883a 	add	r2,r4,r4
 200a938:	1085883a 	add	r2,r2,r2
 200a93c:	19000504 	addi	r4,r3,20
 200a940:	2085883a 	add	r2,r4,r2
 200a944:	d8800315 	stw	r2,12(sp)
 200a948:	2080052e 	bgeu	r4,r2,200a960 <__multiply+0xa4>
 200a94c:	2005883a 	mov	r2,r4
 200a950:	d8c00317 	ldw	r3,12(sp)
 200a954:	10000015 	stw	zero,0(r2)
 200a958:	10800104 	addi	r2,r2,4
 200a95c:	10fffc36 	bltu	r2,r3,200a950 <__multiply+0x94>
 200a960:	8c45883a 	add	r2,r17,r17
 200a964:	9487883a 	add	r3,r18,r18
 200a968:	9dc00504 	addi	r23,r19,20
 200a96c:	1085883a 	add	r2,r2,r2
 200a970:	84000504 	addi	r16,r16,20
 200a974:	18c7883a 	add	r3,r3,r3
 200a978:	b885883a 	add	r2,r23,r2
 200a97c:	dc000015 	stw	r16,0(sp)
 200a980:	d8800215 	stw	r2,8(sp)
 200a984:	80f9883a 	add	fp,r16,r3
 200a988:	b880432e 	bgeu	r23,r2,200aa98 <__multiply+0x1dc>
 200a98c:	d9000115 	stw	r4,4(sp)
 200a990:	b9000017 	ldw	r4,0(r23)
 200a994:	253fffcc 	andi	r20,r4,65535
 200a998:	a0001a26 	beq	r20,zero,200aa04 <__multiply+0x148>
 200a99c:	dcc00017 	ldw	r19,0(sp)
 200a9a0:	dc800117 	ldw	r18,4(sp)
 200a9a4:	002b883a 	mov	r21,zero
 200a9a8:	9c400017 	ldw	r17,0(r19)
 200a9ac:	94000017 	ldw	r16,0(r18)
 200a9b0:	a009883a 	mov	r4,r20
 200a9b4:	897fffcc 	andi	r5,r17,65535
 200a9b8:	20040f00 	call	20040f0 <__mulsi3>
 200a9bc:	880ad43a 	srli	r5,r17,16
 200a9c0:	80ffffcc 	andi	r3,r16,65535
 200a9c4:	a8c7883a 	add	r3,r21,r3
 200a9c8:	a009883a 	mov	r4,r20
 200a9cc:	10e3883a 	add	r17,r2,r3
 200a9d0:	8020d43a 	srli	r16,r16,16
 200a9d4:	20040f00 	call	20040f0 <__mulsi3>
 200a9d8:	8806d43a 	srli	r3,r17,16
 200a9dc:	1405883a 	add	r2,r2,r16
 200a9e0:	9cc00104 	addi	r19,r19,4
 200a9e4:	1887883a 	add	r3,r3,r2
 200a9e8:	90c0008d 	sth	r3,2(r18)
 200a9ec:	9440000d 	sth	r17,0(r18)
 200a9f0:	182ad43a 	srli	r21,r3,16
 200a9f4:	94800104 	addi	r18,r18,4
 200a9f8:	9f3feb36 	bltu	r19,fp,200a9a8 <__multiply+0xec>
 200a9fc:	95400015 	stw	r21,0(r18)
 200aa00:	b9000017 	ldw	r4,0(r23)
 200aa04:	202ad43a 	srli	r21,r4,16
 200aa08:	a8001c26 	beq	r21,zero,200aa7c <__multiply+0x1c0>
 200aa0c:	d9000117 	ldw	r4,4(sp)
 200aa10:	dd000017 	ldw	r20,0(sp)
 200aa14:	002d883a 	mov	r22,zero
 200aa18:	24c00017 	ldw	r19,0(r4)
 200aa1c:	2025883a 	mov	r18,r4
 200aa20:	9823883a 	mov	r17,r19
 200aa24:	a4000017 	ldw	r16,0(r20)
 200aa28:	a809883a 	mov	r4,r21
 200aa2c:	a5000104 	addi	r20,r20,4
 200aa30:	817fffcc 	andi	r5,r16,65535
 200aa34:	20040f00 	call	20040f0 <__mulsi3>
 200aa38:	8806d43a 	srli	r3,r17,16
 200aa3c:	800ad43a 	srli	r5,r16,16
 200aa40:	94c0000d 	sth	r19,0(r18)
 200aa44:	b0c7883a 	add	r3,r22,r3
 200aa48:	10e1883a 	add	r16,r2,r3
 200aa4c:	9400008d 	sth	r16,2(r18)
 200aa50:	a809883a 	mov	r4,r21
 200aa54:	94800104 	addi	r18,r18,4
 200aa58:	20040f00 	call	20040f0 <__mulsi3>
 200aa5c:	94400017 	ldw	r17,0(r18)
 200aa60:	8020d43a 	srli	r16,r16,16
 200aa64:	88ffffcc 	andi	r3,r17,65535
 200aa68:	10c5883a 	add	r2,r2,r3
 200aa6c:	80a7883a 	add	r19,r16,r2
 200aa70:	982cd43a 	srli	r22,r19,16
 200aa74:	a73feb36 	bltu	r20,fp,200aa24 <__multiply+0x168>
 200aa78:	94c00015 	stw	r19,0(r18)
 200aa7c:	d8800217 	ldw	r2,8(sp)
 200aa80:	bdc00104 	addi	r23,r23,4
 200aa84:	b880042e 	bgeu	r23,r2,200aa98 <__multiply+0x1dc>
 200aa88:	d8c00117 	ldw	r3,4(sp)
 200aa8c:	18c00104 	addi	r3,r3,4
 200aa90:	d8c00115 	stw	r3,4(sp)
 200aa94:	003fbe06 	br	200a990 <__multiply+0xd4>
 200aa98:	d9000417 	ldw	r4,16(sp)
 200aa9c:	01000c0e 	bge	zero,r4,200aad0 <__multiply+0x214>
 200aaa0:	d8c00317 	ldw	r3,12(sp)
 200aaa4:	18bfff17 	ldw	r2,-4(r3)
 200aaa8:	18ffff04 	addi	r3,r3,-4
 200aaac:	10000326 	beq	r2,zero,200aabc <__multiply+0x200>
 200aab0:	00000706 	br	200aad0 <__multiply+0x214>
 200aab4:	18800017 	ldw	r2,0(r3)
 200aab8:	1000051e 	bne	r2,zero,200aad0 <__multiply+0x214>
 200aabc:	d9000417 	ldw	r4,16(sp)
 200aac0:	18ffff04 	addi	r3,r3,-4
 200aac4:	213fffc4 	addi	r4,r4,-1
 200aac8:	d9000415 	stw	r4,16(sp)
 200aacc:	203ff91e 	bne	r4,zero,200aab4 <__multiply+0x1f8>
 200aad0:	d8800417 	ldw	r2,16(sp)
 200aad4:	d8c00517 	ldw	r3,20(sp)
 200aad8:	18800415 	stw	r2,16(r3)
 200aadc:	1805883a 	mov	r2,r3
 200aae0:	dfc00f17 	ldw	ra,60(sp)
 200aae4:	df000e17 	ldw	fp,56(sp)
 200aae8:	ddc00d17 	ldw	r23,52(sp)
 200aaec:	dd800c17 	ldw	r22,48(sp)
 200aaf0:	dd400b17 	ldw	r21,44(sp)
 200aaf4:	dd000a17 	ldw	r20,40(sp)
 200aaf8:	dcc00917 	ldw	r19,36(sp)
 200aafc:	dc800817 	ldw	r18,32(sp)
 200ab00:	dc400717 	ldw	r17,28(sp)
 200ab04:	dc000617 	ldw	r16,24(sp)
 200ab08:	dec01004 	addi	sp,sp,64
 200ab0c:	f800283a 	ret

0200ab10 <__i2b>:
 200ab10:	defffd04 	addi	sp,sp,-12
 200ab14:	dc000015 	stw	r16,0(sp)
 200ab18:	04000044 	movi	r16,1
 200ab1c:	dc800115 	stw	r18,4(sp)
 200ab20:	2825883a 	mov	r18,r5
 200ab24:	800b883a 	mov	r5,r16
 200ab28:	dfc00215 	stw	ra,8(sp)
 200ab2c:	200a3ac0 	call	200a3ac <_Balloc>
 200ab30:	14000415 	stw	r16,16(r2)
 200ab34:	14800515 	stw	r18,20(r2)
 200ab38:	dfc00217 	ldw	ra,8(sp)
 200ab3c:	dc800117 	ldw	r18,4(sp)
 200ab40:	dc000017 	ldw	r16,0(sp)
 200ab44:	dec00304 	addi	sp,sp,12
 200ab48:	f800283a 	ret

0200ab4c <__multadd>:
 200ab4c:	defff604 	addi	sp,sp,-40
 200ab50:	dd800615 	stw	r22,24(sp)
 200ab54:	2d800417 	ldw	r22,16(r5)
 200ab58:	df000815 	stw	fp,32(sp)
 200ab5c:	ddc00715 	stw	r23,28(sp)
 200ab60:	dd400515 	stw	r21,20(sp)
 200ab64:	dd000415 	stw	r20,16(sp)
 200ab68:	dcc00315 	stw	r19,12(sp)
 200ab6c:	dc800215 	stw	r18,8(sp)
 200ab70:	dfc00915 	stw	ra,36(sp)
 200ab74:	dc400115 	stw	r17,4(sp)
 200ab78:	dc000015 	stw	r16,0(sp)
 200ab7c:	282f883a 	mov	r23,r5
 200ab80:	2039883a 	mov	fp,r4
 200ab84:	302b883a 	mov	r21,r6
 200ab88:	3829883a 	mov	r20,r7
 200ab8c:	2c800504 	addi	r18,r5,20
 200ab90:	0027883a 	mov	r19,zero
 200ab94:	94400017 	ldw	r17,0(r18)
 200ab98:	a80b883a 	mov	r5,r21
 200ab9c:	9cc00044 	addi	r19,r19,1
 200aba0:	893fffcc 	andi	r4,r17,65535
 200aba4:	20040f00 	call	20040f0 <__mulsi3>
 200aba8:	8808d43a 	srli	r4,r17,16
 200abac:	1521883a 	add	r16,r2,r20
 200abb0:	a80b883a 	mov	r5,r21
 200abb4:	20040f00 	call	20040f0 <__mulsi3>
 200abb8:	8008d43a 	srli	r4,r16,16
 200abbc:	843fffcc 	andi	r16,r16,65535
 200abc0:	1105883a 	add	r2,r2,r4
 200abc4:	1006943a 	slli	r3,r2,16
 200abc8:	1028d43a 	srli	r20,r2,16
 200abcc:	1c07883a 	add	r3,r3,r16
 200abd0:	90c00015 	stw	r3,0(r18)
 200abd4:	94800104 	addi	r18,r18,4
 200abd8:	9dbfee16 	blt	r19,r22,200ab94 <__multadd+0x48>
 200abdc:	a0000826 	beq	r20,zero,200ac00 <__multadd+0xb4>
 200abe0:	b8800217 	ldw	r2,8(r23)
 200abe4:	b080130e 	bge	r22,r2,200ac34 <__multadd+0xe8>
 200abe8:	b585883a 	add	r2,r22,r22
 200abec:	1085883a 	add	r2,r2,r2
 200abf0:	15c5883a 	add	r2,r2,r23
 200abf4:	b0c00044 	addi	r3,r22,1
 200abf8:	15000515 	stw	r20,20(r2)
 200abfc:	b8c00415 	stw	r3,16(r23)
 200ac00:	b805883a 	mov	r2,r23
 200ac04:	dfc00917 	ldw	ra,36(sp)
 200ac08:	df000817 	ldw	fp,32(sp)
 200ac0c:	ddc00717 	ldw	r23,28(sp)
 200ac10:	dd800617 	ldw	r22,24(sp)
 200ac14:	dd400517 	ldw	r21,20(sp)
 200ac18:	dd000417 	ldw	r20,16(sp)
 200ac1c:	dcc00317 	ldw	r19,12(sp)
 200ac20:	dc800217 	ldw	r18,8(sp)
 200ac24:	dc400117 	ldw	r17,4(sp)
 200ac28:	dc000017 	ldw	r16,0(sp)
 200ac2c:	dec00a04 	addi	sp,sp,40
 200ac30:	f800283a 	ret
 200ac34:	b9400117 	ldw	r5,4(r23)
 200ac38:	e009883a 	mov	r4,fp
 200ac3c:	29400044 	addi	r5,r5,1
 200ac40:	200a3ac0 	call	200a3ac <_Balloc>
 200ac44:	b9800417 	ldw	r6,16(r23)
 200ac48:	b9400304 	addi	r5,r23,12
 200ac4c:	11000304 	addi	r4,r2,12
 200ac50:	318d883a 	add	r6,r6,r6
 200ac54:	318d883a 	add	r6,r6,r6
 200ac58:	31800204 	addi	r6,r6,8
 200ac5c:	1023883a 	mov	r17,r2
 200ac60:	2009cac0 	call	2009cac <memcpy>
 200ac64:	b80b883a 	mov	r5,r23
 200ac68:	e009883a 	mov	r4,fp
 200ac6c:	2009e2c0 	call	2009e2c <_Bfree>
 200ac70:	882f883a 	mov	r23,r17
 200ac74:	003fdc06 	br	200abe8 <__multadd+0x9c>

0200ac78 <__pow5mult>:
 200ac78:	defffa04 	addi	sp,sp,-24
 200ac7c:	308000cc 	andi	r2,r6,3
 200ac80:	dd000415 	stw	r20,16(sp)
 200ac84:	dcc00315 	stw	r19,12(sp)
 200ac88:	dc000015 	stw	r16,0(sp)
 200ac8c:	dfc00515 	stw	ra,20(sp)
 200ac90:	dc800215 	stw	r18,8(sp)
 200ac94:	dc400115 	stw	r17,4(sp)
 200ac98:	3021883a 	mov	r16,r6
 200ac9c:	2027883a 	mov	r19,r4
 200aca0:	2829883a 	mov	r20,r5
 200aca4:	10002b1e 	bne	r2,zero,200ad54 <__pow5mult+0xdc>
 200aca8:	8025d0ba 	srai	r18,r16,2
 200acac:	90001b26 	beq	r18,zero,200ad1c <__pow5mult+0xa4>
 200acb0:	9c001217 	ldw	r16,72(r19)
 200acb4:	8000081e 	bne	r16,zero,200acd8 <__pow5mult+0x60>
 200acb8:	00003006 	br	200ad7c <__pow5mult+0x104>
 200acbc:	800b883a 	mov	r5,r16
 200acc0:	800d883a 	mov	r6,r16
 200acc4:	9809883a 	mov	r4,r19
 200acc8:	90001426 	beq	r18,zero,200ad1c <__pow5mult+0xa4>
 200accc:	80800017 	ldw	r2,0(r16)
 200acd0:	10001b26 	beq	r2,zero,200ad40 <__pow5mult+0xc8>
 200acd4:	1021883a 	mov	r16,r2
 200acd8:	9080004c 	andi	r2,r18,1
 200acdc:	1005003a 	cmpeq	r2,r2,zero
 200ace0:	9025d07a 	srai	r18,r18,1
 200ace4:	800d883a 	mov	r6,r16
 200ace8:	9809883a 	mov	r4,r19
 200acec:	a00b883a 	mov	r5,r20
 200acf0:	103ff21e 	bne	r2,zero,200acbc <__pow5mult+0x44>
 200acf4:	200a8bc0 	call	200a8bc <__multiply>
 200acf8:	a00b883a 	mov	r5,r20
 200acfc:	9809883a 	mov	r4,r19
 200ad00:	1023883a 	mov	r17,r2
 200ad04:	2009e2c0 	call	2009e2c <_Bfree>
 200ad08:	8829883a 	mov	r20,r17
 200ad0c:	800b883a 	mov	r5,r16
 200ad10:	800d883a 	mov	r6,r16
 200ad14:	9809883a 	mov	r4,r19
 200ad18:	903fec1e 	bne	r18,zero,200accc <__pow5mult+0x54>
 200ad1c:	a005883a 	mov	r2,r20
 200ad20:	dfc00517 	ldw	ra,20(sp)
 200ad24:	dd000417 	ldw	r20,16(sp)
 200ad28:	dcc00317 	ldw	r19,12(sp)
 200ad2c:	dc800217 	ldw	r18,8(sp)
 200ad30:	dc400117 	ldw	r17,4(sp)
 200ad34:	dc000017 	ldw	r16,0(sp)
 200ad38:	dec00604 	addi	sp,sp,24
 200ad3c:	f800283a 	ret
 200ad40:	200a8bc0 	call	200a8bc <__multiply>
 200ad44:	80800015 	stw	r2,0(r16)
 200ad48:	1021883a 	mov	r16,r2
 200ad4c:	10000015 	stw	zero,0(r2)
 200ad50:	003fe106 	br	200acd8 <__pow5mult+0x60>
 200ad54:	1085883a 	add	r2,r2,r2
 200ad58:	00c08074 	movhi	r3,513
 200ad5c:	18c59404 	addi	r3,r3,5712
 200ad60:	1085883a 	add	r2,r2,r2
 200ad64:	10c5883a 	add	r2,r2,r3
 200ad68:	11bfff17 	ldw	r6,-4(r2)
 200ad6c:	000f883a 	mov	r7,zero
 200ad70:	200ab4c0 	call	200ab4c <__multadd>
 200ad74:	1029883a 	mov	r20,r2
 200ad78:	003fcb06 	br	200aca8 <__pow5mult+0x30>
 200ad7c:	9809883a 	mov	r4,r19
 200ad80:	01409c44 	movi	r5,625
 200ad84:	200ab100 	call	200ab10 <__i2b>
 200ad88:	98801215 	stw	r2,72(r19)
 200ad8c:	1021883a 	mov	r16,r2
 200ad90:	10000015 	stw	zero,0(r2)
 200ad94:	003fd006 	br	200acd8 <__pow5mult+0x60>

0200ad98 <__s2b>:
 200ad98:	defff904 	addi	sp,sp,-28
 200ad9c:	dcc00315 	stw	r19,12(sp)
 200ada0:	dc800215 	stw	r18,8(sp)
 200ada4:	2827883a 	mov	r19,r5
 200ada8:	2025883a 	mov	r18,r4
 200adac:	01400244 	movi	r5,9
 200adb0:	39000204 	addi	r4,r7,8
 200adb4:	dd000415 	stw	r20,16(sp)
 200adb8:	dc400115 	stw	r17,4(sp)
 200adbc:	dfc00615 	stw	ra,24(sp)
 200adc0:	dd400515 	stw	r21,20(sp)
 200adc4:	dc000015 	stw	r16,0(sp)
 200adc8:	3829883a 	mov	r20,r7
 200adcc:	3023883a 	mov	r17,r6
 200add0:	20040200 	call	2004020 <__divsi3>
 200add4:	00c00044 	movi	r3,1
 200add8:	1880350e 	bge	r3,r2,200aeb0 <__s2b+0x118>
 200addc:	000b883a 	mov	r5,zero
 200ade0:	18c7883a 	add	r3,r3,r3
 200ade4:	29400044 	addi	r5,r5,1
 200ade8:	18bffd16 	blt	r3,r2,200ade0 <__s2b+0x48>
 200adec:	9009883a 	mov	r4,r18
 200adf0:	200a3ac0 	call	200a3ac <_Balloc>
 200adf4:	1011883a 	mov	r8,r2
 200adf8:	d8800717 	ldw	r2,28(sp)
 200adfc:	00c00044 	movi	r3,1
 200ae00:	01800244 	movi	r6,9
 200ae04:	40800515 	stw	r2,20(r8)
 200ae08:	40c00415 	stw	r3,16(r8)
 200ae0c:	3440260e 	bge	r6,r17,200aea8 <__s2b+0x110>
 200ae10:	3021883a 	mov	r16,r6
 200ae14:	99ab883a 	add	r21,r19,r6
 200ae18:	9c05883a 	add	r2,r19,r16
 200ae1c:	11c00007 	ldb	r7,0(r2)
 200ae20:	400b883a 	mov	r5,r8
 200ae24:	9009883a 	mov	r4,r18
 200ae28:	39fff404 	addi	r7,r7,-48
 200ae2c:	01800284 	movi	r6,10
 200ae30:	200ab4c0 	call	200ab4c <__multadd>
 200ae34:	84000044 	addi	r16,r16,1
 200ae38:	1011883a 	mov	r8,r2
 200ae3c:	8c3ff61e 	bne	r17,r16,200ae18 <__s2b+0x80>
 200ae40:	ac45883a 	add	r2,r21,r17
 200ae44:	117ffe04 	addi	r5,r2,-8
 200ae48:	880d883a 	mov	r6,r17
 200ae4c:	35000c0e 	bge	r6,r20,200ae80 <__s2b+0xe8>
 200ae50:	a185c83a 	sub	r2,r20,r6
 200ae54:	2821883a 	mov	r16,r5
 200ae58:	28a3883a 	add	r17,r5,r2
 200ae5c:	81c00007 	ldb	r7,0(r16)
 200ae60:	400b883a 	mov	r5,r8
 200ae64:	9009883a 	mov	r4,r18
 200ae68:	39fff404 	addi	r7,r7,-48
 200ae6c:	01800284 	movi	r6,10
 200ae70:	200ab4c0 	call	200ab4c <__multadd>
 200ae74:	84000044 	addi	r16,r16,1
 200ae78:	1011883a 	mov	r8,r2
 200ae7c:	847ff71e 	bne	r16,r17,200ae5c <__s2b+0xc4>
 200ae80:	4005883a 	mov	r2,r8
 200ae84:	dfc00617 	ldw	ra,24(sp)
 200ae88:	dd400517 	ldw	r21,20(sp)
 200ae8c:	dd000417 	ldw	r20,16(sp)
 200ae90:	dcc00317 	ldw	r19,12(sp)
 200ae94:	dc800217 	ldw	r18,8(sp)
 200ae98:	dc400117 	ldw	r17,4(sp)
 200ae9c:	dc000017 	ldw	r16,0(sp)
 200aea0:	dec00704 	addi	sp,sp,28
 200aea4:	f800283a 	ret
 200aea8:	99400284 	addi	r5,r19,10
 200aeac:	003fe706 	br	200ae4c <__s2b+0xb4>
 200aeb0:	000b883a 	mov	r5,zero
 200aeb4:	003fcd06 	br	200adec <__s2b+0x54>

0200aeb8 <_realloc_r>:
 200aeb8:	defff404 	addi	sp,sp,-48
 200aebc:	dd800815 	stw	r22,32(sp)
 200aec0:	dc800415 	stw	r18,16(sp)
 200aec4:	dc400315 	stw	r17,12(sp)
 200aec8:	dfc00b15 	stw	ra,44(sp)
 200aecc:	df000a15 	stw	fp,40(sp)
 200aed0:	ddc00915 	stw	r23,36(sp)
 200aed4:	dd400715 	stw	r21,28(sp)
 200aed8:	dd000615 	stw	r20,24(sp)
 200aedc:	dcc00515 	stw	r19,20(sp)
 200aee0:	dc000215 	stw	r16,8(sp)
 200aee4:	2825883a 	mov	r18,r5
 200aee8:	3023883a 	mov	r17,r6
 200aeec:	202d883a 	mov	r22,r4
 200aef0:	2800c926 	beq	r5,zero,200b218 <_realloc_r+0x360>
 200aef4:	200da000 	call	200da00 <__malloc_lock>
 200aef8:	943ffe04 	addi	r16,r18,-8
 200aefc:	88c002c4 	addi	r3,r17,11
 200af00:	00800584 	movi	r2,22
 200af04:	82000117 	ldw	r8,4(r16)
 200af08:	10c01b2e 	bgeu	r2,r3,200af78 <_realloc_r+0xc0>
 200af0c:	00bffe04 	movi	r2,-8
 200af10:	188e703a 	and	r7,r3,r2
 200af14:	3839883a 	mov	fp,r7
 200af18:	38001a16 	blt	r7,zero,200af84 <_realloc_r+0xcc>
 200af1c:	e4401936 	bltu	fp,r17,200af84 <_realloc_r+0xcc>
 200af20:	013fff04 	movi	r4,-4
 200af24:	4126703a 	and	r19,r8,r4
 200af28:	99c02616 	blt	r19,r7,200afc4 <_realloc_r+0x10c>
 200af2c:	802b883a 	mov	r21,r16
 200af30:	9829883a 	mov	r20,r19
 200af34:	84000204 	addi	r16,r16,8
 200af38:	a80f883a 	mov	r7,r21
 200af3c:	a70dc83a 	sub	r6,r20,fp
 200af40:	008003c4 	movi	r2,15
 200af44:	1180c136 	bltu	r2,r6,200b24c <_realloc_r+0x394>
 200af48:	38800117 	ldw	r2,4(r7)
 200af4c:	a549883a 	add	r4,r20,r21
 200af50:	1080004c 	andi	r2,r2,1
 200af54:	a084b03a 	or	r2,r20,r2
 200af58:	38800115 	stw	r2,4(r7)
 200af5c:	20c00117 	ldw	r3,4(r4)
 200af60:	18c00054 	ori	r3,r3,1
 200af64:	20c00115 	stw	r3,4(r4)
 200af68:	b009883a 	mov	r4,r22
 200af6c:	200da200 	call	200da20 <__malloc_unlock>
 200af70:	8023883a 	mov	r17,r16
 200af74:	00000606 	br	200af90 <_realloc_r+0xd8>
 200af78:	01c00404 	movi	r7,16
 200af7c:	3839883a 	mov	fp,r7
 200af80:	e47fe72e 	bgeu	fp,r17,200af20 <_realloc_r+0x68>
 200af84:	00800304 	movi	r2,12
 200af88:	0023883a 	mov	r17,zero
 200af8c:	b0800015 	stw	r2,0(r22)
 200af90:	8805883a 	mov	r2,r17
 200af94:	dfc00b17 	ldw	ra,44(sp)
 200af98:	df000a17 	ldw	fp,40(sp)
 200af9c:	ddc00917 	ldw	r23,36(sp)
 200afa0:	dd800817 	ldw	r22,32(sp)
 200afa4:	dd400717 	ldw	r21,28(sp)
 200afa8:	dd000617 	ldw	r20,24(sp)
 200afac:	dcc00517 	ldw	r19,20(sp)
 200afb0:	dc800417 	ldw	r18,16(sp)
 200afb4:	dc400317 	ldw	r17,12(sp)
 200afb8:	dc000217 	ldw	r16,8(sp)
 200afbc:	dec00c04 	addi	sp,sp,48
 200afc0:	f800283a 	ret
 200afc4:	00808074 	movhi	r2,513
 200afc8:	10878d04 	addi	r2,r2,7732
 200afcc:	12400217 	ldw	r9,8(r2)
 200afd0:	84cd883a 	add	r6,r16,r19
 200afd4:	802b883a 	mov	r21,r16
 200afd8:	3240b926 	beq	r6,r9,200b2c0 <_realloc_r+0x408>
 200afdc:	31400117 	ldw	r5,4(r6)
 200afe0:	00bfff84 	movi	r2,-2
 200afe4:	2884703a 	and	r2,r5,r2
 200afe8:	1185883a 	add	r2,r2,r6
 200afec:	10c00117 	ldw	r3,4(r2)
 200aff0:	18c0004c 	andi	r3,r3,1
 200aff4:	1807003a 	cmpeq	r3,r3,zero
 200aff8:	1800a326 	beq	r3,zero,200b288 <_realloc_r+0x3d0>
 200affc:	2908703a 	and	r4,r5,r4
 200b000:	9929883a 	add	r20,r19,r4
 200b004:	a1c0a30e 	bge	r20,r7,200b294 <_realloc_r+0x3dc>
 200b008:	4080004c 	andi	r2,r8,1
 200b00c:	1000551e 	bne	r2,zero,200b164 <_realloc_r+0x2ac>
 200b010:	80800017 	ldw	r2,0(r16)
 200b014:	80afc83a 	sub	r23,r16,r2
 200b018:	b8c00117 	ldw	r3,4(r23)
 200b01c:	00bfff04 	movi	r2,-4
 200b020:	1884703a 	and	r2,r3,r2
 200b024:	30002e26 	beq	r6,zero,200b0e0 <_realloc_r+0x228>
 200b028:	3240b926 	beq	r6,r9,200b310 <_realloc_r+0x458>
 200b02c:	98a9883a 	add	r20,r19,r2
 200b030:	2509883a 	add	r4,r4,r20
 200b034:	d9000015 	stw	r4,0(sp)
 200b038:	21c02a16 	blt	r4,r7,200b0e4 <_realloc_r+0x22c>
 200b03c:	30800317 	ldw	r2,12(r6)
 200b040:	30c00217 	ldw	r3,8(r6)
 200b044:	01400904 	movi	r5,36
 200b048:	99bfff04 	addi	r6,r19,-4
 200b04c:	18800315 	stw	r2,12(r3)
 200b050:	10c00215 	stw	r3,8(r2)
 200b054:	b9000317 	ldw	r4,12(r23)
 200b058:	b8800217 	ldw	r2,8(r23)
 200b05c:	b82b883a 	mov	r21,r23
 200b060:	bc000204 	addi	r16,r23,8
 200b064:	20800215 	stw	r2,8(r4)
 200b068:	11000315 	stw	r4,12(r2)
 200b06c:	2980e436 	bltu	r5,r6,200b400 <_realloc_r+0x548>
 200b070:	008004c4 	movi	r2,19
 200b074:	9009883a 	mov	r4,r18
 200b078:	8011883a 	mov	r8,r16
 200b07c:	11800f2e 	bgeu	r2,r6,200b0bc <_realloc_r+0x204>
 200b080:	90800017 	ldw	r2,0(r18)
 200b084:	ba000404 	addi	r8,r23,16
 200b088:	91000204 	addi	r4,r18,8
 200b08c:	b8800215 	stw	r2,8(r23)
 200b090:	90c00117 	ldw	r3,4(r18)
 200b094:	008006c4 	movi	r2,27
 200b098:	b8c00315 	stw	r3,12(r23)
 200b09c:	1180072e 	bgeu	r2,r6,200b0bc <_realloc_r+0x204>
 200b0a0:	90c00217 	ldw	r3,8(r18)
 200b0a4:	ba000604 	addi	r8,r23,24
 200b0a8:	91000404 	addi	r4,r18,16
 200b0ac:	b8c00415 	stw	r3,16(r23)
 200b0b0:	90800317 	ldw	r2,12(r18)
 200b0b4:	b8800515 	stw	r2,20(r23)
 200b0b8:	3140e726 	beq	r6,r5,200b458 <_realloc_r+0x5a0>
 200b0bc:	20800017 	ldw	r2,0(r4)
 200b0c0:	dd000017 	ldw	r20,0(sp)
 200b0c4:	b80f883a 	mov	r7,r23
 200b0c8:	40800015 	stw	r2,0(r8)
 200b0cc:	20c00117 	ldw	r3,4(r4)
 200b0d0:	40c00115 	stw	r3,4(r8)
 200b0d4:	20800217 	ldw	r2,8(r4)
 200b0d8:	40800215 	stw	r2,8(r8)
 200b0dc:	003f9706 	br	200af3c <_realloc_r+0x84>
 200b0e0:	98a9883a 	add	r20,r19,r2
 200b0e4:	a1c01f16 	blt	r20,r7,200b164 <_realloc_r+0x2ac>
 200b0e8:	b8c00317 	ldw	r3,12(r23)
 200b0ec:	b8800217 	ldw	r2,8(r23)
 200b0f0:	99bfff04 	addi	r6,r19,-4
 200b0f4:	01400904 	movi	r5,36
 200b0f8:	b82b883a 	mov	r21,r23
 200b0fc:	18800215 	stw	r2,8(r3)
 200b100:	10c00315 	stw	r3,12(r2)
 200b104:	bc000204 	addi	r16,r23,8
 200b108:	2980c336 	bltu	r5,r6,200b418 <_realloc_r+0x560>
 200b10c:	008004c4 	movi	r2,19
 200b110:	9009883a 	mov	r4,r18
 200b114:	8011883a 	mov	r8,r16
 200b118:	11800f2e 	bgeu	r2,r6,200b158 <_realloc_r+0x2a0>
 200b11c:	90800017 	ldw	r2,0(r18)
 200b120:	ba000404 	addi	r8,r23,16
 200b124:	91000204 	addi	r4,r18,8
 200b128:	b8800215 	stw	r2,8(r23)
 200b12c:	90c00117 	ldw	r3,4(r18)
 200b130:	008006c4 	movi	r2,27
 200b134:	b8c00315 	stw	r3,12(r23)
 200b138:	1180072e 	bgeu	r2,r6,200b158 <_realloc_r+0x2a0>
 200b13c:	90c00217 	ldw	r3,8(r18)
 200b140:	ba000604 	addi	r8,r23,24
 200b144:	91000404 	addi	r4,r18,16
 200b148:	b8c00415 	stw	r3,16(r23)
 200b14c:	90800317 	ldw	r2,12(r18)
 200b150:	b8800515 	stw	r2,20(r23)
 200b154:	3140c726 	beq	r6,r5,200b474 <_realloc_r+0x5bc>
 200b158:	20800017 	ldw	r2,0(r4)
 200b15c:	b80f883a 	mov	r7,r23
 200b160:	003fd906 	br	200b0c8 <_realloc_r+0x210>
 200b164:	880b883a 	mov	r5,r17
 200b168:	b009883a 	mov	r4,r22
 200b16c:	20094880 	call	2009488 <_malloc_r>
 200b170:	1023883a 	mov	r17,r2
 200b174:	10002526 	beq	r2,zero,200b20c <_realloc_r+0x354>
 200b178:	80800117 	ldw	r2,4(r16)
 200b17c:	00ffff84 	movi	r3,-2
 200b180:	893ffe04 	addi	r4,r17,-8
 200b184:	10c4703a 	and	r2,r2,r3
 200b188:	8085883a 	add	r2,r16,r2
 200b18c:	20809526 	beq	r4,r2,200b3e4 <_realloc_r+0x52c>
 200b190:	99bfff04 	addi	r6,r19,-4
 200b194:	01c00904 	movi	r7,36
 200b198:	39804536 	bltu	r7,r6,200b2b0 <_realloc_r+0x3f8>
 200b19c:	008004c4 	movi	r2,19
 200b1a0:	9009883a 	mov	r4,r18
 200b1a4:	880b883a 	mov	r5,r17
 200b1a8:	11800f2e 	bgeu	r2,r6,200b1e8 <_realloc_r+0x330>
 200b1ac:	90800017 	ldw	r2,0(r18)
 200b1b0:	89400204 	addi	r5,r17,8
 200b1b4:	91000204 	addi	r4,r18,8
 200b1b8:	88800015 	stw	r2,0(r17)
 200b1bc:	90c00117 	ldw	r3,4(r18)
 200b1c0:	008006c4 	movi	r2,27
 200b1c4:	88c00115 	stw	r3,4(r17)
 200b1c8:	1180072e 	bgeu	r2,r6,200b1e8 <_realloc_r+0x330>
 200b1cc:	90c00217 	ldw	r3,8(r18)
 200b1d0:	89400404 	addi	r5,r17,16
 200b1d4:	91000404 	addi	r4,r18,16
 200b1d8:	88c00215 	stw	r3,8(r17)
 200b1dc:	90800317 	ldw	r2,12(r18)
 200b1e0:	88800315 	stw	r2,12(r17)
 200b1e4:	31c09126 	beq	r6,r7,200b42c <_realloc_r+0x574>
 200b1e8:	20800017 	ldw	r2,0(r4)
 200b1ec:	28800015 	stw	r2,0(r5)
 200b1f0:	20c00117 	ldw	r3,4(r4)
 200b1f4:	28c00115 	stw	r3,4(r5)
 200b1f8:	20800217 	ldw	r2,8(r4)
 200b1fc:	28800215 	stw	r2,8(r5)
 200b200:	900b883a 	mov	r5,r18
 200b204:	b009883a 	mov	r4,r22
 200b208:	20089000 	call	2008900 <_free_r>
 200b20c:	b009883a 	mov	r4,r22
 200b210:	200da200 	call	200da20 <__malloc_unlock>
 200b214:	003f5e06 	br	200af90 <_realloc_r+0xd8>
 200b218:	300b883a 	mov	r5,r6
 200b21c:	dfc00b17 	ldw	ra,44(sp)
 200b220:	df000a17 	ldw	fp,40(sp)
 200b224:	ddc00917 	ldw	r23,36(sp)
 200b228:	dd800817 	ldw	r22,32(sp)
 200b22c:	dd400717 	ldw	r21,28(sp)
 200b230:	dd000617 	ldw	r20,24(sp)
 200b234:	dcc00517 	ldw	r19,20(sp)
 200b238:	dc800417 	ldw	r18,16(sp)
 200b23c:	dc400317 	ldw	r17,12(sp)
 200b240:	dc000217 	ldw	r16,8(sp)
 200b244:	dec00c04 	addi	sp,sp,48
 200b248:	20094881 	jmpi	2009488 <_malloc_r>
 200b24c:	38800117 	ldw	r2,4(r7)
 200b250:	e54b883a 	add	r5,fp,r21
 200b254:	31000054 	ori	r4,r6,1
 200b258:	1080004c 	andi	r2,r2,1
 200b25c:	1704b03a 	or	r2,r2,fp
 200b260:	38800115 	stw	r2,4(r7)
 200b264:	29000115 	stw	r4,4(r5)
 200b268:	2987883a 	add	r3,r5,r6
 200b26c:	18800117 	ldw	r2,4(r3)
 200b270:	29400204 	addi	r5,r5,8
 200b274:	b009883a 	mov	r4,r22
 200b278:	10800054 	ori	r2,r2,1
 200b27c:	18800115 	stw	r2,4(r3)
 200b280:	20089000 	call	2008900 <_free_r>
 200b284:	003f3806 	br	200af68 <_realloc_r+0xb0>
 200b288:	000d883a 	mov	r6,zero
 200b28c:	0009883a 	mov	r4,zero
 200b290:	003f5d06 	br	200b008 <_realloc_r+0x150>
 200b294:	30c00217 	ldw	r3,8(r6)
 200b298:	30800317 	ldw	r2,12(r6)
 200b29c:	800f883a 	mov	r7,r16
 200b2a0:	84000204 	addi	r16,r16,8
 200b2a4:	10c00215 	stw	r3,8(r2)
 200b2a8:	18800315 	stw	r2,12(r3)
 200b2ac:	003f2306 	br	200af3c <_realloc_r+0x84>
 200b2b0:	8809883a 	mov	r4,r17
 200b2b4:	900b883a 	mov	r5,r18
 200b2b8:	2009d4c0 	call	2009d4c <memmove>
 200b2bc:	003fd006 	br	200b200 <_realloc_r+0x348>
 200b2c0:	30800117 	ldw	r2,4(r6)
 200b2c4:	e0c00404 	addi	r3,fp,16
 200b2c8:	1108703a 	and	r4,r2,r4
 200b2cc:	9905883a 	add	r2,r19,r4
 200b2d0:	10ff4d16 	blt	r2,r3,200b008 <_realloc_r+0x150>
 200b2d4:	1705c83a 	sub	r2,r2,fp
 200b2d8:	870b883a 	add	r5,r16,fp
 200b2dc:	10800054 	ori	r2,r2,1
 200b2e0:	28800115 	stw	r2,4(r5)
 200b2e4:	80c00117 	ldw	r3,4(r16)
 200b2e8:	00808074 	movhi	r2,513
 200b2ec:	10878d04 	addi	r2,r2,7732
 200b2f0:	b009883a 	mov	r4,r22
 200b2f4:	18c0004c 	andi	r3,r3,1
 200b2f8:	e0c6b03a 	or	r3,fp,r3
 200b2fc:	11400215 	stw	r5,8(r2)
 200b300:	80c00115 	stw	r3,4(r16)
 200b304:	200da200 	call	200da20 <__malloc_unlock>
 200b308:	84400204 	addi	r17,r16,8
 200b30c:	003f2006 	br	200af90 <_realloc_r+0xd8>
 200b310:	98a9883a 	add	r20,r19,r2
 200b314:	2509883a 	add	r4,r4,r20
 200b318:	e0800404 	addi	r2,fp,16
 200b31c:	d9000115 	stw	r4,4(sp)
 200b320:	20bf7016 	blt	r4,r2,200b0e4 <_realloc_r+0x22c>
 200b324:	b8c00317 	ldw	r3,12(r23)
 200b328:	b8800217 	ldw	r2,8(r23)
 200b32c:	99bfff04 	addi	r6,r19,-4
 200b330:	01400904 	movi	r5,36
 200b334:	18800215 	stw	r2,8(r3)
 200b338:	10c00315 	stw	r3,12(r2)
 200b33c:	bc400204 	addi	r17,r23,8
 200b340:	29804136 	bltu	r5,r6,200b448 <_realloc_r+0x590>
 200b344:	008004c4 	movi	r2,19
 200b348:	9009883a 	mov	r4,r18
 200b34c:	880f883a 	mov	r7,r17
 200b350:	11800f2e 	bgeu	r2,r6,200b390 <_realloc_r+0x4d8>
 200b354:	90800017 	ldw	r2,0(r18)
 200b358:	b9c00404 	addi	r7,r23,16
 200b35c:	91000204 	addi	r4,r18,8
 200b360:	b8800215 	stw	r2,8(r23)
 200b364:	90c00117 	ldw	r3,4(r18)
 200b368:	008006c4 	movi	r2,27
 200b36c:	b8c00315 	stw	r3,12(r23)
 200b370:	1180072e 	bgeu	r2,r6,200b390 <_realloc_r+0x4d8>
 200b374:	90c00217 	ldw	r3,8(r18)
 200b378:	b9c00604 	addi	r7,r23,24
 200b37c:	91000404 	addi	r4,r18,16
 200b380:	b8c00415 	stw	r3,16(r23)
 200b384:	90800317 	ldw	r2,12(r18)
 200b388:	b8800515 	stw	r2,20(r23)
 200b38c:	31404026 	beq	r6,r5,200b490 <_realloc_r+0x5d8>
 200b390:	20800017 	ldw	r2,0(r4)
 200b394:	38800015 	stw	r2,0(r7)
 200b398:	20c00117 	ldw	r3,4(r4)
 200b39c:	38c00115 	stw	r3,4(r7)
 200b3a0:	20800217 	ldw	r2,8(r4)
 200b3a4:	38800215 	stw	r2,8(r7)
 200b3a8:	d8c00117 	ldw	r3,4(sp)
 200b3ac:	bf0b883a 	add	r5,r23,fp
 200b3b0:	b009883a 	mov	r4,r22
 200b3b4:	1f05c83a 	sub	r2,r3,fp
 200b3b8:	10800054 	ori	r2,r2,1
 200b3bc:	28800115 	stw	r2,4(r5)
 200b3c0:	b8c00117 	ldw	r3,4(r23)
 200b3c4:	00808074 	movhi	r2,513
 200b3c8:	10878d04 	addi	r2,r2,7732
 200b3cc:	11400215 	stw	r5,8(r2)
 200b3d0:	18c0004c 	andi	r3,r3,1
 200b3d4:	e0c6b03a 	or	r3,fp,r3
 200b3d8:	b8c00115 	stw	r3,4(r23)
 200b3dc:	200da200 	call	200da20 <__malloc_unlock>
 200b3e0:	003eeb06 	br	200af90 <_realloc_r+0xd8>
 200b3e4:	20800117 	ldw	r2,4(r4)
 200b3e8:	00ffff04 	movi	r3,-4
 200b3ec:	800f883a 	mov	r7,r16
 200b3f0:	10c4703a 	and	r2,r2,r3
 200b3f4:	98a9883a 	add	r20,r19,r2
 200b3f8:	84000204 	addi	r16,r16,8
 200b3fc:	003ecf06 	br	200af3c <_realloc_r+0x84>
 200b400:	900b883a 	mov	r5,r18
 200b404:	8009883a 	mov	r4,r16
 200b408:	2009d4c0 	call	2009d4c <memmove>
 200b40c:	dd000017 	ldw	r20,0(sp)
 200b410:	b80f883a 	mov	r7,r23
 200b414:	003ec906 	br	200af3c <_realloc_r+0x84>
 200b418:	900b883a 	mov	r5,r18
 200b41c:	8009883a 	mov	r4,r16
 200b420:	2009d4c0 	call	2009d4c <memmove>
 200b424:	b80f883a 	mov	r7,r23
 200b428:	003ec406 	br	200af3c <_realloc_r+0x84>
 200b42c:	90c00417 	ldw	r3,16(r18)
 200b430:	89400604 	addi	r5,r17,24
 200b434:	91000604 	addi	r4,r18,24
 200b438:	88c00415 	stw	r3,16(r17)
 200b43c:	90800517 	ldw	r2,20(r18)
 200b440:	88800515 	stw	r2,20(r17)
 200b444:	003f6806 	br	200b1e8 <_realloc_r+0x330>
 200b448:	900b883a 	mov	r5,r18
 200b44c:	8809883a 	mov	r4,r17
 200b450:	2009d4c0 	call	2009d4c <memmove>
 200b454:	003fd406 	br	200b3a8 <_realloc_r+0x4f0>
 200b458:	90c00417 	ldw	r3,16(r18)
 200b45c:	91000604 	addi	r4,r18,24
 200b460:	ba000804 	addi	r8,r23,32
 200b464:	b8c00615 	stw	r3,24(r23)
 200b468:	90800517 	ldw	r2,20(r18)
 200b46c:	b8800715 	stw	r2,28(r23)
 200b470:	003f1206 	br	200b0bc <_realloc_r+0x204>
 200b474:	90c00417 	ldw	r3,16(r18)
 200b478:	91000604 	addi	r4,r18,24
 200b47c:	ba000804 	addi	r8,r23,32
 200b480:	b8c00615 	stw	r3,24(r23)
 200b484:	90800517 	ldw	r2,20(r18)
 200b488:	b8800715 	stw	r2,28(r23)
 200b48c:	003f3206 	br	200b158 <_realloc_r+0x2a0>
 200b490:	90c00417 	ldw	r3,16(r18)
 200b494:	91000604 	addi	r4,r18,24
 200b498:	b9c00804 	addi	r7,r23,32
 200b49c:	b8c00615 	stw	r3,24(r23)
 200b4a0:	90800517 	ldw	r2,20(r18)
 200b4a4:	b8800715 	stw	r2,28(r23)
 200b4a8:	003fb906 	br	200b390 <_realloc_r+0x4d8>

0200b4ac <__isinfd>:
 200b4ac:	200d883a 	mov	r6,r4
 200b4b0:	0109c83a 	sub	r4,zero,r4
 200b4b4:	2188b03a 	or	r4,r4,r6
 200b4b8:	2008d7fa 	srli	r4,r4,31
 200b4bc:	00a00034 	movhi	r2,32768
 200b4c0:	10bfffc4 	addi	r2,r2,-1
 200b4c4:	1144703a 	and	r2,r2,r5
 200b4c8:	2088b03a 	or	r4,r4,r2
 200b4cc:	009ffc34 	movhi	r2,32752
 200b4d0:	1105c83a 	sub	r2,r2,r4
 200b4d4:	0087c83a 	sub	r3,zero,r2
 200b4d8:	10c4b03a 	or	r2,r2,r3
 200b4dc:	1004d7fa 	srli	r2,r2,31
 200b4e0:	00c00044 	movi	r3,1
 200b4e4:	1885c83a 	sub	r2,r3,r2
 200b4e8:	f800283a 	ret

0200b4ec <__isnand>:
 200b4ec:	200d883a 	mov	r6,r4
 200b4f0:	0109c83a 	sub	r4,zero,r4
 200b4f4:	2188b03a 	or	r4,r4,r6
 200b4f8:	2008d7fa 	srli	r4,r4,31
 200b4fc:	00a00034 	movhi	r2,32768
 200b500:	10bfffc4 	addi	r2,r2,-1
 200b504:	1144703a 	and	r2,r2,r5
 200b508:	2088b03a 	or	r4,r4,r2
 200b50c:	009ffc34 	movhi	r2,32752
 200b510:	1105c83a 	sub	r2,r2,r4
 200b514:	1004d7fa 	srli	r2,r2,31
 200b518:	f800283a 	ret

0200b51c <_sbrk_r>:
 200b51c:	defffd04 	addi	sp,sp,-12
 200b520:	dc000015 	stw	r16,0(sp)
 200b524:	04008074 	movhi	r16,513
 200b528:	8414ed04 	addi	r16,r16,21428
 200b52c:	dc400115 	stw	r17,4(sp)
 200b530:	80000015 	stw	zero,0(r16)
 200b534:	2023883a 	mov	r17,r4
 200b538:	2809883a 	mov	r4,r5
 200b53c:	dfc00215 	stw	ra,8(sp)
 200b540:	200dc3c0 	call	200dc3c <sbrk>
 200b544:	1007883a 	mov	r3,r2
 200b548:	00bfffc4 	movi	r2,-1
 200b54c:	18800626 	beq	r3,r2,200b568 <_sbrk_r+0x4c>
 200b550:	1805883a 	mov	r2,r3
 200b554:	dfc00217 	ldw	ra,8(sp)
 200b558:	dc400117 	ldw	r17,4(sp)
 200b55c:	dc000017 	ldw	r16,0(sp)
 200b560:	dec00304 	addi	sp,sp,12
 200b564:	f800283a 	ret
 200b568:	80800017 	ldw	r2,0(r16)
 200b56c:	103ff826 	beq	r2,zero,200b550 <_sbrk_r+0x34>
 200b570:	88800015 	stw	r2,0(r17)
 200b574:	1805883a 	mov	r2,r3
 200b578:	dfc00217 	ldw	ra,8(sp)
 200b57c:	dc400117 	ldw	r17,4(sp)
 200b580:	dc000017 	ldw	r16,0(sp)
 200b584:	dec00304 	addi	sp,sp,12
 200b588:	f800283a 	ret

0200b58c <__sclose>:
 200b58c:	2940038f 	ldh	r5,14(r5)
 200b590:	200b8181 	jmpi	200b818 <_close_r>

0200b594 <__sseek>:
 200b594:	defffe04 	addi	sp,sp,-8
 200b598:	dc000015 	stw	r16,0(sp)
 200b59c:	2821883a 	mov	r16,r5
 200b5a0:	2940038f 	ldh	r5,14(r5)
 200b5a4:	dfc00115 	stw	ra,4(sp)
 200b5a8:	200ba900 	call	200ba90 <_lseek_r>
 200b5ac:	1007883a 	mov	r3,r2
 200b5b0:	00bfffc4 	movi	r2,-1
 200b5b4:	18800926 	beq	r3,r2,200b5dc <__sseek+0x48>
 200b5b8:	8080030b 	ldhu	r2,12(r16)
 200b5bc:	80c01415 	stw	r3,80(r16)
 200b5c0:	10840014 	ori	r2,r2,4096
 200b5c4:	8080030d 	sth	r2,12(r16)
 200b5c8:	1805883a 	mov	r2,r3
 200b5cc:	dfc00117 	ldw	ra,4(sp)
 200b5d0:	dc000017 	ldw	r16,0(sp)
 200b5d4:	dec00204 	addi	sp,sp,8
 200b5d8:	f800283a 	ret
 200b5dc:	8080030b 	ldhu	r2,12(r16)
 200b5e0:	10bbffcc 	andi	r2,r2,61439
 200b5e4:	8080030d 	sth	r2,12(r16)
 200b5e8:	1805883a 	mov	r2,r3
 200b5ec:	dfc00117 	ldw	ra,4(sp)
 200b5f0:	dc000017 	ldw	r16,0(sp)
 200b5f4:	dec00204 	addi	sp,sp,8
 200b5f8:	f800283a 	ret

0200b5fc <__swrite>:
 200b5fc:	2880030b 	ldhu	r2,12(r5)
 200b600:	defffb04 	addi	sp,sp,-20
 200b604:	dcc00315 	stw	r19,12(sp)
 200b608:	1080400c 	andi	r2,r2,256
 200b60c:	dc800215 	stw	r18,8(sp)
 200b610:	dc400115 	stw	r17,4(sp)
 200b614:	dc000015 	stw	r16,0(sp)
 200b618:	3027883a 	mov	r19,r6
 200b61c:	3825883a 	mov	r18,r7
 200b620:	dfc00415 	stw	ra,16(sp)
 200b624:	2821883a 	mov	r16,r5
 200b628:	000d883a 	mov	r6,zero
 200b62c:	01c00084 	movi	r7,2
 200b630:	2023883a 	mov	r17,r4
 200b634:	10000226 	beq	r2,zero,200b640 <__swrite+0x44>
 200b638:	2940038f 	ldh	r5,14(r5)
 200b63c:	200ba900 	call	200ba90 <_lseek_r>
 200b640:	8080030b 	ldhu	r2,12(r16)
 200b644:	8140038f 	ldh	r5,14(r16)
 200b648:	8809883a 	mov	r4,r17
 200b64c:	10bbffcc 	andi	r2,r2,61439
 200b650:	980d883a 	mov	r6,r19
 200b654:	900f883a 	mov	r7,r18
 200b658:	8080030d 	sth	r2,12(r16)
 200b65c:	dfc00417 	ldw	ra,16(sp)
 200b660:	dcc00317 	ldw	r19,12(sp)
 200b664:	dc800217 	ldw	r18,8(sp)
 200b668:	dc400117 	ldw	r17,4(sp)
 200b66c:	dc000017 	ldw	r16,0(sp)
 200b670:	dec00504 	addi	sp,sp,20
 200b674:	200b6d81 	jmpi	200b6d8 <_write_r>

0200b678 <__sread>:
 200b678:	defffe04 	addi	sp,sp,-8
 200b67c:	dc000015 	stw	r16,0(sp)
 200b680:	2821883a 	mov	r16,r5
 200b684:	2940038f 	ldh	r5,14(r5)
 200b688:	dfc00115 	stw	ra,4(sp)
 200b68c:	200bb080 	call	200bb08 <_read_r>
 200b690:	1007883a 	mov	r3,r2
 200b694:	10000816 	blt	r2,zero,200b6b8 <__sread+0x40>
 200b698:	80801417 	ldw	r2,80(r16)
 200b69c:	10c5883a 	add	r2,r2,r3
 200b6a0:	80801415 	stw	r2,80(r16)
 200b6a4:	1805883a 	mov	r2,r3
 200b6a8:	dfc00117 	ldw	ra,4(sp)
 200b6ac:	dc000017 	ldw	r16,0(sp)
 200b6b0:	dec00204 	addi	sp,sp,8
 200b6b4:	f800283a 	ret
 200b6b8:	8080030b 	ldhu	r2,12(r16)
 200b6bc:	10bbffcc 	andi	r2,r2,61439
 200b6c0:	8080030d 	sth	r2,12(r16)
 200b6c4:	1805883a 	mov	r2,r3
 200b6c8:	dfc00117 	ldw	ra,4(sp)
 200b6cc:	dc000017 	ldw	r16,0(sp)
 200b6d0:	dec00204 	addi	sp,sp,8
 200b6d4:	f800283a 	ret

0200b6d8 <_write_r>:
 200b6d8:	defffd04 	addi	sp,sp,-12
 200b6dc:	dc000015 	stw	r16,0(sp)
 200b6e0:	04008074 	movhi	r16,513
 200b6e4:	8414ed04 	addi	r16,r16,21428
 200b6e8:	dc400115 	stw	r17,4(sp)
 200b6ec:	80000015 	stw	zero,0(r16)
 200b6f0:	2023883a 	mov	r17,r4
 200b6f4:	2809883a 	mov	r4,r5
 200b6f8:	300b883a 	mov	r5,r6
 200b6fc:	380d883a 	mov	r6,r7
 200b700:	dfc00215 	stw	ra,8(sp)
 200b704:	200dd280 	call	200dd28 <write>
 200b708:	1007883a 	mov	r3,r2
 200b70c:	00bfffc4 	movi	r2,-1
 200b710:	18800626 	beq	r3,r2,200b72c <_write_r+0x54>
 200b714:	1805883a 	mov	r2,r3
 200b718:	dfc00217 	ldw	ra,8(sp)
 200b71c:	dc400117 	ldw	r17,4(sp)
 200b720:	dc000017 	ldw	r16,0(sp)
 200b724:	dec00304 	addi	sp,sp,12
 200b728:	f800283a 	ret
 200b72c:	80800017 	ldw	r2,0(r16)
 200b730:	103ff826 	beq	r2,zero,200b714 <_write_r+0x3c>
 200b734:	88800015 	stw	r2,0(r17)
 200b738:	1805883a 	mov	r2,r3
 200b73c:	dfc00217 	ldw	ra,8(sp)
 200b740:	dc400117 	ldw	r17,4(sp)
 200b744:	dc000017 	ldw	r16,0(sp)
 200b748:	dec00304 	addi	sp,sp,12
 200b74c:	f800283a 	ret

0200b750 <_calloc_r>:
 200b750:	defffe04 	addi	sp,sp,-8
 200b754:	dc400015 	stw	r17,0(sp)
 200b758:	2023883a 	mov	r17,r4
 200b75c:	2809883a 	mov	r4,r5
 200b760:	300b883a 	mov	r5,r6
 200b764:	dfc00115 	stw	ra,4(sp)
 200b768:	20040f00 	call	20040f0 <__mulsi3>
 200b76c:	100b883a 	mov	r5,r2
 200b770:	8809883a 	mov	r4,r17
 200b774:	20094880 	call	2009488 <_malloc_r>
 200b778:	1023883a 	mov	r17,r2
 200b77c:	01c00904 	movi	r7,36
 200b780:	10000d26 	beq	r2,zero,200b7b8 <_calloc_r+0x68>
 200b784:	10ffff17 	ldw	r3,-4(r2)
 200b788:	1009883a 	mov	r4,r2
 200b78c:	00bfff04 	movi	r2,-4
 200b790:	1886703a 	and	r3,r3,r2
 200b794:	1887883a 	add	r3,r3,r2
 200b798:	180d883a 	mov	r6,r3
 200b79c:	000b883a 	mov	r5,zero
 200b7a0:	38c01736 	bltu	r7,r3,200b800 <_calloc_r+0xb0>
 200b7a4:	008004c4 	movi	r2,19
 200b7a8:	10c00836 	bltu	r2,r3,200b7cc <_calloc_r+0x7c>
 200b7ac:	20000215 	stw	zero,8(r4)
 200b7b0:	20000015 	stw	zero,0(r4)
 200b7b4:	20000115 	stw	zero,4(r4)
 200b7b8:	8805883a 	mov	r2,r17
 200b7bc:	dfc00117 	ldw	ra,4(sp)
 200b7c0:	dc400017 	ldw	r17,0(sp)
 200b7c4:	dec00204 	addi	sp,sp,8
 200b7c8:	f800283a 	ret
 200b7cc:	008006c4 	movi	r2,27
 200b7d0:	88000015 	stw	zero,0(r17)
 200b7d4:	88000115 	stw	zero,4(r17)
 200b7d8:	89000204 	addi	r4,r17,8
 200b7dc:	10fff32e 	bgeu	r2,r3,200b7ac <_calloc_r+0x5c>
 200b7e0:	88000215 	stw	zero,8(r17)
 200b7e4:	88000315 	stw	zero,12(r17)
 200b7e8:	89000404 	addi	r4,r17,16
 200b7ec:	19ffef1e 	bne	r3,r7,200b7ac <_calloc_r+0x5c>
 200b7f0:	89000604 	addi	r4,r17,24
 200b7f4:	88000415 	stw	zero,16(r17)
 200b7f8:	88000515 	stw	zero,20(r17)
 200b7fc:	003feb06 	br	200b7ac <_calloc_r+0x5c>
 200b800:	20046bc0 	call	20046bc <memset>
 200b804:	8805883a 	mov	r2,r17
 200b808:	dfc00117 	ldw	ra,4(sp)
 200b80c:	dc400017 	ldw	r17,0(sp)
 200b810:	dec00204 	addi	sp,sp,8
 200b814:	f800283a 	ret

0200b818 <_close_r>:
 200b818:	defffd04 	addi	sp,sp,-12
 200b81c:	dc000015 	stw	r16,0(sp)
 200b820:	04008074 	movhi	r16,513
 200b824:	8414ed04 	addi	r16,r16,21428
 200b828:	dc400115 	stw	r17,4(sp)
 200b82c:	80000015 	stw	zero,0(r16)
 200b830:	2023883a 	mov	r17,r4
 200b834:	2809883a 	mov	r4,r5
 200b838:	dfc00215 	stw	ra,8(sp)
 200b83c:	200d1ac0 	call	200d1ac <close>
 200b840:	1007883a 	mov	r3,r2
 200b844:	00bfffc4 	movi	r2,-1
 200b848:	18800626 	beq	r3,r2,200b864 <_close_r+0x4c>
 200b84c:	1805883a 	mov	r2,r3
 200b850:	dfc00217 	ldw	ra,8(sp)
 200b854:	dc400117 	ldw	r17,4(sp)
 200b858:	dc000017 	ldw	r16,0(sp)
 200b85c:	dec00304 	addi	sp,sp,12
 200b860:	f800283a 	ret
 200b864:	80800017 	ldw	r2,0(r16)
 200b868:	103ff826 	beq	r2,zero,200b84c <_close_r+0x34>
 200b86c:	88800015 	stw	r2,0(r17)
 200b870:	1805883a 	mov	r2,r3
 200b874:	dfc00217 	ldw	ra,8(sp)
 200b878:	dc400117 	ldw	r17,4(sp)
 200b87c:	dc000017 	ldw	r16,0(sp)
 200b880:	dec00304 	addi	sp,sp,12
 200b884:	f800283a 	ret

0200b888 <_fclose_r>:
 200b888:	defffc04 	addi	sp,sp,-16
 200b88c:	dc400115 	stw	r17,4(sp)
 200b890:	dc000015 	stw	r16,0(sp)
 200b894:	dfc00315 	stw	ra,12(sp)
 200b898:	dc800215 	stw	r18,8(sp)
 200b89c:	2821883a 	mov	r16,r5
 200b8a0:	2023883a 	mov	r17,r4
 200b8a4:	28002926 	beq	r5,zero,200b94c <_fclose_r+0xc4>
 200b8a8:	20085380 	call	2008538 <__sfp_lock_acquire>
 200b8ac:	88000226 	beq	r17,zero,200b8b8 <_fclose_r+0x30>
 200b8b0:	88800e17 	ldw	r2,56(r17)
 200b8b4:	10002d26 	beq	r2,zero,200b96c <_fclose_r+0xe4>
 200b8b8:	8080030f 	ldh	r2,12(r16)
 200b8bc:	10002226 	beq	r2,zero,200b948 <_fclose_r+0xc0>
 200b8c0:	8809883a 	mov	r4,r17
 200b8c4:	800b883a 	mov	r5,r16
 200b8c8:	20082b00 	call	20082b0 <_fflush_r>
 200b8cc:	1025883a 	mov	r18,r2
 200b8d0:	80800b17 	ldw	r2,44(r16)
 200b8d4:	10000426 	beq	r2,zero,200b8e8 <_fclose_r+0x60>
 200b8d8:	81400717 	ldw	r5,28(r16)
 200b8dc:	8809883a 	mov	r4,r17
 200b8e0:	103ee83a 	callr	r2
 200b8e4:	10002a16 	blt	r2,zero,200b990 <_fclose_r+0x108>
 200b8e8:	8080030b 	ldhu	r2,12(r16)
 200b8ec:	1080200c 	andi	r2,r2,128
 200b8f0:	1000231e 	bne	r2,zero,200b980 <_fclose_r+0xf8>
 200b8f4:	81400c17 	ldw	r5,48(r16)
 200b8f8:	28000526 	beq	r5,zero,200b910 <_fclose_r+0x88>
 200b8fc:	80801004 	addi	r2,r16,64
 200b900:	28800226 	beq	r5,r2,200b90c <_fclose_r+0x84>
 200b904:	8809883a 	mov	r4,r17
 200b908:	20089000 	call	2008900 <_free_r>
 200b90c:	80000c15 	stw	zero,48(r16)
 200b910:	81401117 	ldw	r5,68(r16)
 200b914:	28000326 	beq	r5,zero,200b924 <_fclose_r+0x9c>
 200b918:	8809883a 	mov	r4,r17
 200b91c:	20089000 	call	2008900 <_free_r>
 200b920:	80001115 	stw	zero,68(r16)
 200b924:	8000030d 	sth	zero,12(r16)
 200b928:	200853c0 	call	200853c <__sfp_lock_release>
 200b92c:	9005883a 	mov	r2,r18
 200b930:	dfc00317 	ldw	ra,12(sp)
 200b934:	dc800217 	ldw	r18,8(sp)
 200b938:	dc400117 	ldw	r17,4(sp)
 200b93c:	dc000017 	ldw	r16,0(sp)
 200b940:	dec00404 	addi	sp,sp,16
 200b944:	f800283a 	ret
 200b948:	200853c0 	call	200853c <__sfp_lock_release>
 200b94c:	0025883a 	mov	r18,zero
 200b950:	9005883a 	mov	r2,r18
 200b954:	dfc00317 	ldw	ra,12(sp)
 200b958:	dc800217 	ldw	r18,8(sp)
 200b95c:	dc400117 	ldw	r17,4(sp)
 200b960:	dc000017 	ldw	r16,0(sp)
 200b964:	dec00404 	addi	sp,sp,16
 200b968:	f800283a 	ret
 200b96c:	8809883a 	mov	r4,r17
 200b970:	20085480 	call	2008548 <__sinit>
 200b974:	8080030f 	ldh	r2,12(r16)
 200b978:	103fd11e 	bne	r2,zero,200b8c0 <_fclose_r+0x38>
 200b97c:	003ff206 	br	200b948 <_fclose_r+0xc0>
 200b980:	81400417 	ldw	r5,16(r16)
 200b984:	8809883a 	mov	r4,r17
 200b988:	20089000 	call	2008900 <_free_r>
 200b98c:	003fd906 	br	200b8f4 <_fclose_r+0x6c>
 200b990:	04bfffc4 	movi	r18,-1
 200b994:	003fd406 	br	200b8e8 <_fclose_r+0x60>

0200b998 <fclose>:
 200b998:	00808074 	movhi	r2,513
 200b99c:	108d6704 	addi	r2,r2,13724
 200b9a0:	200b883a 	mov	r5,r4
 200b9a4:	11000017 	ldw	r4,0(r2)
 200b9a8:	200b8881 	jmpi	200b888 <_fclose_r>

0200b9ac <_fstat_r>:
 200b9ac:	defffd04 	addi	sp,sp,-12
 200b9b0:	dc000015 	stw	r16,0(sp)
 200b9b4:	04008074 	movhi	r16,513
 200b9b8:	8414ed04 	addi	r16,r16,21428
 200b9bc:	dc400115 	stw	r17,4(sp)
 200b9c0:	80000015 	stw	zero,0(r16)
 200b9c4:	2023883a 	mov	r17,r4
 200b9c8:	2809883a 	mov	r4,r5
 200b9cc:	300b883a 	mov	r5,r6
 200b9d0:	dfc00215 	stw	ra,8(sp)
 200b9d4:	200d3380 	call	200d338 <fstat>
 200b9d8:	1007883a 	mov	r3,r2
 200b9dc:	00bfffc4 	movi	r2,-1
 200b9e0:	18800626 	beq	r3,r2,200b9fc <_fstat_r+0x50>
 200b9e4:	1805883a 	mov	r2,r3
 200b9e8:	dfc00217 	ldw	ra,8(sp)
 200b9ec:	dc400117 	ldw	r17,4(sp)
 200b9f0:	dc000017 	ldw	r16,0(sp)
 200b9f4:	dec00304 	addi	sp,sp,12
 200b9f8:	f800283a 	ret
 200b9fc:	80800017 	ldw	r2,0(r16)
 200ba00:	103ff826 	beq	r2,zero,200b9e4 <_fstat_r+0x38>
 200ba04:	88800015 	stw	r2,0(r17)
 200ba08:	1805883a 	mov	r2,r3
 200ba0c:	dfc00217 	ldw	ra,8(sp)
 200ba10:	dc400117 	ldw	r17,4(sp)
 200ba14:	dc000017 	ldw	r16,0(sp)
 200ba18:	dec00304 	addi	sp,sp,12
 200ba1c:	f800283a 	ret

0200ba20 <_isatty_r>:
 200ba20:	defffd04 	addi	sp,sp,-12
 200ba24:	dc000015 	stw	r16,0(sp)
 200ba28:	04008074 	movhi	r16,513
 200ba2c:	8414ed04 	addi	r16,r16,21428
 200ba30:	dc400115 	stw	r17,4(sp)
 200ba34:	80000015 	stw	zero,0(r16)
 200ba38:	2023883a 	mov	r17,r4
 200ba3c:	2809883a 	mov	r4,r5
 200ba40:	dfc00215 	stw	ra,8(sp)
 200ba44:	200d6300 	call	200d630 <isatty>
 200ba48:	1007883a 	mov	r3,r2
 200ba4c:	00bfffc4 	movi	r2,-1
 200ba50:	18800626 	beq	r3,r2,200ba6c <_isatty_r+0x4c>
 200ba54:	1805883a 	mov	r2,r3
 200ba58:	dfc00217 	ldw	ra,8(sp)
 200ba5c:	dc400117 	ldw	r17,4(sp)
 200ba60:	dc000017 	ldw	r16,0(sp)
 200ba64:	dec00304 	addi	sp,sp,12
 200ba68:	f800283a 	ret
 200ba6c:	80800017 	ldw	r2,0(r16)
 200ba70:	103ff826 	beq	r2,zero,200ba54 <_isatty_r+0x34>
 200ba74:	88800015 	stw	r2,0(r17)
 200ba78:	1805883a 	mov	r2,r3
 200ba7c:	dfc00217 	ldw	ra,8(sp)
 200ba80:	dc400117 	ldw	r17,4(sp)
 200ba84:	dc000017 	ldw	r16,0(sp)
 200ba88:	dec00304 	addi	sp,sp,12
 200ba8c:	f800283a 	ret

0200ba90 <_lseek_r>:
 200ba90:	defffd04 	addi	sp,sp,-12
 200ba94:	dc000015 	stw	r16,0(sp)
 200ba98:	04008074 	movhi	r16,513
 200ba9c:	8414ed04 	addi	r16,r16,21428
 200baa0:	dc400115 	stw	r17,4(sp)
 200baa4:	80000015 	stw	zero,0(r16)
 200baa8:	2023883a 	mov	r17,r4
 200baac:	2809883a 	mov	r4,r5
 200bab0:	300b883a 	mov	r5,r6
 200bab4:	380d883a 	mov	r6,r7
 200bab8:	dfc00215 	stw	ra,8(sp)
 200babc:	200d8400 	call	200d840 <lseek>
 200bac0:	1007883a 	mov	r3,r2
 200bac4:	00bfffc4 	movi	r2,-1
 200bac8:	18800626 	beq	r3,r2,200bae4 <_lseek_r+0x54>
 200bacc:	1805883a 	mov	r2,r3
 200bad0:	dfc00217 	ldw	ra,8(sp)
 200bad4:	dc400117 	ldw	r17,4(sp)
 200bad8:	dc000017 	ldw	r16,0(sp)
 200badc:	dec00304 	addi	sp,sp,12
 200bae0:	f800283a 	ret
 200bae4:	80800017 	ldw	r2,0(r16)
 200bae8:	103ff826 	beq	r2,zero,200bacc <_lseek_r+0x3c>
 200baec:	88800015 	stw	r2,0(r17)
 200baf0:	1805883a 	mov	r2,r3
 200baf4:	dfc00217 	ldw	ra,8(sp)
 200baf8:	dc400117 	ldw	r17,4(sp)
 200bafc:	dc000017 	ldw	r16,0(sp)
 200bb00:	dec00304 	addi	sp,sp,12
 200bb04:	f800283a 	ret

0200bb08 <_read_r>:
 200bb08:	defffd04 	addi	sp,sp,-12
 200bb0c:	dc000015 	stw	r16,0(sp)
 200bb10:	04008074 	movhi	r16,513
 200bb14:	8414ed04 	addi	r16,r16,21428
 200bb18:	dc400115 	stw	r17,4(sp)
 200bb1c:	80000015 	stw	zero,0(r16)
 200bb20:	2023883a 	mov	r17,r4
 200bb24:	2809883a 	mov	r4,r5
 200bb28:	300b883a 	mov	r5,r6
 200bb2c:	380d883a 	mov	r6,r7
 200bb30:	dfc00215 	stw	ra,8(sp)
 200bb34:	200da400 	call	200da40 <read>
 200bb38:	1007883a 	mov	r3,r2
 200bb3c:	00bfffc4 	movi	r2,-1
 200bb40:	18800626 	beq	r3,r2,200bb5c <_read_r+0x54>
 200bb44:	1805883a 	mov	r2,r3
 200bb48:	dfc00217 	ldw	ra,8(sp)
 200bb4c:	dc400117 	ldw	r17,4(sp)
 200bb50:	dc000017 	ldw	r16,0(sp)
 200bb54:	dec00304 	addi	sp,sp,12
 200bb58:	f800283a 	ret
 200bb5c:	80800017 	ldw	r2,0(r16)
 200bb60:	103ff826 	beq	r2,zero,200bb44 <_read_r+0x3c>
 200bb64:	88800015 	stw	r2,0(r17)
 200bb68:	1805883a 	mov	r2,r3
 200bb6c:	dfc00217 	ldw	ra,8(sp)
 200bb70:	dc400117 	ldw	r17,4(sp)
 200bb74:	dc000017 	ldw	r16,0(sp)
 200bb78:	dec00304 	addi	sp,sp,12
 200bb7c:	f800283a 	ret

0200bb80 <__udivdi3>:
 200bb80:	defff104 	addi	sp,sp,-60
 200bb84:	0015883a 	mov	r10,zero
 200bb88:	2005883a 	mov	r2,r4
 200bb8c:	3011883a 	mov	r8,r6
 200bb90:	df000d15 	stw	fp,52(sp)
 200bb94:	dd400a15 	stw	r21,40(sp)
 200bb98:	dcc00815 	stw	r19,32(sp)
 200bb9c:	dfc00e15 	stw	ra,56(sp)
 200bba0:	ddc00c15 	stw	r23,48(sp)
 200bba4:	dd800b15 	stw	r22,44(sp)
 200bba8:	dd000915 	stw	r20,36(sp)
 200bbac:	dc800715 	stw	r18,28(sp)
 200bbb0:	dc400615 	stw	r17,24(sp)
 200bbb4:	dc000515 	stw	r16,20(sp)
 200bbb8:	da800315 	stw	r10,12(sp)
 200bbbc:	4027883a 	mov	r19,r8
 200bbc0:	1039883a 	mov	fp,r2
 200bbc4:	282b883a 	mov	r21,r5
 200bbc8:	da800415 	stw	r10,16(sp)
 200bbcc:	3800401e 	bne	r7,zero,200bcd0 <__udivdi3+0x150>
 200bbd0:	2a006536 	bltu	r5,r8,200bd68 <__udivdi3+0x1e8>
 200bbd4:	4000b526 	beq	r8,zero,200beac <__udivdi3+0x32c>
 200bbd8:	00bfffd4 	movui	r2,65535
 200bbdc:	14c0ad36 	bltu	r2,r19,200be94 <__udivdi3+0x314>
 200bbe0:	00803fc4 	movi	r2,255
 200bbe4:	14c15e36 	bltu	r2,r19,200c160 <__udivdi3+0x5e0>
 200bbe8:	000b883a 	mov	r5,zero
 200bbec:	0005883a 	mov	r2,zero
 200bbf0:	9884d83a 	srl	r2,r19,r2
 200bbf4:	01008074 	movhi	r4,513
 200bbf8:	2104db04 	addi	r4,r4,4972
 200bbfc:	01800804 	movi	r6,32
 200bc00:	1105883a 	add	r2,r2,r4
 200bc04:	10c00003 	ldbu	r3,0(r2)
 200bc08:	28c7883a 	add	r3,r5,r3
 200bc0c:	30e9c83a 	sub	r20,r6,r3
 200bc10:	a0010a1e 	bne	r20,zero,200c03c <__udivdi3+0x4bc>
 200bc14:	982ed43a 	srli	r23,r19,16
 200bc18:	acebc83a 	sub	r21,r21,r19
 200bc1c:	9dbfffcc 	andi	r22,r19,65535
 200bc20:	05000044 	movi	r20,1
 200bc24:	a809883a 	mov	r4,r21
 200bc28:	b80b883a 	mov	r5,r23
 200bc2c:	20040e00 	call	20040e0 <__udivsi3>
 200bc30:	100b883a 	mov	r5,r2
 200bc34:	b009883a 	mov	r4,r22
 200bc38:	1021883a 	mov	r16,r2
 200bc3c:	20040f00 	call	20040f0 <__mulsi3>
 200bc40:	a809883a 	mov	r4,r21
 200bc44:	b80b883a 	mov	r5,r23
 200bc48:	1023883a 	mov	r17,r2
 200bc4c:	20040e80 	call	20040e8 <__umodsi3>
 200bc50:	1004943a 	slli	r2,r2,16
 200bc54:	e006d43a 	srli	r3,fp,16
 200bc58:	10c4b03a 	or	r2,r2,r3
 200bc5c:	1440042e 	bgeu	r2,r17,200bc70 <__udivdi3+0xf0>
 200bc60:	14c5883a 	add	r2,r2,r19
 200bc64:	843fffc4 	addi	r16,r16,-1
 200bc68:	14c00136 	bltu	r2,r19,200bc70 <__udivdi3+0xf0>
 200bc6c:	14415c36 	bltu	r2,r17,200c1e0 <__udivdi3+0x660>
 200bc70:	1463c83a 	sub	r17,r2,r17
 200bc74:	8809883a 	mov	r4,r17
 200bc78:	b80b883a 	mov	r5,r23
 200bc7c:	20040e00 	call	20040e0 <__udivsi3>
 200bc80:	100b883a 	mov	r5,r2
 200bc84:	b009883a 	mov	r4,r22
 200bc88:	102b883a 	mov	r21,r2
 200bc8c:	20040f00 	call	20040f0 <__mulsi3>
 200bc90:	8809883a 	mov	r4,r17
 200bc94:	b80b883a 	mov	r5,r23
 200bc98:	1025883a 	mov	r18,r2
 200bc9c:	20040e80 	call	20040e8 <__umodsi3>
 200bca0:	1004943a 	slli	r2,r2,16
 200bca4:	e0ffffcc 	andi	r3,fp,65535
 200bca8:	10c4b03a 	or	r2,r2,r3
 200bcac:	1480042e 	bgeu	r2,r18,200bcc0 <__udivdi3+0x140>
 200bcb0:	9885883a 	add	r2,r19,r2
 200bcb4:	ad7fffc4 	addi	r21,r21,-1
 200bcb8:	14c00136 	bltu	r2,r19,200bcc0 <__udivdi3+0x140>
 200bcbc:	14813c36 	bltu	r2,r18,200c1b0 <__udivdi3+0x630>
 200bcc0:	8004943a 	slli	r2,r16,16
 200bcc4:	a009883a 	mov	r4,r20
 200bcc8:	a884b03a 	or	r2,r21,r2
 200bccc:	00001506 	br	200bd24 <__udivdi3+0x1a4>
 200bcd0:	380d883a 	mov	r6,r7
 200bcd4:	29c06c36 	bltu	r5,r7,200be88 <__udivdi3+0x308>
 200bcd8:	00bfffd4 	movui	r2,65535
 200bcdc:	11c06436 	bltu	r2,r7,200be70 <__udivdi3+0x2f0>
 200bce0:	00803fc4 	movi	r2,255
 200bce4:	11c11836 	bltu	r2,r7,200c148 <__udivdi3+0x5c8>
 200bce8:	000b883a 	mov	r5,zero
 200bcec:	0005883a 	mov	r2,zero
 200bcf0:	3084d83a 	srl	r2,r6,r2
 200bcf4:	01008074 	movhi	r4,513
 200bcf8:	2104db04 	addi	r4,r4,4972
 200bcfc:	01c00804 	movi	r7,32
 200bd00:	1105883a 	add	r2,r2,r4
 200bd04:	10c00003 	ldbu	r3,0(r2)
 200bd08:	28c7883a 	add	r3,r5,r3
 200bd0c:	38edc83a 	sub	r22,r7,r3
 200bd10:	b000731e 	bne	r22,zero,200bee0 <__udivdi3+0x360>
 200bd14:	35400136 	bltu	r6,r21,200bd1c <__udivdi3+0x19c>
 200bd18:	e4c05b36 	bltu	fp,r19,200be88 <__udivdi3+0x308>
 200bd1c:	00800044 	movi	r2,1
 200bd20:	0009883a 	mov	r4,zero
 200bd24:	d8800315 	stw	r2,12(sp)
 200bd28:	d9400317 	ldw	r5,12(sp)
 200bd2c:	d9000415 	stw	r4,16(sp)
 200bd30:	2007883a 	mov	r3,r4
 200bd34:	2805883a 	mov	r2,r5
 200bd38:	dfc00e17 	ldw	ra,56(sp)
 200bd3c:	df000d17 	ldw	fp,52(sp)
 200bd40:	ddc00c17 	ldw	r23,48(sp)
 200bd44:	dd800b17 	ldw	r22,44(sp)
 200bd48:	dd400a17 	ldw	r21,40(sp)
 200bd4c:	dd000917 	ldw	r20,36(sp)
 200bd50:	dcc00817 	ldw	r19,32(sp)
 200bd54:	dc800717 	ldw	r18,28(sp)
 200bd58:	dc400617 	ldw	r17,24(sp)
 200bd5c:	dc000517 	ldw	r16,20(sp)
 200bd60:	dec00f04 	addi	sp,sp,60
 200bd64:	f800283a 	ret
 200bd68:	00bfffd4 	movui	r2,65535
 200bd6c:	12005636 	bltu	r2,r8,200bec8 <__udivdi3+0x348>
 200bd70:	00803fc4 	movi	r2,255
 200bd74:	12010036 	bltu	r2,r8,200c178 <__udivdi3+0x5f8>
 200bd78:	000b883a 	mov	r5,zero
 200bd7c:	0005883a 	mov	r2,zero
 200bd80:	9884d83a 	srl	r2,r19,r2
 200bd84:	01008074 	movhi	r4,513
 200bd88:	2104db04 	addi	r4,r4,4972
 200bd8c:	01800804 	movi	r6,32
 200bd90:	1105883a 	add	r2,r2,r4
 200bd94:	10c00003 	ldbu	r3,0(r2)
 200bd98:	28c7883a 	add	r3,r5,r3
 200bd9c:	30cbc83a 	sub	r5,r6,r3
 200bda0:	28000626 	beq	r5,zero,200bdbc <__udivdi3+0x23c>
 200bda4:	3145c83a 	sub	r2,r6,r5
 200bda8:	e084d83a 	srl	r2,fp,r2
 200bdac:	a946983a 	sll	r3,r21,r5
 200bdb0:	e178983a 	sll	fp,fp,r5
 200bdb4:	9966983a 	sll	r19,r19,r5
 200bdb8:	18aab03a 	or	r21,r3,r2
 200bdbc:	982ed43a 	srli	r23,r19,16
 200bdc0:	a809883a 	mov	r4,r21
 200bdc4:	9cbfffcc 	andi	r18,r19,65535
 200bdc8:	b80b883a 	mov	r5,r23
 200bdcc:	20040e00 	call	20040e0 <__udivsi3>
 200bdd0:	100b883a 	mov	r5,r2
 200bdd4:	9009883a 	mov	r4,r18
 200bdd8:	1021883a 	mov	r16,r2
 200bddc:	20040f00 	call	20040f0 <__mulsi3>
 200bde0:	a809883a 	mov	r4,r21
 200bde4:	b80b883a 	mov	r5,r23
 200bde8:	1023883a 	mov	r17,r2
 200bdec:	20040e80 	call	20040e8 <__umodsi3>
 200bdf0:	1004943a 	slli	r2,r2,16
 200bdf4:	e006d43a 	srli	r3,fp,16
 200bdf8:	10c4b03a 	or	r2,r2,r3
 200bdfc:	1440042e 	bgeu	r2,r17,200be10 <__udivdi3+0x290>
 200be00:	14c5883a 	add	r2,r2,r19
 200be04:	843fffc4 	addi	r16,r16,-1
 200be08:	14c00136 	bltu	r2,r19,200be10 <__udivdi3+0x290>
 200be0c:	1440ea36 	bltu	r2,r17,200c1b8 <__udivdi3+0x638>
 200be10:	1463c83a 	sub	r17,r2,r17
 200be14:	8809883a 	mov	r4,r17
 200be18:	b80b883a 	mov	r5,r23
 200be1c:	20040e00 	call	20040e0 <__udivsi3>
 200be20:	100b883a 	mov	r5,r2
 200be24:	9009883a 	mov	r4,r18
 200be28:	102b883a 	mov	r21,r2
 200be2c:	20040f00 	call	20040f0 <__mulsi3>
 200be30:	8809883a 	mov	r4,r17
 200be34:	b80b883a 	mov	r5,r23
 200be38:	1025883a 	mov	r18,r2
 200be3c:	20040e80 	call	20040e8 <__umodsi3>
 200be40:	1004943a 	slli	r2,r2,16
 200be44:	e0ffffcc 	andi	r3,fp,65535
 200be48:	10c4b03a 	or	r2,r2,r3
 200be4c:	1480042e 	bgeu	r2,r18,200be60 <__udivdi3+0x2e0>
 200be50:	9885883a 	add	r2,r19,r2
 200be54:	ad7fffc4 	addi	r21,r21,-1
 200be58:	14c00136 	bltu	r2,r19,200be60 <__udivdi3+0x2e0>
 200be5c:	1480d936 	bltu	r2,r18,200c1c4 <__udivdi3+0x644>
 200be60:	8004943a 	slli	r2,r16,16
 200be64:	0009883a 	mov	r4,zero
 200be68:	a884b03a 	or	r2,r21,r2
 200be6c:	003fad06 	br	200bd24 <__udivdi3+0x1a4>
 200be70:	00804034 	movhi	r2,256
 200be74:	10bfffc4 	addi	r2,r2,-1
 200be78:	11c0b636 	bltu	r2,r7,200c154 <__udivdi3+0x5d4>
 200be7c:	01400404 	movi	r5,16
 200be80:	2805883a 	mov	r2,r5
 200be84:	003f9a06 	br	200bcf0 <__udivdi3+0x170>
 200be88:	0005883a 	mov	r2,zero
 200be8c:	0009883a 	mov	r4,zero
 200be90:	003fa406 	br	200bd24 <__udivdi3+0x1a4>
 200be94:	00804034 	movhi	r2,256
 200be98:	10bfffc4 	addi	r2,r2,-1
 200be9c:	14c0b336 	bltu	r2,r19,200c16c <__udivdi3+0x5ec>
 200bea0:	01400404 	movi	r5,16
 200bea4:	2805883a 	mov	r2,r5
 200bea8:	003f5106 	br	200bbf0 <__udivdi3+0x70>
 200beac:	01000044 	movi	r4,1
 200beb0:	000b883a 	mov	r5,zero
 200beb4:	20040e00 	call	20040e0 <__udivsi3>
 200beb8:	1027883a 	mov	r19,r2
 200bebc:	00bfffd4 	movui	r2,65535
 200bec0:	14fff436 	bltu	r2,r19,200be94 <__udivdi3+0x314>
 200bec4:	003f4606 	br	200bbe0 <__udivdi3+0x60>
 200bec8:	00804034 	movhi	r2,256
 200becc:	10bfffc4 	addi	r2,r2,-1
 200bed0:	1200ac36 	bltu	r2,r8,200c184 <__udivdi3+0x604>
 200bed4:	01400404 	movi	r5,16
 200bed8:	2805883a 	mov	r2,r5
 200bedc:	003fa806 	br	200bd80 <__udivdi3+0x200>
 200bee0:	3d85c83a 	sub	r2,r7,r22
 200bee4:	3588983a 	sll	r4,r6,r22
 200bee8:	9886d83a 	srl	r3,r19,r2
 200beec:	a8a2d83a 	srl	r17,r21,r2
 200bef0:	e084d83a 	srl	r2,fp,r2
 200bef4:	20eeb03a 	or	r23,r4,r3
 200bef8:	b824d43a 	srli	r18,r23,16
 200befc:	ad86983a 	sll	r3,r21,r22
 200bf00:	8809883a 	mov	r4,r17
 200bf04:	900b883a 	mov	r5,r18
 200bf08:	1886b03a 	or	r3,r3,r2
 200bf0c:	d8c00115 	stw	r3,4(sp)
 200bf10:	bc3fffcc 	andi	r16,r23,65535
 200bf14:	20040e00 	call	20040e0 <__udivsi3>
 200bf18:	100b883a 	mov	r5,r2
 200bf1c:	8009883a 	mov	r4,r16
 200bf20:	1029883a 	mov	r20,r2
 200bf24:	20040f00 	call	20040f0 <__mulsi3>
 200bf28:	900b883a 	mov	r5,r18
 200bf2c:	8809883a 	mov	r4,r17
 200bf30:	102b883a 	mov	r21,r2
 200bf34:	20040e80 	call	20040e8 <__umodsi3>
 200bf38:	d9400117 	ldw	r5,4(sp)
 200bf3c:	1004943a 	slli	r2,r2,16
 200bf40:	9da6983a 	sll	r19,r19,r22
 200bf44:	2806d43a 	srli	r3,r5,16
 200bf48:	10c4b03a 	or	r2,r2,r3
 200bf4c:	1540032e 	bgeu	r2,r21,200bf5c <__udivdi3+0x3dc>
 200bf50:	15c5883a 	add	r2,r2,r23
 200bf54:	a53fffc4 	addi	r20,r20,-1
 200bf58:	15c0912e 	bgeu	r2,r23,200c1a0 <__udivdi3+0x620>
 200bf5c:	1563c83a 	sub	r17,r2,r21
 200bf60:	8809883a 	mov	r4,r17
 200bf64:	900b883a 	mov	r5,r18
 200bf68:	20040e00 	call	20040e0 <__udivsi3>
 200bf6c:	100b883a 	mov	r5,r2
 200bf70:	8009883a 	mov	r4,r16
 200bf74:	102b883a 	mov	r21,r2
 200bf78:	20040f00 	call	20040f0 <__mulsi3>
 200bf7c:	8809883a 	mov	r4,r17
 200bf80:	900b883a 	mov	r5,r18
 200bf84:	1021883a 	mov	r16,r2
 200bf88:	20040e80 	call	20040e8 <__umodsi3>
 200bf8c:	da800117 	ldw	r10,4(sp)
 200bf90:	1004943a 	slli	r2,r2,16
 200bf94:	50ffffcc 	andi	r3,r10,65535
 200bf98:	10c6b03a 	or	r3,r2,r3
 200bf9c:	1c00032e 	bgeu	r3,r16,200bfac <__udivdi3+0x42c>
 200bfa0:	1dc7883a 	add	r3,r3,r23
 200bfa4:	ad7fffc4 	addi	r21,r21,-1
 200bfa8:	1dc0792e 	bgeu	r3,r23,200c190 <__udivdi3+0x610>
 200bfac:	a004943a 	slli	r2,r20,16
 200bfb0:	982ed43a 	srli	r23,r19,16
 200bfb4:	9cffffcc 	andi	r19,r19,65535
 200bfb8:	a8a4b03a 	or	r18,r21,r2
 200bfbc:	947fffcc 	andi	r17,r18,65535
 200bfc0:	902ad43a 	srli	r21,r18,16
 200bfc4:	8809883a 	mov	r4,r17
 200bfc8:	980b883a 	mov	r5,r19
 200bfcc:	1c21c83a 	sub	r16,r3,r16
 200bfd0:	20040f00 	call	20040f0 <__mulsi3>
 200bfd4:	8809883a 	mov	r4,r17
 200bfd8:	b80b883a 	mov	r5,r23
 200bfdc:	1029883a 	mov	r20,r2
 200bfe0:	20040f00 	call	20040f0 <__mulsi3>
 200bfe4:	980b883a 	mov	r5,r19
 200bfe8:	a809883a 	mov	r4,r21
 200bfec:	1023883a 	mov	r17,r2
 200bff0:	20040f00 	call	20040f0 <__mulsi3>
 200bff4:	a809883a 	mov	r4,r21
 200bff8:	b80b883a 	mov	r5,r23
 200bffc:	1027883a 	mov	r19,r2
 200c000:	20040f00 	call	20040f0 <__mulsi3>
 200c004:	1009883a 	mov	r4,r2
 200c008:	a004d43a 	srli	r2,r20,16
 200c00c:	8ce3883a 	add	r17,r17,r19
 200c010:	1447883a 	add	r3,r2,r17
 200c014:	1cc0022e 	bgeu	r3,r19,200c020 <__udivdi3+0x4a0>
 200c018:	00800074 	movhi	r2,1
 200c01c:	2089883a 	add	r4,r4,r2
 200c020:	1804d43a 	srli	r2,r3,16
 200c024:	2085883a 	add	r2,r4,r2
 200c028:	80804436 	bltu	r16,r2,200c13c <__udivdi3+0x5bc>
 200c02c:	80803e26 	beq	r16,r2,200c128 <__udivdi3+0x5a8>
 200c030:	9005883a 	mov	r2,r18
 200c034:	0009883a 	mov	r4,zero
 200c038:	003f3a06 	br	200bd24 <__udivdi3+0x1a4>
 200c03c:	9d26983a 	sll	r19,r19,r20
 200c040:	3505c83a 	sub	r2,r6,r20
 200c044:	a8a2d83a 	srl	r17,r21,r2
 200c048:	982ed43a 	srli	r23,r19,16
 200c04c:	e084d83a 	srl	r2,fp,r2
 200c050:	ad06983a 	sll	r3,r21,r20
 200c054:	8809883a 	mov	r4,r17
 200c058:	b80b883a 	mov	r5,r23
 200c05c:	1886b03a 	or	r3,r3,r2
 200c060:	d8c00015 	stw	r3,0(sp)
 200c064:	9dbfffcc 	andi	r22,r19,65535
 200c068:	20040e00 	call	20040e0 <__udivsi3>
 200c06c:	100b883a 	mov	r5,r2
 200c070:	b009883a 	mov	r4,r22
 200c074:	d8800215 	stw	r2,8(sp)
 200c078:	20040f00 	call	20040f0 <__mulsi3>
 200c07c:	8809883a 	mov	r4,r17
 200c080:	b80b883a 	mov	r5,r23
 200c084:	102b883a 	mov	r21,r2
 200c088:	20040e80 	call	20040e8 <__umodsi3>
 200c08c:	d9000017 	ldw	r4,0(sp)
 200c090:	1004943a 	slli	r2,r2,16
 200c094:	2006d43a 	srli	r3,r4,16
 200c098:	10c4b03a 	or	r2,r2,r3
 200c09c:	1540052e 	bgeu	r2,r21,200c0b4 <__udivdi3+0x534>
 200c0a0:	d9400217 	ldw	r5,8(sp)
 200c0a4:	14c5883a 	add	r2,r2,r19
 200c0a8:	297fffc4 	addi	r5,r5,-1
 200c0ac:	d9400215 	stw	r5,8(sp)
 200c0b0:	14c0462e 	bgeu	r2,r19,200c1cc <__udivdi3+0x64c>
 200c0b4:	1563c83a 	sub	r17,r2,r21
 200c0b8:	8809883a 	mov	r4,r17
 200c0bc:	b80b883a 	mov	r5,r23
 200c0c0:	20040e00 	call	20040e0 <__udivsi3>
 200c0c4:	100b883a 	mov	r5,r2
 200c0c8:	b009883a 	mov	r4,r22
 200c0cc:	1025883a 	mov	r18,r2
 200c0d0:	20040f00 	call	20040f0 <__mulsi3>
 200c0d4:	8809883a 	mov	r4,r17
 200c0d8:	b80b883a 	mov	r5,r23
 200c0dc:	1021883a 	mov	r16,r2
 200c0e0:	20040e80 	call	20040e8 <__umodsi3>
 200c0e4:	da800017 	ldw	r10,0(sp)
 200c0e8:	1004943a 	slli	r2,r2,16
 200c0ec:	50ffffcc 	andi	r3,r10,65535
 200c0f0:	10c6b03a 	or	r3,r2,r3
 200c0f4:	1c00062e 	bgeu	r3,r16,200c110 <__udivdi3+0x590>
 200c0f8:	1cc7883a 	add	r3,r3,r19
 200c0fc:	94bfffc4 	addi	r18,r18,-1
 200c100:	1cc00336 	bltu	r3,r19,200c110 <__udivdi3+0x590>
 200c104:	1c00022e 	bgeu	r3,r16,200c110 <__udivdi3+0x590>
 200c108:	94bfffc4 	addi	r18,r18,-1
 200c10c:	1cc7883a 	add	r3,r3,r19
 200c110:	d9000217 	ldw	r4,8(sp)
 200c114:	e538983a 	sll	fp,fp,r20
 200c118:	1c2bc83a 	sub	r21,r3,r16
 200c11c:	2004943a 	slli	r2,r4,16
 200c120:	90a8b03a 	or	r20,r18,r2
 200c124:	003ebf06 	br	200bc24 <__udivdi3+0xa4>
 200c128:	1804943a 	slli	r2,r3,16
 200c12c:	e588983a 	sll	r4,fp,r22
 200c130:	a0ffffcc 	andi	r3,r20,65535
 200c134:	10c5883a 	add	r2,r2,r3
 200c138:	20bfbd2e 	bgeu	r4,r2,200c030 <__udivdi3+0x4b0>
 200c13c:	90bfffc4 	addi	r2,r18,-1
 200c140:	0009883a 	mov	r4,zero
 200c144:	003ef706 	br	200bd24 <__udivdi3+0x1a4>
 200c148:	01400204 	movi	r5,8
 200c14c:	2805883a 	mov	r2,r5
 200c150:	003ee706 	br	200bcf0 <__udivdi3+0x170>
 200c154:	01400604 	movi	r5,24
 200c158:	2805883a 	mov	r2,r5
 200c15c:	003ee406 	br	200bcf0 <__udivdi3+0x170>
 200c160:	01400204 	movi	r5,8
 200c164:	2805883a 	mov	r2,r5
 200c168:	003ea106 	br	200bbf0 <__udivdi3+0x70>
 200c16c:	01400604 	movi	r5,24
 200c170:	2805883a 	mov	r2,r5
 200c174:	003e9e06 	br	200bbf0 <__udivdi3+0x70>
 200c178:	01400204 	movi	r5,8
 200c17c:	2805883a 	mov	r2,r5
 200c180:	003eff06 	br	200bd80 <__udivdi3+0x200>
 200c184:	01400604 	movi	r5,24
 200c188:	2805883a 	mov	r2,r5
 200c18c:	003efc06 	br	200bd80 <__udivdi3+0x200>
 200c190:	1c3f862e 	bgeu	r3,r16,200bfac <__udivdi3+0x42c>
 200c194:	1dc7883a 	add	r3,r3,r23
 200c198:	ad7fffc4 	addi	r21,r21,-1
 200c19c:	003f8306 	br	200bfac <__udivdi3+0x42c>
 200c1a0:	157f6e2e 	bgeu	r2,r21,200bf5c <__udivdi3+0x3dc>
 200c1a4:	a53fffc4 	addi	r20,r20,-1
 200c1a8:	15c5883a 	add	r2,r2,r23
 200c1ac:	003f6b06 	br	200bf5c <__udivdi3+0x3dc>
 200c1b0:	ad7fffc4 	addi	r21,r21,-1
 200c1b4:	003ec206 	br	200bcc0 <__udivdi3+0x140>
 200c1b8:	843fffc4 	addi	r16,r16,-1
 200c1bc:	14c5883a 	add	r2,r2,r19
 200c1c0:	003f1306 	br	200be10 <__udivdi3+0x290>
 200c1c4:	ad7fffc4 	addi	r21,r21,-1
 200c1c8:	003f2506 	br	200be60 <__udivdi3+0x2e0>
 200c1cc:	157fb92e 	bgeu	r2,r21,200c0b4 <__udivdi3+0x534>
 200c1d0:	297fffc4 	addi	r5,r5,-1
 200c1d4:	14c5883a 	add	r2,r2,r19
 200c1d8:	d9400215 	stw	r5,8(sp)
 200c1dc:	003fb506 	br	200c0b4 <__udivdi3+0x534>
 200c1e0:	843fffc4 	addi	r16,r16,-1
 200c1e4:	14c5883a 	add	r2,r2,r19
 200c1e8:	003ea106 	br	200bc70 <__udivdi3+0xf0>

0200c1ec <__umoddi3>:
 200c1ec:	defff004 	addi	sp,sp,-64
 200c1f0:	3011883a 	mov	r8,r6
 200c1f4:	000d883a 	mov	r6,zero
 200c1f8:	dd400b15 	stw	r21,44(sp)
 200c1fc:	dcc00915 	stw	r19,36(sp)
 200c200:	dc000615 	stw	r16,24(sp)
 200c204:	dfc00f15 	stw	ra,60(sp)
 200c208:	df000e15 	stw	fp,56(sp)
 200c20c:	ddc00d15 	stw	r23,52(sp)
 200c210:	dd800c15 	stw	r22,48(sp)
 200c214:	dd000a15 	stw	r20,40(sp)
 200c218:	dc800815 	stw	r18,32(sp)
 200c21c:	dc400715 	stw	r17,28(sp)
 200c220:	2817883a 	mov	r11,r5
 200c224:	d9800415 	stw	r6,16(sp)
 200c228:	4027883a 	mov	r19,r8
 200c22c:	d9800515 	stw	r6,20(sp)
 200c230:	2021883a 	mov	r16,r4
 200c234:	282b883a 	mov	r21,r5
 200c238:	38002c1e 	bne	r7,zero,200c2ec <__umoddi3+0x100>
 200c23c:	2a005636 	bltu	r5,r8,200c398 <__umoddi3+0x1ac>
 200c240:	40009a26 	beq	r8,zero,200c4ac <__umoddi3+0x2c0>
 200c244:	00bfffd4 	movui	r2,65535
 200c248:	14c09236 	bltu	r2,r19,200c494 <__umoddi3+0x2a8>
 200c24c:	00803fc4 	movi	r2,255
 200c250:	14c15c36 	bltu	r2,r19,200c7c4 <__umoddi3+0x5d8>
 200c254:	000b883a 	mov	r5,zero
 200c258:	0005883a 	mov	r2,zero
 200c25c:	9884d83a 	srl	r2,r19,r2
 200c260:	01008074 	movhi	r4,513
 200c264:	2104db04 	addi	r4,r4,4972
 200c268:	01800804 	movi	r6,32
 200c26c:	1105883a 	add	r2,r2,r4
 200c270:	10c00003 	ldbu	r3,0(r2)
 200c274:	28c7883a 	add	r3,r5,r3
 200c278:	30e5c83a 	sub	r18,r6,r3
 200c27c:	9000a41e 	bne	r18,zero,200c510 <__umoddi3+0x324>
 200c280:	982ed43a 	srli	r23,r19,16
 200c284:	acebc83a 	sub	r21,r21,r19
 200c288:	9d3fffcc 	andi	r20,r19,65535
 200c28c:	002d883a 	mov	r22,zero
 200c290:	a809883a 	mov	r4,r21
 200c294:	b80b883a 	mov	r5,r23
 200c298:	20040e00 	call	20040e0 <__udivsi3>
 200c29c:	100b883a 	mov	r5,r2
 200c2a0:	a009883a 	mov	r4,r20
 200c2a4:	20040f00 	call	20040f0 <__mulsi3>
 200c2a8:	a809883a 	mov	r4,r21
 200c2ac:	b80b883a 	mov	r5,r23
 200c2b0:	1023883a 	mov	r17,r2
 200c2b4:	20040e80 	call	20040e8 <__umodsi3>
 200c2b8:	1004943a 	slli	r2,r2,16
 200c2bc:	8006d43a 	srli	r3,r16,16
 200c2c0:	10c4b03a 	or	r2,r2,r3
 200c2c4:	1440032e 	bgeu	r2,r17,200c2d4 <__umoddi3+0xe8>
 200c2c8:	14c5883a 	add	r2,r2,r19
 200c2cc:	14c00136 	bltu	r2,r19,200c2d4 <__umoddi3+0xe8>
 200c2d0:	14415836 	bltu	r2,r17,200c834 <__umoddi3+0x648>
 200c2d4:	1463c83a 	sub	r17,r2,r17
 200c2d8:	8809883a 	mov	r4,r17
 200c2dc:	b80b883a 	mov	r5,r23
 200c2e0:	20040e00 	call	20040e0 <__udivsi3>
 200c2e4:	a009883a 	mov	r4,r20
 200c2e8:	00005306 	br	200c438 <__umoddi3+0x24c>
 200c2ec:	380d883a 	mov	r6,r7
 200c2f0:	29c0132e 	bgeu	r5,r7,200c340 <__umoddi3+0x154>
 200c2f4:	d9000415 	stw	r4,16(sp)
 200c2f8:	d9400515 	stw	r5,20(sp)
 200c2fc:	d9400417 	ldw	r5,16(sp)
 200c300:	5813883a 	mov	r9,r11
 200c304:	2811883a 	mov	r8,r5
 200c308:	4005883a 	mov	r2,r8
 200c30c:	4807883a 	mov	r3,r9
 200c310:	dfc00f17 	ldw	ra,60(sp)
 200c314:	df000e17 	ldw	fp,56(sp)
 200c318:	ddc00d17 	ldw	r23,52(sp)
 200c31c:	dd800c17 	ldw	r22,48(sp)
 200c320:	dd400b17 	ldw	r21,44(sp)
 200c324:	dd000a17 	ldw	r20,40(sp)
 200c328:	dcc00917 	ldw	r19,36(sp)
 200c32c:	dc800817 	ldw	r18,32(sp)
 200c330:	dc400717 	ldw	r17,28(sp)
 200c334:	dc000617 	ldw	r16,24(sp)
 200c338:	dec01004 	addi	sp,sp,64
 200c33c:	f800283a 	ret
 200c340:	00bfffd4 	movui	r2,65535
 200c344:	11c06636 	bltu	r2,r7,200c4e0 <__umoddi3+0x2f4>
 200c348:	00803fc4 	movi	r2,255
 200c34c:	11c12036 	bltu	r2,r7,200c7d0 <__umoddi3+0x5e4>
 200c350:	000b883a 	mov	r5,zero
 200c354:	0005883a 	mov	r2,zero
 200c358:	3084d83a 	srl	r2,r6,r2
 200c35c:	01008074 	movhi	r4,513
 200c360:	2104db04 	addi	r4,r4,4972
 200c364:	01c00804 	movi	r7,32
 200c368:	1105883a 	add	r2,r2,r4
 200c36c:	10c00003 	ldbu	r3,0(r2)
 200c370:	28c7883a 	add	r3,r5,r3
 200c374:	38e5c83a 	sub	r18,r7,r3
 200c378:	9000941e 	bne	r18,zero,200c5cc <__umoddi3+0x3e0>
 200c37c:	35405e36 	bltu	r6,r21,200c4f8 <__umoddi3+0x30c>
 200c380:	84c05d2e 	bgeu	r16,r19,200c4f8 <__umoddi3+0x30c>
 200c384:	8011883a 	mov	r8,r16
 200c388:	a813883a 	mov	r9,r21
 200c38c:	dc000415 	stw	r16,16(sp)
 200c390:	dd400515 	stw	r21,20(sp)
 200c394:	003fdc06 	br	200c308 <__umoddi3+0x11c>
 200c398:	00bfffd4 	movui	r2,65535
 200c39c:	12004a36 	bltu	r2,r8,200c4c8 <__umoddi3+0x2dc>
 200c3a0:	00803fc4 	movi	r2,255
 200c3a4:	12010d36 	bltu	r2,r8,200c7dc <__umoddi3+0x5f0>
 200c3a8:	000b883a 	mov	r5,zero
 200c3ac:	0005883a 	mov	r2,zero
 200c3b0:	9884d83a 	srl	r2,r19,r2
 200c3b4:	01008074 	movhi	r4,513
 200c3b8:	2104db04 	addi	r4,r4,4972
 200c3bc:	01800804 	movi	r6,32
 200c3c0:	1105883a 	add	r2,r2,r4
 200c3c4:	10c00003 	ldbu	r3,0(r2)
 200c3c8:	28c7883a 	add	r3,r5,r3
 200c3cc:	30c7c83a 	sub	r3,r6,r3
 200c3d0:	1800dc1e 	bne	r3,zero,200c744 <__umoddi3+0x558>
 200c3d4:	002d883a 	mov	r22,zero
 200c3d8:	982ed43a 	srli	r23,r19,16
 200c3dc:	a809883a 	mov	r4,r21
 200c3e0:	9cbfffcc 	andi	r18,r19,65535
 200c3e4:	b80b883a 	mov	r5,r23
 200c3e8:	20040e00 	call	20040e0 <__udivsi3>
 200c3ec:	100b883a 	mov	r5,r2
 200c3f0:	9009883a 	mov	r4,r18
 200c3f4:	20040f00 	call	20040f0 <__mulsi3>
 200c3f8:	a809883a 	mov	r4,r21
 200c3fc:	b80b883a 	mov	r5,r23
 200c400:	1023883a 	mov	r17,r2
 200c404:	20040e80 	call	20040e8 <__umodsi3>
 200c408:	1004943a 	slli	r2,r2,16
 200c40c:	8006d43a 	srli	r3,r16,16
 200c410:	10c4b03a 	or	r2,r2,r3
 200c414:	1440032e 	bgeu	r2,r17,200c424 <__umoddi3+0x238>
 200c418:	14c5883a 	add	r2,r2,r19
 200c41c:	14c00136 	bltu	r2,r19,200c424 <__umoddi3+0x238>
 200c420:	14410236 	bltu	r2,r17,200c82c <__umoddi3+0x640>
 200c424:	1463c83a 	sub	r17,r2,r17
 200c428:	8809883a 	mov	r4,r17
 200c42c:	b80b883a 	mov	r5,r23
 200c430:	20040e00 	call	20040e0 <__udivsi3>
 200c434:	9009883a 	mov	r4,r18
 200c438:	100b883a 	mov	r5,r2
 200c43c:	20040f00 	call	20040f0 <__mulsi3>
 200c440:	8809883a 	mov	r4,r17
 200c444:	b80b883a 	mov	r5,r23
 200c448:	102b883a 	mov	r21,r2
 200c44c:	20040e80 	call	20040e8 <__umodsi3>
 200c450:	1004943a 	slli	r2,r2,16
 200c454:	80ffffcc 	andi	r3,r16,65535
 200c458:	10c4b03a 	or	r2,r2,r3
 200c45c:	1540042e 	bgeu	r2,r21,200c470 <__umoddi3+0x284>
 200c460:	14c5883a 	add	r2,r2,r19
 200c464:	14c00236 	bltu	r2,r19,200c470 <__umoddi3+0x284>
 200c468:	1540012e 	bgeu	r2,r21,200c470 <__umoddi3+0x284>
 200c46c:	14c5883a 	add	r2,r2,r19
 200c470:	1545c83a 	sub	r2,r2,r21
 200c474:	1584d83a 	srl	r2,r2,r22
 200c478:	0013883a 	mov	r9,zero
 200c47c:	d8800415 	stw	r2,16(sp)
 200c480:	d8c00417 	ldw	r3,16(sp)
 200c484:	0005883a 	mov	r2,zero
 200c488:	d8800515 	stw	r2,20(sp)
 200c48c:	1811883a 	mov	r8,r3
 200c490:	003f9d06 	br	200c308 <__umoddi3+0x11c>
 200c494:	00804034 	movhi	r2,256
 200c498:	10bfffc4 	addi	r2,r2,-1
 200c49c:	14c0c636 	bltu	r2,r19,200c7b8 <__umoddi3+0x5cc>
 200c4a0:	01400404 	movi	r5,16
 200c4a4:	2805883a 	mov	r2,r5
 200c4a8:	003f6c06 	br	200c25c <__umoddi3+0x70>
 200c4ac:	01000044 	movi	r4,1
 200c4b0:	000b883a 	mov	r5,zero
 200c4b4:	20040e00 	call	20040e0 <__udivsi3>
 200c4b8:	1027883a 	mov	r19,r2
 200c4bc:	00bfffd4 	movui	r2,65535
 200c4c0:	14fff436 	bltu	r2,r19,200c494 <__umoddi3+0x2a8>
 200c4c4:	003f6106 	br	200c24c <__umoddi3+0x60>
 200c4c8:	00804034 	movhi	r2,256
 200c4cc:	10bfffc4 	addi	r2,r2,-1
 200c4d0:	1200c536 	bltu	r2,r8,200c7e8 <__umoddi3+0x5fc>
 200c4d4:	01400404 	movi	r5,16
 200c4d8:	2805883a 	mov	r2,r5
 200c4dc:	003fb406 	br	200c3b0 <__umoddi3+0x1c4>
 200c4e0:	00804034 	movhi	r2,256
 200c4e4:	10bfffc4 	addi	r2,r2,-1
 200c4e8:	11c0c236 	bltu	r2,r7,200c7f4 <__umoddi3+0x608>
 200c4ec:	01400404 	movi	r5,16
 200c4f0:	2805883a 	mov	r2,r5
 200c4f4:	003f9806 	br	200c358 <__umoddi3+0x16c>
 200c4f8:	84c9c83a 	sub	r4,r16,r19
 200c4fc:	8105803a 	cmpltu	r2,r16,r4
 200c500:	a987c83a 	sub	r3,r21,r6
 200c504:	18abc83a 	sub	r21,r3,r2
 200c508:	2021883a 	mov	r16,r4
 200c50c:	003f9d06 	br	200c384 <__umoddi3+0x198>
 200c510:	9ca6983a 	sll	r19,r19,r18
 200c514:	3485c83a 	sub	r2,r6,r18
 200c518:	a8a2d83a 	srl	r17,r21,r2
 200c51c:	982ed43a 	srli	r23,r19,16
 200c520:	ac86983a 	sll	r3,r21,r18
 200c524:	8084d83a 	srl	r2,r16,r2
 200c528:	8809883a 	mov	r4,r17
 200c52c:	b80b883a 	mov	r5,r23
 200c530:	18b8b03a 	or	fp,r3,r2
 200c534:	9d3fffcc 	andi	r20,r19,65535
 200c538:	20040e00 	call	20040e0 <__udivsi3>
 200c53c:	100b883a 	mov	r5,r2
 200c540:	a009883a 	mov	r4,r20
 200c544:	20040f00 	call	20040f0 <__mulsi3>
 200c548:	8809883a 	mov	r4,r17
 200c54c:	b80b883a 	mov	r5,r23
 200c550:	102b883a 	mov	r21,r2
 200c554:	20040e80 	call	20040e8 <__umodsi3>
 200c558:	1004943a 	slli	r2,r2,16
 200c55c:	e006d43a 	srli	r3,fp,16
 200c560:	902d883a 	mov	r22,r18
 200c564:	10c4b03a 	or	r2,r2,r3
 200c568:	1540022e 	bgeu	r2,r21,200c574 <__umoddi3+0x388>
 200c56c:	14c5883a 	add	r2,r2,r19
 200c570:	14c0ab2e 	bgeu	r2,r19,200c820 <__umoddi3+0x634>
 200c574:	1563c83a 	sub	r17,r2,r21
 200c578:	8809883a 	mov	r4,r17
 200c57c:	b80b883a 	mov	r5,r23
 200c580:	20040e00 	call	20040e0 <__udivsi3>
 200c584:	100b883a 	mov	r5,r2
 200c588:	a009883a 	mov	r4,r20
 200c58c:	20040f00 	call	20040f0 <__mulsi3>
 200c590:	8809883a 	mov	r4,r17
 200c594:	b80b883a 	mov	r5,r23
 200c598:	102b883a 	mov	r21,r2
 200c59c:	20040e80 	call	20040e8 <__umodsi3>
 200c5a0:	1004943a 	slli	r2,r2,16
 200c5a4:	e0ffffcc 	andi	r3,fp,65535
 200c5a8:	10c4b03a 	or	r2,r2,r3
 200c5ac:	1540042e 	bgeu	r2,r21,200c5c0 <__umoddi3+0x3d4>
 200c5b0:	14c5883a 	add	r2,r2,r19
 200c5b4:	14c00236 	bltu	r2,r19,200c5c0 <__umoddi3+0x3d4>
 200c5b8:	1540012e 	bgeu	r2,r21,200c5c0 <__umoddi3+0x3d4>
 200c5bc:	14c5883a 	add	r2,r2,r19
 200c5c0:	84a0983a 	sll	r16,r16,r18
 200c5c4:	156bc83a 	sub	r21,r2,r21
 200c5c8:	003f3106 	br	200c290 <__umoddi3+0xa4>
 200c5cc:	3c8fc83a 	sub	r7,r7,r18
 200c5d0:	3486983a 	sll	r3,r6,r18
 200c5d4:	99c4d83a 	srl	r2,r19,r7
 200c5d8:	a9e2d83a 	srl	r17,r21,r7
 200c5dc:	ac8c983a 	sll	r6,r21,r18
 200c5e0:	18acb03a 	or	r22,r3,r2
 200c5e4:	b02ed43a 	srli	r23,r22,16
 200c5e8:	81c4d83a 	srl	r2,r16,r7
 200c5ec:	8809883a 	mov	r4,r17
 200c5f0:	b80b883a 	mov	r5,r23
 200c5f4:	308cb03a 	or	r6,r6,r2
 200c5f8:	d9c00315 	stw	r7,12(sp)
 200c5fc:	d9800215 	stw	r6,8(sp)
 200c600:	b53fffcc 	andi	r20,r22,65535
 200c604:	20040e00 	call	20040e0 <__udivsi3>
 200c608:	100b883a 	mov	r5,r2
 200c60c:	a009883a 	mov	r4,r20
 200c610:	1039883a 	mov	fp,r2
 200c614:	20040f00 	call	20040f0 <__mulsi3>
 200c618:	8809883a 	mov	r4,r17
 200c61c:	b80b883a 	mov	r5,r23
 200c620:	102b883a 	mov	r21,r2
 200c624:	20040e80 	call	20040e8 <__umodsi3>
 200c628:	d9000217 	ldw	r4,8(sp)
 200c62c:	1004943a 	slli	r2,r2,16
 200c630:	9ca6983a 	sll	r19,r19,r18
 200c634:	2006d43a 	srli	r3,r4,16
 200c638:	84a0983a 	sll	r16,r16,r18
 200c63c:	dcc00015 	stw	r19,0(sp)
 200c640:	10c4b03a 	or	r2,r2,r3
 200c644:	dc000115 	stw	r16,4(sp)
 200c648:	1540032e 	bgeu	r2,r21,200c658 <__umoddi3+0x46c>
 200c64c:	1585883a 	add	r2,r2,r22
 200c650:	e73fffc4 	addi	fp,fp,-1
 200c654:	15806e2e 	bgeu	r2,r22,200c810 <__umoddi3+0x624>
 200c658:	1563c83a 	sub	r17,r2,r21
 200c65c:	8809883a 	mov	r4,r17
 200c660:	b80b883a 	mov	r5,r23
 200c664:	20040e00 	call	20040e0 <__udivsi3>
 200c668:	100b883a 	mov	r5,r2
 200c66c:	a009883a 	mov	r4,r20
 200c670:	1021883a 	mov	r16,r2
 200c674:	20040f00 	call	20040f0 <__mulsi3>
 200c678:	b80b883a 	mov	r5,r23
 200c67c:	8809883a 	mov	r4,r17
 200c680:	1029883a 	mov	r20,r2
 200c684:	20040e80 	call	20040e8 <__umodsi3>
 200c688:	d9400217 	ldw	r5,8(sp)
 200c68c:	1004943a 	slli	r2,r2,16
 200c690:	28ffffcc 	andi	r3,r5,65535
 200c694:	10c4b03a 	or	r2,r2,r3
 200c698:	1500032e 	bgeu	r2,r20,200c6a8 <__umoddi3+0x4bc>
 200c69c:	1585883a 	add	r2,r2,r22
 200c6a0:	843fffc4 	addi	r16,r16,-1
 200c6a4:	1580562e 	bgeu	r2,r22,200c800 <__umoddi3+0x614>
 200c6a8:	d9800017 	ldw	r6,0(sp)
 200c6ac:	e022943a 	slli	r17,fp,16
 200c6b0:	302ed43a 	srli	r23,r6,16
 200c6b4:	8462b03a 	or	r17,r16,r17
 200c6b8:	34ffffcc 	andi	r19,r6,65535
 200c6bc:	882ad43a 	srli	r21,r17,16
 200c6c0:	8c7fffcc 	andi	r17,r17,65535
 200c6c4:	8809883a 	mov	r4,r17
 200c6c8:	980b883a 	mov	r5,r19
 200c6cc:	1521c83a 	sub	r16,r2,r20
 200c6d0:	20040f00 	call	20040f0 <__mulsi3>
 200c6d4:	8809883a 	mov	r4,r17
 200c6d8:	b80b883a 	mov	r5,r23
 200c6dc:	1029883a 	mov	r20,r2
 200c6e0:	20040f00 	call	20040f0 <__mulsi3>
 200c6e4:	980b883a 	mov	r5,r19
 200c6e8:	a809883a 	mov	r4,r21
 200c6ec:	1023883a 	mov	r17,r2
 200c6f0:	20040f00 	call	20040f0 <__mulsi3>
 200c6f4:	a809883a 	mov	r4,r21
 200c6f8:	b80b883a 	mov	r5,r23
 200c6fc:	1027883a 	mov	r19,r2
 200c700:	20040f00 	call	20040f0 <__mulsi3>
 200c704:	100b883a 	mov	r5,r2
 200c708:	a004d43a 	srli	r2,r20,16
 200c70c:	8ce3883a 	add	r17,r17,r19
 200c710:	1449883a 	add	r4,r2,r17
 200c714:	24c0022e 	bgeu	r4,r19,200c720 <__umoddi3+0x534>
 200c718:	00800074 	movhi	r2,1
 200c71c:	288b883a 	add	r5,r5,r2
 200c720:	2004d43a 	srli	r2,r4,16
 200c724:	2008943a 	slli	r4,r4,16
 200c728:	a0ffffcc 	andi	r3,r20,65535
 200c72c:	288d883a 	add	r6,r5,r2
 200c730:	20c9883a 	add	r4,r4,r3
 200c734:	81800b36 	bltu	r16,r6,200c764 <__umoddi3+0x578>
 200c738:	81804026 	beq	r16,r6,200c83c <__umoddi3+0x650>
 200c73c:	818dc83a 	sub	r6,r16,r6
 200c740:	00000f06 	br	200c780 <__umoddi3+0x594>
 200c744:	30c5c83a 	sub	r2,r6,r3
 200c748:	182d883a 	mov	r22,r3
 200c74c:	8084d83a 	srl	r2,r16,r2
 200c750:	a8c6983a 	sll	r3,r21,r3
 200c754:	9da6983a 	sll	r19,r19,r22
 200c758:	85a0983a 	sll	r16,r16,r22
 200c75c:	18aab03a 	or	r21,r3,r2
 200c760:	003f1d06 	br	200c3d8 <__umoddi3+0x1ec>
 200c764:	d8c00017 	ldw	r3,0(sp)
 200c768:	20c5c83a 	sub	r2,r4,r3
 200c76c:	2089803a 	cmpltu	r4,r4,r2
 200c770:	3587c83a 	sub	r3,r6,r22
 200c774:	1907c83a 	sub	r3,r3,r4
 200c778:	80cdc83a 	sub	r6,r16,r3
 200c77c:	1009883a 	mov	r4,r2
 200c780:	d9400117 	ldw	r5,4(sp)
 200c784:	2905c83a 	sub	r2,r5,r4
 200c788:	2887803a 	cmpltu	r3,r5,r2
 200c78c:	30c7c83a 	sub	r3,r6,r3
 200c790:	d9800317 	ldw	r6,12(sp)
 200c794:	1484d83a 	srl	r2,r2,r18
 200c798:	1988983a 	sll	r4,r3,r6
 200c79c:	1c86d83a 	srl	r3,r3,r18
 200c7a0:	2088b03a 	or	r4,r4,r2
 200c7a4:	2011883a 	mov	r8,r4
 200c7a8:	1813883a 	mov	r9,r3
 200c7ac:	d9000415 	stw	r4,16(sp)
 200c7b0:	d8c00515 	stw	r3,20(sp)
 200c7b4:	003ed406 	br	200c308 <__umoddi3+0x11c>
 200c7b8:	01400604 	movi	r5,24
 200c7bc:	2805883a 	mov	r2,r5
 200c7c0:	003ea606 	br	200c25c <__umoddi3+0x70>
 200c7c4:	01400204 	movi	r5,8
 200c7c8:	2805883a 	mov	r2,r5
 200c7cc:	003ea306 	br	200c25c <__umoddi3+0x70>
 200c7d0:	01400204 	movi	r5,8
 200c7d4:	2805883a 	mov	r2,r5
 200c7d8:	003edf06 	br	200c358 <__umoddi3+0x16c>
 200c7dc:	01400204 	movi	r5,8
 200c7e0:	2805883a 	mov	r2,r5
 200c7e4:	003ef206 	br	200c3b0 <__umoddi3+0x1c4>
 200c7e8:	01400604 	movi	r5,24
 200c7ec:	2805883a 	mov	r2,r5
 200c7f0:	003eef06 	br	200c3b0 <__umoddi3+0x1c4>
 200c7f4:	01400604 	movi	r5,24
 200c7f8:	2805883a 	mov	r2,r5
 200c7fc:	003ed606 	br	200c358 <__umoddi3+0x16c>
 200c800:	153fa92e 	bgeu	r2,r20,200c6a8 <__umoddi3+0x4bc>
 200c804:	843fffc4 	addi	r16,r16,-1
 200c808:	1585883a 	add	r2,r2,r22
 200c80c:	003fa606 	br	200c6a8 <__umoddi3+0x4bc>
 200c810:	157f912e 	bgeu	r2,r21,200c658 <__umoddi3+0x46c>
 200c814:	e73fffc4 	addi	fp,fp,-1
 200c818:	1585883a 	add	r2,r2,r22
 200c81c:	003f8e06 	br	200c658 <__umoddi3+0x46c>
 200c820:	157f542e 	bgeu	r2,r21,200c574 <__umoddi3+0x388>
 200c824:	14c5883a 	add	r2,r2,r19
 200c828:	003f5206 	br	200c574 <__umoddi3+0x388>
 200c82c:	14c5883a 	add	r2,r2,r19
 200c830:	003efc06 	br	200c424 <__umoddi3+0x238>
 200c834:	14c5883a 	add	r2,r2,r19
 200c838:	003ea606 	br	200c2d4 <__umoddi3+0xe8>
 200c83c:	d8800117 	ldw	r2,4(sp)
 200c840:	113fc836 	bltu	r2,r4,200c764 <__umoddi3+0x578>
 200c844:	000d883a 	mov	r6,zero
 200c848:	003fcd06 	br	200c780 <__umoddi3+0x594>

0200c84c <__muldf3>:
 200c84c:	deffe004 	addi	sp,sp,-128
 200c850:	dc401815 	stw	r17,96(sp)
 200c854:	dc400404 	addi	r17,sp,16
 200c858:	2011883a 	mov	r8,r4
 200c85c:	2813883a 	mov	r9,r5
 200c860:	dc001715 	stw	r16,92(sp)
 200c864:	d809883a 	mov	r4,sp
 200c868:	880b883a 	mov	r5,r17
 200c86c:	dc000904 	addi	r16,sp,36
 200c870:	dfc01f15 	stw	ra,124(sp)
 200c874:	da400115 	stw	r9,4(sp)
 200c878:	d9c00315 	stw	r7,12(sp)
 200c87c:	da000015 	stw	r8,0(sp)
 200c880:	d9800215 	stw	r6,8(sp)
 200c884:	ddc01e15 	stw	r23,120(sp)
 200c888:	dd801d15 	stw	r22,116(sp)
 200c88c:	dd401c15 	stw	r21,112(sp)
 200c890:	dd001b15 	stw	r20,108(sp)
 200c894:	dcc01a15 	stw	r19,104(sp)
 200c898:	dc801915 	stw	r18,100(sp)
 200c89c:	20044bc0 	call	20044bc <__unpack_d>
 200c8a0:	d9000204 	addi	r4,sp,8
 200c8a4:	800b883a 	mov	r5,r16
 200c8a8:	20044bc0 	call	20044bc <__unpack_d>
 200c8ac:	d9000417 	ldw	r4,16(sp)
 200c8b0:	00800044 	movi	r2,1
 200c8b4:	1100102e 	bgeu	r2,r4,200c8f8 <__muldf3+0xac>
 200c8b8:	d8c00917 	ldw	r3,36(sp)
 200c8bc:	10c0062e 	bgeu	r2,r3,200c8d8 <__muldf3+0x8c>
 200c8c0:	00800104 	movi	r2,4
 200c8c4:	20800a26 	beq	r4,r2,200c8f0 <__muldf3+0xa4>
 200c8c8:	1880cc26 	beq	r3,r2,200cbfc <__muldf3+0x3b0>
 200c8cc:	00800084 	movi	r2,2
 200c8d0:	20800926 	beq	r4,r2,200c8f8 <__muldf3+0xac>
 200c8d4:	1880191e 	bne	r3,r2,200c93c <__muldf3+0xf0>
 200c8d8:	d8c00a17 	ldw	r3,40(sp)
 200c8dc:	d8800517 	ldw	r2,20(sp)
 200c8e0:	8009883a 	mov	r4,r16
 200c8e4:	10c4c03a 	cmpne	r2,r2,r3
 200c8e8:	d8800a15 	stw	r2,40(sp)
 200c8ec:	00000706 	br	200c90c <__muldf3+0xc0>
 200c8f0:	00800084 	movi	r2,2
 200c8f4:	1880c326 	beq	r3,r2,200cc04 <__muldf3+0x3b8>
 200c8f8:	d8800517 	ldw	r2,20(sp)
 200c8fc:	d8c00a17 	ldw	r3,40(sp)
 200c900:	8809883a 	mov	r4,r17
 200c904:	10c4c03a 	cmpne	r2,r2,r3
 200c908:	d8800515 	stw	r2,20(sp)
 200c90c:	20041a80 	call	20041a8 <__pack_d>
 200c910:	dfc01f17 	ldw	ra,124(sp)
 200c914:	ddc01e17 	ldw	r23,120(sp)
 200c918:	dd801d17 	ldw	r22,116(sp)
 200c91c:	dd401c17 	ldw	r21,112(sp)
 200c920:	dd001b17 	ldw	r20,108(sp)
 200c924:	dcc01a17 	ldw	r19,104(sp)
 200c928:	dc801917 	ldw	r18,100(sp)
 200c92c:	dc401817 	ldw	r17,96(sp)
 200c930:	dc001717 	ldw	r16,92(sp)
 200c934:	dec02004 	addi	sp,sp,128
 200c938:	f800283a 	ret
 200c93c:	dd800717 	ldw	r22,28(sp)
 200c940:	dc800c17 	ldw	r18,48(sp)
 200c944:	002b883a 	mov	r21,zero
 200c948:	0023883a 	mov	r17,zero
 200c94c:	a80b883a 	mov	r5,r21
 200c950:	b00d883a 	mov	r6,r22
 200c954:	880f883a 	mov	r7,r17
 200c958:	ddc00817 	ldw	r23,32(sp)
 200c95c:	dcc00d17 	ldw	r19,52(sp)
 200c960:	9009883a 	mov	r4,r18
 200c964:	200d0880 	call	200d088 <__muldi3>
 200c968:	001b883a 	mov	r13,zero
 200c96c:	680f883a 	mov	r7,r13
 200c970:	b009883a 	mov	r4,r22
 200c974:	000b883a 	mov	r5,zero
 200c978:	980d883a 	mov	r6,r19
 200c97c:	b82d883a 	mov	r22,r23
 200c980:	002f883a 	mov	r23,zero
 200c984:	db401615 	stw	r13,88(sp)
 200c988:	d8801315 	stw	r2,76(sp)
 200c98c:	d8c01415 	stw	r3,80(sp)
 200c990:	dcc01515 	stw	r19,84(sp)
 200c994:	200d0880 	call	200d088 <__muldi3>
 200c998:	b00d883a 	mov	r6,r22
 200c99c:	000b883a 	mov	r5,zero
 200c9a0:	9009883a 	mov	r4,r18
 200c9a4:	b80f883a 	mov	r7,r23
 200c9a8:	1021883a 	mov	r16,r2
 200c9ac:	1823883a 	mov	r17,r3
 200c9b0:	200d0880 	call	200d088 <__muldi3>
 200c9b4:	8085883a 	add	r2,r16,r2
 200c9b8:	140d803a 	cmpltu	r6,r2,r16
 200c9bc:	88c7883a 	add	r3,r17,r3
 200c9c0:	30cd883a 	add	r6,r6,r3
 200c9c4:	1029883a 	mov	r20,r2
 200c9c8:	302b883a 	mov	r21,r6
 200c9cc:	da801317 	ldw	r10,76(sp)
 200c9d0:	dac01417 	ldw	r11,80(sp)
 200c9d4:	db001517 	ldw	r12,84(sp)
 200c9d8:	db401617 	ldw	r13,88(sp)
 200c9dc:	3440612e 	bgeu	r6,r17,200cb64 <__muldf3+0x318>
 200c9e0:	0009883a 	mov	r4,zero
 200c9e4:	5105883a 	add	r2,r10,r4
 200c9e8:	128d803a 	cmpltu	r6,r2,r10
 200c9ec:	5d07883a 	add	r3,r11,r20
 200c9f0:	30cd883a 	add	r6,r6,r3
 200c9f4:	0021883a 	mov	r16,zero
 200c9f8:	04400044 	movi	r17,1
 200c9fc:	1025883a 	mov	r18,r2
 200ca00:	3027883a 	mov	r19,r6
 200ca04:	32c06236 	bltu	r6,r11,200cb90 <__muldf3+0x344>
 200ca08:	59807a26 	beq	r11,r6,200cbf4 <__muldf3+0x3a8>
 200ca0c:	680b883a 	mov	r5,r13
 200ca10:	b80f883a 	mov	r7,r23
 200ca14:	6009883a 	mov	r4,r12
 200ca18:	b00d883a 	mov	r6,r22
 200ca1c:	200d0880 	call	200d088 <__muldi3>
 200ca20:	1009883a 	mov	r4,r2
 200ca24:	000f883a 	mov	r7,zero
 200ca28:	1545883a 	add	r2,r2,r21
 200ca2c:	1111803a 	cmpltu	r8,r2,r4
 200ca30:	19c7883a 	add	r3,r3,r7
 200ca34:	40c7883a 	add	r3,r8,r3
 200ca38:	88cb883a 	add	r5,r17,r3
 200ca3c:	d8c00617 	ldw	r3,24(sp)
 200ca40:	8089883a 	add	r4,r16,r2
 200ca44:	d8800b17 	ldw	r2,44(sp)
 200ca48:	18c00104 	addi	r3,r3,4
 200ca4c:	240d803a 	cmpltu	r6,r4,r16
 200ca50:	10c7883a 	add	r3,r2,r3
 200ca54:	2013883a 	mov	r9,r4
 200ca58:	d8800a17 	ldw	r2,40(sp)
 200ca5c:	d9000517 	ldw	r4,20(sp)
 200ca60:	314d883a 	add	r6,r6,r5
 200ca64:	3015883a 	mov	r10,r6
 200ca68:	2088c03a 	cmpne	r4,r4,r2
 200ca6c:	00880034 	movhi	r2,8192
 200ca70:	10bfffc4 	addi	r2,r2,-1
 200ca74:	d9000f15 	stw	r4,60(sp)
 200ca78:	d8c01015 	stw	r3,64(sp)
 200ca7c:	1180162e 	bgeu	r2,r6,200cad8 <__muldf3+0x28c>
 200ca80:	1811883a 	mov	r8,r3
 200ca84:	101f883a 	mov	r15,r2
 200ca88:	980497fa 	slli	r2,r19,31
 200ca8c:	9016d07a 	srli	r11,r18,1
 200ca90:	500697fa 	slli	r3,r10,31
 200ca94:	480cd07a 	srli	r6,r9,1
 200ca98:	500ed07a 	srli	r7,r10,1
 200ca9c:	12d6b03a 	or	r11,r2,r11
 200caa0:	00800044 	movi	r2,1
 200caa4:	198cb03a 	or	r6,r3,r6
 200caa8:	4888703a 	and	r4,r9,r2
 200caac:	9818d07a 	srli	r12,r19,1
 200cab0:	001b883a 	mov	r13,zero
 200cab4:	03a00034 	movhi	r14,32768
 200cab8:	3013883a 	mov	r9,r6
 200cabc:	3815883a 	mov	r10,r7
 200cac0:	4091883a 	add	r8,r8,r2
 200cac4:	20000226 	beq	r4,zero,200cad0 <__muldf3+0x284>
 200cac8:	5b64b03a 	or	r18,r11,r13
 200cacc:	63a6b03a 	or	r19,r12,r14
 200cad0:	7abfed36 	bltu	r15,r10,200ca88 <__muldf3+0x23c>
 200cad4:	da001015 	stw	r8,64(sp)
 200cad8:	00840034 	movhi	r2,4096
 200cadc:	10bfffc4 	addi	r2,r2,-1
 200cae0:	12801436 	bltu	r2,r10,200cb34 <__muldf3+0x2e8>
 200cae4:	da001017 	ldw	r8,64(sp)
 200cae8:	101f883a 	mov	r15,r2
 200caec:	4a45883a 	add	r2,r9,r9
 200caf0:	124d803a 	cmpltu	r6,r2,r9
 200caf4:	5287883a 	add	r3,r10,r10
 200caf8:	9497883a 	add	r11,r18,r18
 200cafc:	5c8f803a 	cmpltu	r7,r11,r18
 200cb00:	9cd9883a 	add	r12,r19,r19
 200cb04:	01000044 	movi	r4,1
 200cb08:	30cd883a 	add	r6,r6,r3
 200cb0c:	3b0f883a 	add	r7,r7,r12
 200cb10:	423fffc4 	addi	r8,r8,-1
 200cb14:	1013883a 	mov	r9,r2
 200cb18:	3015883a 	mov	r10,r6
 200cb1c:	111ab03a 	or	r13,r2,r4
 200cb20:	98003016 	blt	r19,zero,200cbe4 <__muldf3+0x398>
 200cb24:	5825883a 	mov	r18,r11
 200cb28:	3827883a 	mov	r19,r7
 200cb2c:	7abfef2e 	bgeu	r15,r10,200caec <__muldf3+0x2a0>
 200cb30:	da001015 	stw	r8,64(sp)
 200cb34:	00803fc4 	movi	r2,255
 200cb38:	488e703a 	and	r7,r9,r2
 200cb3c:	00802004 	movi	r2,128
 200cb40:	0007883a 	mov	r3,zero
 200cb44:	0011883a 	mov	r8,zero
 200cb48:	38801826 	beq	r7,r2,200cbac <__muldf3+0x360>
 200cb4c:	008000c4 	movi	r2,3
 200cb50:	d9000e04 	addi	r4,sp,56
 200cb54:	da801215 	stw	r10,72(sp)
 200cb58:	d8800e15 	stw	r2,56(sp)
 200cb5c:	da401115 	stw	r9,68(sp)
 200cb60:	003f6a06 	br	200c90c <__muldf3+0xc0>
 200cb64:	89802126 	beq	r17,r6,200cbec <__muldf3+0x3a0>
 200cb68:	0009883a 	mov	r4,zero
 200cb6c:	5105883a 	add	r2,r10,r4
 200cb70:	128d803a 	cmpltu	r6,r2,r10
 200cb74:	5d07883a 	add	r3,r11,r20
 200cb78:	30cd883a 	add	r6,r6,r3
 200cb7c:	0021883a 	mov	r16,zero
 200cb80:	0023883a 	mov	r17,zero
 200cb84:	1025883a 	mov	r18,r2
 200cb88:	3027883a 	mov	r19,r6
 200cb8c:	32ff9e2e 	bgeu	r6,r11,200ca08 <__muldf3+0x1bc>
 200cb90:	00800044 	movi	r2,1
 200cb94:	8089883a 	add	r4,r16,r2
 200cb98:	240d803a 	cmpltu	r6,r4,r16
 200cb9c:	344d883a 	add	r6,r6,r17
 200cba0:	2021883a 	mov	r16,r4
 200cba4:	3023883a 	mov	r17,r6
 200cba8:	003f9806 	br	200ca0c <__muldf3+0x1c0>
 200cbac:	403fe71e 	bne	r8,zero,200cb4c <__muldf3+0x300>
 200cbb0:	01004004 	movi	r4,256
 200cbb4:	4904703a 	and	r2,r9,r4
 200cbb8:	10c4b03a 	or	r2,r2,r3
 200cbbc:	103fe31e 	bne	r2,zero,200cb4c <__muldf3+0x300>
 200cbc0:	94c4b03a 	or	r2,r18,r19
 200cbc4:	103fe126 	beq	r2,zero,200cb4c <__muldf3+0x300>
 200cbc8:	49c5883a 	add	r2,r9,r7
 200cbcc:	1251803a 	cmpltu	r8,r2,r9
 200cbd0:	4291883a 	add	r8,r8,r10
 200cbd4:	013fc004 	movi	r4,-256
 200cbd8:	1112703a 	and	r9,r2,r4
 200cbdc:	4015883a 	mov	r10,r8
 200cbe0:	003fda06 	br	200cb4c <__muldf3+0x300>
 200cbe4:	6813883a 	mov	r9,r13
 200cbe8:	003fce06 	br	200cb24 <__muldf3+0x2d8>
 200cbec:	143f7c36 	bltu	r2,r16,200c9e0 <__muldf3+0x194>
 200cbf0:	003fdd06 	br	200cb68 <__muldf3+0x31c>
 200cbf4:	12bf852e 	bgeu	r2,r10,200ca0c <__muldf3+0x1c0>
 200cbf8:	003fe506 	br	200cb90 <__muldf3+0x344>
 200cbfc:	00800084 	movi	r2,2
 200cc00:	20bf351e 	bne	r4,r2,200c8d8 <__muldf3+0x8c>
 200cc04:	01008074 	movhi	r4,513
 200cc08:	2104d604 	addi	r4,r4,4952
 200cc0c:	003f3f06 	br	200c90c <__muldf3+0xc0>

0200cc10 <__divdf3>:
 200cc10:	deffed04 	addi	sp,sp,-76
 200cc14:	dcc01115 	stw	r19,68(sp)
 200cc18:	dcc00404 	addi	r19,sp,16
 200cc1c:	2011883a 	mov	r8,r4
 200cc20:	2813883a 	mov	r9,r5
 200cc24:	dc000e15 	stw	r16,56(sp)
 200cc28:	d809883a 	mov	r4,sp
 200cc2c:	980b883a 	mov	r5,r19
 200cc30:	dc000904 	addi	r16,sp,36
 200cc34:	dfc01215 	stw	ra,72(sp)
 200cc38:	da400115 	stw	r9,4(sp)
 200cc3c:	d9c00315 	stw	r7,12(sp)
 200cc40:	da000015 	stw	r8,0(sp)
 200cc44:	d9800215 	stw	r6,8(sp)
 200cc48:	dc801015 	stw	r18,64(sp)
 200cc4c:	dc400f15 	stw	r17,60(sp)
 200cc50:	20044bc0 	call	20044bc <__unpack_d>
 200cc54:	d9000204 	addi	r4,sp,8
 200cc58:	800b883a 	mov	r5,r16
 200cc5c:	20044bc0 	call	20044bc <__unpack_d>
 200cc60:	d9000417 	ldw	r4,16(sp)
 200cc64:	00800044 	movi	r2,1
 200cc68:	11000b2e 	bgeu	r2,r4,200cc98 <__divdf3+0x88>
 200cc6c:	d9400917 	ldw	r5,36(sp)
 200cc70:	1140762e 	bgeu	r2,r5,200ce4c <__divdf3+0x23c>
 200cc74:	d8800517 	ldw	r2,20(sp)
 200cc78:	d8c00a17 	ldw	r3,40(sp)
 200cc7c:	01800104 	movi	r6,4
 200cc80:	10c4f03a 	xor	r2,r2,r3
 200cc84:	d8800515 	stw	r2,20(sp)
 200cc88:	21800226 	beq	r4,r6,200cc94 <__divdf3+0x84>
 200cc8c:	00800084 	movi	r2,2
 200cc90:	2080141e 	bne	r4,r2,200cce4 <__divdf3+0xd4>
 200cc94:	29000926 	beq	r5,r4,200ccbc <__divdf3+0xac>
 200cc98:	9809883a 	mov	r4,r19
 200cc9c:	20041a80 	call	20041a8 <__pack_d>
 200cca0:	dfc01217 	ldw	ra,72(sp)
 200cca4:	dcc01117 	ldw	r19,68(sp)
 200cca8:	dc801017 	ldw	r18,64(sp)
 200ccac:	dc400f17 	ldw	r17,60(sp)
 200ccb0:	dc000e17 	ldw	r16,56(sp)
 200ccb4:	dec01304 	addi	sp,sp,76
 200ccb8:	f800283a 	ret
 200ccbc:	01008074 	movhi	r4,513
 200ccc0:	2104d604 	addi	r4,r4,4952
 200ccc4:	20041a80 	call	20041a8 <__pack_d>
 200ccc8:	dfc01217 	ldw	ra,72(sp)
 200cccc:	dcc01117 	ldw	r19,68(sp)
 200ccd0:	dc801017 	ldw	r18,64(sp)
 200ccd4:	dc400f17 	ldw	r17,60(sp)
 200ccd8:	dc000e17 	ldw	r16,56(sp)
 200ccdc:	dec01304 	addi	sp,sp,76
 200cce0:	f800283a 	ret
 200cce4:	29805b26 	beq	r5,r6,200ce54 <__divdf3+0x244>
 200cce8:	28802d26 	beq	r5,r2,200cda0 <__divdf3+0x190>
 200ccec:	d8c00617 	ldw	r3,24(sp)
 200ccf0:	d8800b17 	ldw	r2,44(sp)
 200ccf4:	d9c00817 	ldw	r7,32(sp)
 200ccf8:	dc400d17 	ldw	r17,52(sp)
 200ccfc:	188bc83a 	sub	r5,r3,r2
 200cd00:	d9800717 	ldw	r6,28(sp)
 200cd04:	dc000c17 	ldw	r16,48(sp)
 200cd08:	d9400615 	stw	r5,24(sp)
 200cd0c:	3c403836 	bltu	r7,r17,200cdf0 <__divdf3+0x1e0>
 200cd10:	89c03626 	beq	r17,r7,200cdec <__divdf3+0x1dc>
 200cd14:	0015883a 	mov	r10,zero
 200cd18:	001d883a 	mov	r14,zero
 200cd1c:	02c40034 	movhi	r11,4096
 200cd20:	001f883a 	mov	r15,zero
 200cd24:	003f883a 	mov	ra,zero
 200cd28:	04800f44 	movi	r18,61
 200cd2c:	00000f06 	br	200cd6c <__divdf3+0x15c>
 200cd30:	601d883a 	mov	r14,r12
 200cd34:	681f883a 	mov	r15,r13
 200cd38:	400d883a 	mov	r6,r8
 200cd3c:	100f883a 	mov	r7,r2
 200cd40:	3191883a 	add	r8,r6,r6
 200cd44:	5808d07a 	srli	r4,r11,1
 200cd48:	4185803a 	cmpltu	r2,r8,r6
 200cd4c:	39d3883a 	add	r9,r7,r7
 200cd50:	28c6b03a 	or	r3,r5,r3
 200cd54:	1245883a 	add	r2,r2,r9
 200cd58:	1815883a 	mov	r10,r3
 200cd5c:	2017883a 	mov	r11,r4
 200cd60:	400d883a 	mov	r6,r8
 200cd64:	100f883a 	mov	r7,r2
 200cd68:	fc801726 	beq	ra,r18,200cdc8 <__divdf3+0x1b8>
 200cd6c:	580a97fa 	slli	r5,r11,31
 200cd70:	5006d07a 	srli	r3,r10,1
 200cd74:	ffc00044 	addi	ra,ra,1
 200cd78:	3c7ff136 	bltu	r7,r17,200cd40 <__divdf3+0x130>
 200cd7c:	3411c83a 	sub	r8,r6,r16
 200cd80:	3205803a 	cmpltu	r2,r6,r8
 200cd84:	3c53c83a 	sub	r9,r7,r17
 200cd88:	7298b03a 	or	r12,r14,r10
 200cd8c:	7adab03a 	or	r13,r15,r11
 200cd90:	4885c83a 	sub	r2,r9,r2
 200cd94:	89ffe61e 	bne	r17,r7,200cd30 <__divdf3+0x120>
 200cd98:	343fe936 	bltu	r6,r16,200cd40 <__divdf3+0x130>
 200cd9c:	003fe406 	br	200cd30 <__divdf3+0x120>
 200cda0:	9809883a 	mov	r4,r19
 200cda4:	d9800415 	stw	r6,16(sp)
 200cda8:	20041a80 	call	20041a8 <__pack_d>
 200cdac:	dfc01217 	ldw	ra,72(sp)
 200cdb0:	dcc01117 	ldw	r19,68(sp)
 200cdb4:	dc801017 	ldw	r18,64(sp)
 200cdb8:	dc400f17 	ldw	r17,60(sp)
 200cdbc:	dc000e17 	ldw	r16,56(sp)
 200cdc0:	dec01304 	addi	sp,sp,76
 200cdc4:	f800283a 	ret
 200cdc8:	00803fc4 	movi	r2,255
 200cdcc:	7090703a 	and	r8,r14,r2
 200cdd0:	00802004 	movi	r2,128
 200cdd4:	0007883a 	mov	r3,zero
 200cdd8:	0013883a 	mov	r9,zero
 200cddc:	40800d26 	beq	r8,r2,200ce14 <__divdf3+0x204>
 200cde0:	dbc00815 	stw	r15,32(sp)
 200cde4:	db800715 	stw	r14,28(sp)
 200cde8:	003fab06 	br	200cc98 <__divdf3+0x88>
 200cdec:	343fc92e 	bgeu	r6,r16,200cd14 <__divdf3+0x104>
 200cdf0:	3185883a 	add	r2,r6,r6
 200cdf4:	1189803a 	cmpltu	r4,r2,r6
 200cdf8:	39c7883a 	add	r3,r7,r7
 200cdfc:	20c9883a 	add	r4,r4,r3
 200ce00:	297fffc4 	addi	r5,r5,-1
 200ce04:	100d883a 	mov	r6,r2
 200ce08:	200f883a 	mov	r7,r4
 200ce0c:	d9400615 	stw	r5,24(sp)
 200ce10:	003fc006 	br	200cd14 <__divdf3+0x104>
 200ce14:	483ff21e 	bne	r9,zero,200cde0 <__divdf3+0x1d0>
 200ce18:	01004004 	movi	r4,256
 200ce1c:	7104703a 	and	r2,r14,r4
 200ce20:	10c4b03a 	or	r2,r2,r3
 200ce24:	103fee1e 	bne	r2,zero,200cde0 <__divdf3+0x1d0>
 200ce28:	31c4b03a 	or	r2,r6,r7
 200ce2c:	103fec26 	beq	r2,zero,200cde0 <__divdf3+0x1d0>
 200ce30:	7205883a 	add	r2,r14,r8
 200ce34:	1391803a 	cmpltu	r8,r2,r14
 200ce38:	43d1883a 	add	r8,r8,r15
 200ce3c:	013fc004 	movi	r4,-256
 200ce40:	111c703a 	and	r14,r2,r4
 200ce44:	401f883a 	mov	r15,r8
 200ce48:	003fe506 	br	200cde0 <__divdf3+0x1d0>
 200ce4c:	8009883a 	mov	r4,r16
 200ce50:	003f9206 	br	200cc9c <__divdf3+0x8c>
 200ce54:	9809883a 	mov	r4,r19
 200ce58:	d8000715 	stw	zero,28(sp)
 200ce5c:	d8000815 	stw	zero,32(sp)
 200ce60:	d8000615 	stw	zero,24(sp)
 200ce64:	003f8d06 	br	200cc9c <__divdf3+0x8c>

0200ce68 <__eqdf2>:
 200ce68:	deffef04 	addi	sp,sp,-68
 200ce6c:	dc400f15 	stw	r17,60(sp)
 200ce70:	dc400404 	addi	r17,sp,16
 200ce74:	2005883a 	mov	r2,r4
 200ce78:	2807883a 	mov	r3,r5
 200ce7c:	dc000e15 	stw	r16,56(sp)
 200ce80:	d809883a 	mov	r4,sp
 200ce84:	880b883a 	mov	r5,r17
 200ce88:	dc000904 	addi	r16,sp,36
 200ce8c:	d8c00115 	stw	r3,4(sp)
 200ce90:	d8800015 	stw	r2,0(sp)
 200ce94:	d9800215 	stw	r6,8(sp)
 200ce98:	dfc01015 	stw	ra,64(sp)
 200ce9c:	d9c00315 	stw	r7,12(sp)
 200cea0:	20044bc0 	call	20044bc <__unpack_d>
 200cea4:	d9000204 	addi	r4,sp,8
 200cea8:	800b883a 	mov	r5,r16
 200ceac:	20044bc0 	call	20044bc <__unpack_d>
 200ceb0:	d8800417 	ldw	r2,16(sp)
 200ceb4:	00c00044 	movi	r3,1
 200ceb8:	180d883a 	mov	r6,r3
 200cebc:	1880062e 	bgeu	r3,r2,200ced8 <__eqdf2+0x70>
 200cec0:	d8800917 	ldw	r2,36(sp)
 200cec4:	8809883a 	mov	r4,r17
 200cec8:	800b883a 	mov	r5,r16
 200cecc:	1880022e 	bgeu	r3,r2,200ced8 <__eqdf2+0x70>
 200ced0:	20045f40 	call	20045f4 <__fpcmp_parts_d>
 200ced4:	100d883a 	mov	r6,r2
 200ced8:	3005883a 	mov	r2,r6
 200cedc:	dfc01017 	ldw	ra,64(sp)
 200cee0:	dc400f17 	ldw	r17,60(sp)
 200cee4:	dc000e17 	ldw	r16,56(sp)
 200cee8:	dec01104 	addi	sp,sp,68
 200ceec:	f800283a 	ret

0200cef0 <__nedf2>:
 200cef0:	deffef04 	addi	sp,sp,-68
 200cef4:	dc400f15 	stw	r17,60(sp)
 200cef8:	dc400404 	addi	r17,sp,16
 200cefc:	2005883a 	mov	r2,r4
 200cf00:	2807883a 	mov	r3,r5
 200cf04:	dc000e15 	stw	r16,56(sp)
 200cf08:	d809883a 	mov	r4,sp
 200cf0c:	880b883a 	mov	r5,r17
 200cf10:	dc000904 	addi	r16,sp,36
 200cf14:	d8c00115 	stw	r3,4(sp)
 200cf18:	d8800015 	stw	r2,0(sp)
 200cf1c:	d9800215 	stw	r6,8(sp)
 200cf20:	dfc01015 	stw	ra,64(sp)
 200cf24:	d9c00315 	stw	r7,12(sp)
 200cf28:	20044bc0 	call	20044bc <__unpack_d>
 200cf2c:	d9000204 	addi	r4,sp,8
 200cf30:	800b883a 	mov	r5,r16
 200cf34:	20044bc0 	call	20044bc <__unpack_d>
 200cf38:	d8800417 	ldw	r2,16(sp)
 200cf3c:	00c00044 	movi	r3,1
 200cf40:	180d883a 	mov	r6,r3
 200cf44:	1880062e 	bgeu	r3,r2,200cf60 <__nedf2+0x70>
 200cf48:	d8800917 	ldw	r2,36(sp)
 200cf4c:	8809883a 	mov	r4,r17
 200cf50:	800b883a 	mov	r5,r16
 200cf54:	1880022e 	bgeu	r3,r2,200cf60 <__nedf2+0x70>
 200cf58:	20045f40 	call	20045f4 <__fpcmp_parts_d>
 200cf5c:	100d883a 	mov	r6,r2
 200cf60:	3005883a 	mov	r2,r6
 200cf64:	dfc01017 	ldw	ra,64(sp)
 200cf68:	dc400f17 	ldw	r17,60(sp)
 200cf6c:	dc000e17 	ldw	r16,56(sp)
 200cf70:	dec01104 	addi	sp,sp,68
 200cf74:	f800283a 	ret

0200cf78 <__gedf2>:
 200cf78:	deffef04 	addi	sp,sp,-68
 200cf7c:	dc400f15 	stw	r17,60(sp)
 200cf80:	dc400404 	addi	r17,sp,16
 200cf84:	2005883a 	mov	r2,r4
 200cf88:	2807883a 	mov	r3,r5
 200cf8c:	dc000e15 	stw	r16,56(sp)
 200cf90:	d809883a 	mov	r4,sp
 200cf94:	880b883a 	mov	r5,r17
 200cf98:	dc000904 	addi	r16,sp,36
 200cf9c:	d8c00115 	stw	r3,4(sp)
 200cfa0:	d8800015 	stw	r2,0(sp)
 200cfa4:	d9800215 	stw	r6,8(sp)
 200cfa8:	dfc01015 	stw	ra,64(sp)
 200cfac:	d9c00315 	stw	r7,12(sp)
 200cfb0:	20044bc0 	call	20044bc <__unpack_d>
 200cfb4:	d9000204 	addi	r4,sp,8
 200cfb8:	800b883a 	mov	r5,r16
 200cfbc:	20044bc0 	call	20044bc <__unpack_d>
 200cfc0:	d8800417 	ldw	r2,16(sp)
 200cfc4:	00c00044 	movi	r3,1
 200cfc8:	01bfffc4 	movi	r6,-1
 200cfcc:	1880062e 	bgeu	r3,r2,200cfe8 <__gedf2+0x70>
 200cfd0:	d8800917 	ldw	r2,36(sp)
 200cfd4:	8809883a 	mov	r4,r17
 200cfd8:	800b883a 	mov	r5,r16
 200cfdc:	1880022e 	bgeu	r3,r2,200cfe8 <__gedf2+0x70>
 200cfe0:	20045f40 	call	20045f4 <__fpcmp_parts_d>
 200cfe4:	100d883a 	mov	r6,r2
 200cfe8:	3005883a 	mov	r2,r6
 200cfec:	dfc01017 	ldw	ra,64(sp)
 200cff0:	dc400f17 	ldw	r17,60(sp)
 200cff4:	dc000e17 	ldw	r16,56(sp)
 200cff8:	dec01104 	addi	sp,sp,68
 200cffc:	f800283a 	ret

0200d000 <__ltdf2>:
 200d000:	deffef04 	addi	sp,sp,-68
 200d004:	dc400f15 	stw	r17,60(sp)
 200d008:	dc400404 	addi	r17,sp,16
 200d00c:	2005883a 	mov	r2,r4
 200d010:	2807883a 	mov	r3,r5
 200d014:	dc000e15 	stw	r16,56(sp)
 200d018:	d809883a 	mov	r4,sp
 200d01c:	880b883a 	mov	r5,r17
 200d020:	dc000904 	addi	r16,sp,36
 200d024:	d8c00115 	stw	r3,4(sp)
 200d028:	d8800015 	stw	r2,0(sp)
 200d02c:	d9800215 	stw	r6,8(sp)
 200d030:	dfc01015 	stw	ra,64(sp)
 200d034:	d9c00315 	stw	r7,12(sp)
 200d038:	20044bc0 	call	20044bc <__unpack_d>
 200d03c:	d9000204 	addi	r4,sp,8
 200d040:	800b883a 	mov	r5,r16
 200d044:	20044bc0 	call	20044bc <__unpack_d>
 200d048:	d8800417 	ldw	r2,16(sp)
 200d04c:	00c00044 	movi	r3,1
 200d050:	180d883a 	mov	r6,r3
 200d054:	1880062e 	bgeu	r3,r2,200d070 <__ltdf2+0x70>
 200d058:	d8800917 	ldw	r2,36(sp)
 200d05c:	8809883a 	mov	r4,r17
 200d060:	800b883a 	mov	r5,r16
 200d064:	1880022e 	bgeu	r3,r2,200d070 <__ltdf2+0x70>
 200d068:	20045f40 	call	20045f4 <__fpcmp_parts_d>
 200d06c:	100d883a 	mov	r6,r2
 200d070:	3005883a 	mov	r2,r6
 200d074:	dfc01017 	ldw	ra,64(sp)
 200d078:	dc400f17 	ldw	r17,60(sp)
 200d07c:	dc000e17 	ldw	r16,56(sp)
 200d080:	dec01104 	addi	sp,sp,68
 200d084:	f800283a 	ret

0200d088 <__muldi3>:
 200d088:	defff204 	addi	sp,sp,-56
 200d08c:	df000c15 	stw	fp,48(sp)
 200d090:	3038d43a 	srli	fp,r6,16
 200d094:	dd000815 	stw	r20,32(sp)
 200d098:	dc400515 	stw	r17,20(sp)
 200d09c:	2028d43a 	srli	r20,r4,16
 200d0a0:	247fffcc 	andi	r17,r4,65535
 200d0a4:	dc000415 	stw	r16,16(sp)
 200d0a8:	343fffcc 	andi	r16,r6,65535
 200d0ac:	dcc00715 	stw	r19,28(sp)
 200d0b0:	d9000015 	stw	r4,0(sp)
 200d0b4:	2827883a 	mov	r19,r5
 200d0b8:	8809883a 	mov	r4,r17
 200d0bc:	d9400115 	stw	r5,4(sp)
 200d0c0:	800b883a 	mov	r5,r16
 200d0c4:	d9800215 	stw	r6,8(sp)
 200d0c8:	dfc00d15 	stw	ra,52(sp)
 200d0cc:	d9c00315 	stw	r7,12(sp)
 200d0d0:	dd800a15 	stw	r22,40(sp)
 200d0d4:	dd400915 	stw	r21,36(sp)
 200d0d8:	302d883a 	mov	r22,r6
 200d0dc:	ddc00b15 	stw	r23,44(sp)
 200d0e0:	dc800615 	stw	r18,24(sp)
 200d0e4:	20040f00 	call	20040f0 <__mulsi3>
 200d0e8:	8809883a 	mov	r4,r17
 200d0ec:	e00b883a 	mov	r5,fp
 200d0f0:	102b883a 	mov	r21,r2
 200d0f4:	20040f00 	call	20040f0 <__mulsi3>
 200d0f8:	800b883a 	mov	r5,r16
 200d0fc:	a009883a 	mov	r4,r20
 200d100:	1023883a 	mov	r17,r2
 200d104:	20040f00 	call	20040f0 <__mulsi3>
 200d108:	a009883a 	mov	r4,r20
 200d10c:	e00b883a 	mov	r5,fp
 200d110:	1021883a 	mov	r16,r2
 200d114:	20040f00 	call	20040f0 <__mulsi3>
 200d118:	a8ffffcc 	andi	r3,r21,65535
 200d11c:	a82ad43a 	srli	r21,r21,16
 200d120:	8c23883a 	add	r17,r17,r16
 200d124:	1011883a 	mov	r8,r2
 200d128:	ac6b883a 	add	r21,r21,r17
 200d12c:	a804943a 	slli	r2,r21,16
 200d130:	b009883a 	mov	r4,r22
 200d134:	980b883a 	mov	r5,r19
 200d138:	10c7883a 	add	r3,r2,r3
 200d13c:	a812d43a 	srli	r9,r21,16
 200d140:	180d883a 	mov	r6,r3
 200d144:	ac00022e 	bgeu	r21,r16,200d150 <__muldi3+0xc8>
 200d148:	00800074 	movhi	r2,1
 200d14c:	4091883a 	add	r8,r8,r2
 200d150:	4267883a 	add	r19,r8,r9
 200d154:	302d883a 	mov	r22,r6
 200d158:	20040f00 	call	20040f0 <__mulsi3>
 200d15c:	d9400317 	ldw	r5,12(sp)
 200d160:	d9000017 	ldw	r4,0(sp)
 200d164:	1023883a 	mov	r17,r2
 200d168:	20040f00 	call	20040f0 <__mulsi3>
 200d16c:	14cb883a 	add	r5,r2,r19
 200d170:	894b883a 	add	r5,r17,r5
 200d174:	b005883a 	mov	r2,r22
 200d178:	2807883a 	mov	r3,r5
 200d17c:	dfc00d17 	ldw	ra,52(sp)
 200d180:	df000c17 	ldw	fp,48(sp)
 200d184:	ddc00b17 	ldw	r23,44(sp)
 200d188:	dd800a17 	ldw	r22,40(sp)
 200d18c:	dd400917 	ldw	r21,36(sp)
 200d190:	dd000817 	ldw	r20,32(sp)
 200d194:	dcc00717 	ldw	r19,28(sp)
 200d198:	dc800617 	ldw	r18,24(sp)
 200d19c:	dc400517 	ldw	r17,20(sp)
 200d1a0:	dc000417 	ldw	r16,16(sp)
 200d1a4:	dec00e04 	addi	sp,sp,56
 200d1a8:	f800283a 	ret

0200d1ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200d1ac:	defff804 	addi	sp,sp,-32
 200d1b0:	dfc00715 	stw	ra,28(sp)
 200d1b4:	df000615 	stw	fp,24(sp)
 200d1b8:	df000604 	addi	fp,sp,24
 200d1bc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200d1c0:	e0bffc17 	ldw	r2,-16(fp)
 200d1c4:	1004803a 	cmplt	r2,r2,zero
 200d1c8:	1000091e 	bne	r2,zero,200d1f0 <close+0x44>
 200d1cc:	e13ffc17 	ldw	r4,-16(fp)
 200d1d0:	01400304 	movi	r5,12
 200d1d4:	20040f00 	call	20040f0 <__mulsi3>
 200d1d8:	1007883a 	mov	r3,r2
 200d1dc:	00808074 	movhi	r2,513
 200d1e0:	10889904 	addi	r2,r2,8804
 200d1e4:	1887883a 	add	r3,r3,r2
 200d1e8:	e0ffff15 	stw	r3,-4(fp)
 200d1ec:	00000106 	br	200d1f4 <close+0x48>
 200d1f0:	e03fff15 	stw	zero,-4(fp)
 200d1f4:	e0bfff17 	ldw	r2,-4(fp)
 200d1f8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 200d1fc:	e0bffb17 	ldw	r2,-20(fp)
 200d200:	1005003a 	cmpeq	r2,r2,zero
 200d204:	10001d1e 	bne	r2,zero,200d27c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200d208:	e0bffb17 	ldw	r2,-20(fp)
 200d20c:	10800017 	ldw	r2,0(r2)
 200d210:	10800417 	ldw	r2,16(r2)
 200d214:	1005003a 	cmpeq	r2,r2,zero
 200d218:	1000071e 	bne	r2,zero,200d238 <close+0x8c>
 200d21c:	e0bffb17 	ldw	r2,-20(fp)
 200d220:	10800017 	ldw	r2,0(r2)
 200d224:	10800417 	ldw	r2,16(r2)
 200d228:	e13ffb17 	ldw	r4,-20(fp)
 200d22c:	103ee83a 	callr	r2
 200d230:	e0bffe15 	stw	r2,-8(fp)
 200d234:	00000106 	br	200d23c <close+0x90>
 200d238:	e03ffe15 	stw	zero,-8(fp)
 200d23c:	e0bffe17 	ldw	r2,-8(fp)
 200d240:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200d244:	e13ffc17 	ldw	r4,-16(fp)
 200d248:	200dbc40 	call	200dbc4 <alt_release_fd>
    if (rval < 0)
 200d24c:	e0bffa17 	ldw	r2,-24(fp)
 200d250:	1004403a 	cmpge	r2,r2,zero
 200d254:	1000071e 	bne	r2,zero,200d274 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 200d258:	200d2ac0 	call	200d2ac <alt_get_errno>
 200d25c:	e0fffa17 	ldw	r3,-24(fp)
 200d260:	00c7c83a 	sub	r3,zero,r3
 200d264:	10c00015 	stw	r3,0(r2)
      return -1;
 200d268:	00bfffc4 	movi	r2,-1
 200d26c:	e0bffd15 	stw	r2,-12(fp)
 200d270:	00000806 	br	200d294 <close+0xe8>
    }
    return 0;
 200d274:	e03ffd15 	stw	zero,-12(fp)
 200d278:	00000606 	br	200d294 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d27c:	200d2ac0 	call	200d2ac <alt_get_errno>
 200d280:	1007883a 	mov	r3,r2
 200d284:	00801444 	movi	r2,81
 200d288:	18800015 	stw	r2,0(r3)
    return -1;
 200d28c:	00bfffc4 	movi	r2,-1
 200d290:	e0bffd15 	stw	r2,-12(fp)
 200d294:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 200d298:	e037883a 	mov	sp,fp
 200d29c:	dfc00117 	ldw	ra,4(sp)
 200d2a0:	df000017 	ldw	fp,0(sp)
 200d2a4:	dec00204 	addi	sp,sp,8
 200d2a8:	f800283a 	ret

0200d2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d2ac:	defffd04 	addi	sp,sp,-12
 200d2b0:	dfc00215 	stw	ra,8(sp)
 200d2b4:	df000115 	stw	fp,4(sp)
 200d2b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d2bc:	00808074 	movhi	r2,513
 200d2c0:	108d7204 	addi	r2,r2,13768
 200d2c4:	10800017 	ldw	r2,0(r2)
 200d2c8:	1005003a 	cmpeq	r2,r2,zero
 200d2cc:	1000061e 	bne	r2,zero,200d2e8 <alt_get_errno+0x3c>
 200d2d0:	00808074 	movhi	r2,513
 200d2d4:	108d7204 	addi	r2,r2,13768
 200d2d8:	10800017 	ldw	r2,0(r2)
 200d2dc:	103ee83a 	callr	r2
 200d2e0:	e0bfff15 	stw	r2,-4(fp)
 200d2e4:	00000306 	br	200d2f4 <alt_get_errno+0x48>
 200d2e8:	00808074 	movhi	r2,513
 200d2ec:	1094ed04 	addi	r2,r2,21428
 200d2f0:	e0bfff15 	stw	r2,-4(fp)
 200d2f4:	e0bfff17 	ldw	r2,-4(fp)
}
 200d2f8:	e037883a 	mov	sp,fp
 200d2fc:	dfc00117 	ldw	ra,4(sp)
 200d300:	df000017 	ldw	fp,0(sp)
 200d304:	dec00204 	addi	sp,sp,8
 200d308:	f800283a 	ret

0200d30c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200d30c:	defffc04 	addi	sp,sp,-16
 200d310:	df000315 	stw	fp,12(sp)
 200d314:	df000304 	addi	fp,sp,12
 200d318:	e13ffd15 	stw	r4,-12(fp)
 200d31c:	e17ffe15 	stw	r5,-8(fp)
 200d320:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200d324:	e0bfff17 	ldw	r2,-4(fp)
}
 200d328:	e037883a 	mov	sp,fp
 200d32c:	df000017 	ldw	fp,0(sp)
 200d330:	dec00104 	addi	sp,sp,4
 200d334:	f800283a 	ret

0200d338 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200d338:	defff904 	addi	sp,sp,-28
 200d33c:	dfc00615 	stw	ra,24(sp)
 200d340:	df000515 	stw	fp,20(sp)
 200d344:	df000504 	addi	fp,sp,20
 200d348:	e13ffc15 	stw	r4,-16(fp)
 200d34c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d350:	e0bffc17 	ldw	r2,-16(fp)
 200d354:	1004803a 	cmplt	r2,r2,zero
 200d358:	1000091e 	bne	r2,zero,200d380 <fstat+0x48>
 200d35c:	e13ffc17 	ldw	r4,-16(fp)
 200d360:	01400304 	movi	r5,12
 200d364:	20040f00 	call	20040f0 <__mulsi3>
 200d368:	1007883a 	mov	r3,r2
 200d36c:	00808074 	movhi	r2,513
 200d370:	10889904 	addi	r2,r2,8804
 200d374:	1887883a 	add	r3,r3,r2
 200d378:	e0ffff15 	stw	r3,-4(fp)
 200d37c:	00000106 	br	200d384 <fstat+0x4c>
 200d380:	e03fff15 	stw	zero,-4(fp)
 200d384:	e0bfff17 	ldw	r2,-4(fp)
 200d388:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200d38c:	e0bffb17 	ldw	r2,-20(fp)
 200d390:	1005003a 	cmpeq	r2,r2,zero
 200d394:	1000121e 	bne	r2,zero,200d3e0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200d398:	e0bffb17 	ldw	r2,-20(fp)
 200d39c:	10800017 	ldw	r2,0(r2)
 200d3a0:	10800817 	ldw	r2,32(r2)
 200d3a4:	1005003a 	cmpeq	r2,r2,zero
 200d3a8:	1000081e 	bne	r2,zero,200d3cc <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 200d3ac:	e0bffb17 	ldw	r2,-20(fp)
 200d3b0:	10800017 	ldw	r2,0(r2)
 200d3b4:	10800817 	ldw	r2,32(r2)
 200d3b8:	e13ffb17 	ldw	r4,-20(fp)
 200d3bc:	e17ffd17 	ldw	r5,-12(fp)
 200d3c0:	103ee83a 	callr	r2
 200d3c4:	e0bffe15 	stw	r2,-8(fp)
 200d3c8:	00000b06 	br	200d3f8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200d3cc:	e0fffd17 	ldw	r3,-12(fp)
 200d3d0:	00880004 	movi	r2,8192
 200d3d4:	18800115 	stw	r2,4(r3)
      return 0;
 200d3d8:	e03ffe15 	stw	zero,-8(fp)
 200d3dc:	00000606 	br	200d3f8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d3e0:	200d4100 	call	200d410 <alt_get_errno>
 200d3e4:	1007883a 	mov	r3,r2
 200d3e8:	00801444 	movi	r2,81
 200d3ec:	18800015 	stw	r2,0(r3)
    return -1;
 200d3f0:	00bfffc4 	movi	r2,-1
 200d3f4:	e0bffe15 	stw	r2,-8(fp)
 200d3f8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200d3fc:	e037883a 	mov	sp,fp
 200d400:	dfc00117 	ldw	ra,4(sp)
 200d404:	df000017 	ldw	fp,0(sp)
 200d408:	dec00204 	addi	sp,sp,8
 200d40c:	f800283a 	ret

0200d410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d410:	defffd04 	addi	sp,sp,-12
 200d414:	dfc00215 	stw	ra,8(sp)
 200d418:	df000115 	stw	fp,4(sp)
 200d41c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d420:	00808074 	movhi	r2,513
 200d424:	108d7204 	addi	r2,r2,13768
 200d428:	10800017 	ldw	r2,0(r2)
 200d42c:	1005003a 	cmpeq	r2,r2,zero
 200d430:	1000061e 	bne	r2,zero,200d44c <alt_get_errno+0x3c>
 200d434:	00808074 	movhi	r2,513
 200d438:	108d7204 	addi	r2,r2,13768
 200d43c:	10800017 	ldw	r2,0(r2)
 200d440:	103ee83a 	callr	r2
 200d444:	e0bfff15 	stw	r2,-4(fp)
 200d448:	00000306 	br	200d458 <alt_get_errno+0x48>
 200d44c:	00808074 	movhi	r2,513
 200d450:	1094ed04 	addi	r2,r2,21428
 200d454:	e0bfff15 	stw	r2,-4(fp)
 200d458:	e0bfff17 	ldw	r2,-4(fp)
}
 200d45c:	e037883a 	mov	sp,fp
 200d460:	dfc00117 	ldw	ra,4(sp)
 200d464:	df000017 	ldw	fp,0(sp)
 200d468:	dec00204 	addi	sp,sp,8
 200d46c:	f800283a 	ret

0200d470 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 200d470:	deffef04 	addi	sp,sp,-68
 200d474:	df001015 	stw	fp,64(sp)
 200d478:	df001004 	addi	fp,sp,64
 200d47c:	e13ffc15 	stw	r4,-16(fp)
 200d480:	e17ffd15 	stw	r5,-12(fp)
 200d484:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 200d488:	00bffa84 	movi	r2,-22
 200d48c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200d490:	e0bffc17 	ldw	r2,-16(fp)
 200d494:	10800828 	cmpgeui	r2,r2,32
 200d498:	1000601e 	bne	r2,zero,200d61c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d49c:	0005303a 	rdctl	r2,status
 200d4a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d4a4:	e0fff917 	ldw	r3,-28(fp)
 200d4a8:	00bfff84 	movi	r2,-2
 200d4ac:	1884703a 	and	r2,r3,r2
 200d4b0:	1001703a 	wrctl	status,r2
  
  return context;
 200d4b4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 200d4b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 200d4bc:	e0bffc17 	ldw	r2,-16(fp)
 200d4c0:	00c080f4 	movhi	r3,515
 200d4c4:	18ff3a04 	addi	r3,r3,-792
 200d4c8:	100490fa 	slli	r2,r2,3
 200d4cc:	10c7883a 	add	r3,r2,r3
 200d4d0:	e0bffe17 	ldw	r2,-8(fp)
 200d4d4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 200d4d8:	e0bffc17 	ldw	r2,-16(fp)
 200d4dc:	00c080f4 	movhi	r3,515
 200d4e0:	18ff3a04 	addi	r3,r3,-792
 200d4e4:	100490fa 	slli	r2,r2,3
 200d4e8:	10c5883a 	add	r2,r2,r3
 200d4ec:	10c00104 	addi	r3,r2,4
 200d4f0:	e0bffd17 	ldw	r2,-12(fp)
 200d4f4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 200d4f8:	e0bffe17 	ldw	r2,-8(fp)
 200d4fc:	1005003a 	cmpeq	r2,r2,zero
 200d500:	1000201e 	bne	r2,zero,200d584 <alt_irq_register+0x114>
 200d504:	e0bffc17 	ldw	r2,-16(fp)
 200d508:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d50c:	0005303a 	rdctl	r2,status
 200d510:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d514:	e0fff617 	ldw	r3,-40(fp)
 200d518:	00bfff84 	movi	r2,-2
 200d51c:	1884703a 	and	r2,r3,r2
 200d520:	1001703a 	wrctl	status,r2
  
  return context;
 200d524:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200d528:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 200d52c:	e0fff717 	ldw	r3,-36(fp)
 200d530:	00800044 	movi	r2,1
 200d534:	10c4983a 	sll	r2,r2,r3
 200d538:	1007883a 	mov	r3,r2
 200d53c:	00808074 	movhi	r2,513
 200d540:	1094ee04 	addi	r2,r2,21432
 200d544:	10800017 	ldw	r2,0(r2)
 200d548:	1886b03a 	or	r3,r3,r2
 200d54c:	00808074 	movhi	r2,513
 200d550:	1094ee04 	addi	r2,r2,21432
 200d554:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200d558:	00808074 	movhi	r2,513
 200d55c:	1094ee04 	addi	r2,r2,21432
 200d560:	10800017 	ldw	r2,0(r2)
 200d564:	100170fa 	wrctl	ienable,r2
 200d568:	e0bff817 	ldw	r2,-32(fp)
 200d56c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d570:	e0bff517 	ldw	r2,-44(fp)
 200d574:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200d578:	0005883a 	mov	r2,zero
 200d57c:	e0bfff15 	stw	r2,-4(fp)
 200d580:	00002006 	br	200d604 <alt_irq_register+0x194>
 200d584:	e0bffc17 	ldw	r2,-16(fp)
 200d588:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d58c:	0005303a 	rdctl	r2,status
 200d590:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d594:	e0fff217 	ldw	r3,-56(fp)
 200d598:	00bfff84 	movi	r2,-2
 200d59c:	1884703a 	and	r2,r3,r2
 200d5a0:	1001703a 	wrctl	status,r2
  
  return context;
 200d5a4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200d5a8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 200d5ac:	e0fff317 	ldw	r3,-52(fp)
 200d5b0:	00800044 	movi	r2,1
 200d5b4:	10c4983a 	sll	r2,r2,r3
 200d5b8:	0084303a 	nor	r2,zero,r2
 200d5bc:	1007883a 	mov	r3,r2
 200d5c0:	00808074 	movhi	r2,513
 200d5c4:	1094ee04 	addi	r2,r2,21432
 200d5c8:	10800017 	ldw	r2,0(r2)
 200d5cc:	1886703a 	and	r3,r3,r2
 200d5d0:	00808074 	movhi	r2,513
 200d5d4:	1094ee04 	addi	r2,r2,21432
 200d5d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200d5dc:	00808074 	movhi	r2,513
 200d5e0:	1094ee04 	addi	r2,r2,21432
 200d5e4:	10800017 	ldw	r2,0(r2)
 200d5e8:	100170fa 	wrctl	ienable,r2
 200d5ec:	e0bff417 	ldw	r2,-48(fp)
 200d5f0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d5f4:	e0bff117 	ldw	r2,-60(fp)
 200d5f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200d5fc:	0005883a 	mov	r2,zero
 200d600:	e0bfff15 	stw	r2,-4(fp)
 200d604:	e0bfff17 	ldw	r2,-4(fp)
 200d608:	e0bffb15 	stw	r2,-20(fp)
 200d60c:	e0bffa17 	ldw	r2,-24(fp)
 200d610:	e0bff015 	stw	r2,-64(fp)
 200d614:	e0bff017 	ldw	r2,-64(fp)
 200d618:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 200d61c:	e0bffb17 	ldw	r2,-20(fp)
}
 200d620:	e037883a 	mov	sp,fp
 200d624:	df000017 	ldw	fp,0(sp)
 200d628:	dec00104 	addi	sp,sp,4
 200d62c:	f800283a 	ret

0200d630 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200d630:	deffeb04 	addi	sp,sp,-84
 200d634:	dfc01415 	stw	ra,80(sp)
 200d638:	df001315 	stw	fp,76(sp)
 200d63c:	df001304 	addi	fp,sp,76
 200d640:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d644:	e0bffd17 	ldw	r2,-12(fp)
 200d648:	1004803a 	cmplt	r2,r2,zero
 200d64c:	1000091e 	bne	r2,zero,200d674 <isatty+0x44>
 200d650:	e13ffd17 	ldw	r4,-12(fp)
 200d654:	01400304 	movi	r5,12
 200d658:	20040f00 	call	20040f0 <__mulsi3>
 200d65c:	1007883a 	mov	r3,r2
 200d660:	00808074 	movhi	r2,513
 200d664:	10889904 	addi	r2,r2,8804
 200d668:	1887883a 	add	r3,r3,r2
 200d66c:	e0ffff15 	stw	r3,-4(fp)
 200d670:	00000106 	br	200d678 <isatty+0x48>
 200d674:	e03fff15 	stw	zero,-4(fp)
 200d678:	e0bfff17 	ldw	r2,-4(fp)
 200d67c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 200d680:	e0bfed17 	ldw	r2,-76(fp)
 200d684:	1005003a 	cmpeq	r2,r2,zero
 200d688:	10000f1e 	bne	r2,zero,200d6c8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200d68c:	e0bfed17 	ldw	r2,-76(fp)
 200d690:	10800017 	ldw	r2,0(r2)
 200d694:	10800817 	ldw	r2,32(r2)
 200d698:	1004c03a 	cmpne	r2,r2,zero
 200d69c:	1000031e 	bne	r2,zero,200d6ac <isatty+0x7c>
    {
      return 1;
 200d6a0:	00800044 	movi	r2,1
 200d6a4:	e0bffe15 	stw	r2,-8(fp)
 200d6a8:	00000c06 	br	200d6dc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200d6ac:	e17fee04 	addi	r5,fp,-72
 200d6b0:	e13ffd17 	ldw	r4,-12(fp)
 200d6b4:	200d3380 	call	200d338 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200d6b8:	e0bfef17 	ldw	r2,-68(fp)
 200d6bc:	10880020 	cmpeqi	r2,r2,8192
 200d6c0:	e0bffe15 	stw	r2,-8(fp)
 200d6c4:	00000506 	br	200d6dc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200d6c8:	200d6f40 	call	200d6f4 <alt_get_errno>
 200d6cc:	1007883a 	mov	r3,r2
 200d6d0:	00801444 	movi	r2,81
 200d6d4:	18800015 	stw	r2,0(r3)
    return 0;
 200d6d8:	e03ffe15 	stw	zero,-8(fp)
 200d6dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200d6e0:	e037883a 	mov	sp,fp
 200d6e4:	dfc00117 	ldw	ra,4(sp)
 200d6e8:	df000017 	ldw	fp,0(sp)
 200d6ec:	dec00204 	addi	sp,sp,8
 200d6f0:	f800283a 	ret

0200d6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d6f4:	defffd04 	addi	sp,sp,-12
 200d6f8:	dfc00215 	stw	ra,8(sp)
 200d6fc:	df000115 	stw	fp,4(sp)
 200d700:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d704:	00808074 	movhi	r2,513
 200d708:	108d7204 	addi	r2,r2,13768
 200d70c:	10800017 	ldw	r2,0(r2)
 200d710:	1005003a 	cmpeq	r2,r2,zero
 200d714:	1000061e 	bne	r2,zero,200d730 <alt_get_errno+0x3c>
 200d718:	00808074 	movhi	r2,513
 200d71c:	108d7204 	addi	r2,r2,13768
 200d720:	10800017 	ldw	r2,0(r2)
 200d724:	103ee83a 	callr	r2
 200d728:	e0bfff15 	stw	r2,-4(fp)
 200d72c:	00000306 	br	200d73c <alt_get_errno+0x48>
 200d730:	00808074 	movhi	r2,513
 200d734:	1094ed04 	addi	r2,r2,21428
 200d738:	e0bfff15 	stw	r2,-4(fp)
 200d73c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d740:	e037883a 	mov	sp,fp
 200d744:	dfc00117 	ldw	ra,4(sp)
 200d748:	df000017 	ldw	fp,0(sp)
 200d74c:	dec00204 	addi	sp,sp,8
 200d750:	f800283a 	ret

0200d754 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200d754:	defffe04 	addi	sp,sp,-8
 200d758:	dfc00115 	stw	ra,4(sp)
 200d75c:	df000015 	stw	fp,0(sp)
 200d760:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200d764:	01008074 	movhi	r4,513
 200d768:	210d7904 	addi	r4,r4,13796
 200d76c:	01408074 	movhi	r5,513
 200d770:	29464a04 	addi	r5,r5,6440
 200d774:	01808074 	movhi	r6,513
 200d778:	318d7904 	addi	r6,r6,13796
 200d77c:	200d7d40 	call	200d7d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200d780:	01008034 	movhi	r4,512
 200d784:	21000804 	addi	r4,r4,32
 200d788:	01408034 	movhi	r5,512
 200d78c:	29400804 	addi	r5,r5,32
 200d790:	01808034 	movhi	r6,512
 200d794:	31806d04 	addi	r6,r6,436
 200d798:	200d7d40 	call	200d7d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200d79c:	01008074 	movhi	r4,513
 200d7a0:	21040d04 	addi	r4,r4,4148
 200d7a4:	01408074 	movhi	r5,513
 200d7a8:	29440d04 	addi	r5,r5,4148
 200d7ac:	01808074 	movhi	r6,513
 200d7b0:	31864a04 	addi	r6,r6,6440
 200d7b4:	200d7d40 	call	200d7d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200d7b8:	200fdbc0 	call	200fdbc <alt_dcache_flush_all>
  alt_icache_flush_all();
 200d7bc:	200ffb40 	call	200ffb4 <alt_icache_flush_all>
}
 200d7c0:	e037883a 	mov	sp,fp
 200d7c4:	dfc00117 	ldw	ra,4(sp)
 200d7c8:	df000017 	ldw	fp,0(sp)
 200d7cc:	dec00204 	addi	sp,sp,8
 200d7d0:	f800283a 	ret

0200d7d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200d7d4:	defffc04 	addi	sp,sp,-16
 200d7d8:	df000315 	stw	fp,12(sp)
 200d7dc:	df000304 	addi	fp,sp,12
 200d7e0:	e13ffd15 	stw	r4,-12(fp)
 200d7e4:	e17ffe15 	stw	r5,-8(fp)
 200d7e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200d7ec:	e0fffe17 	ldw	r3,-8(fp)
 200d7f0:	e0bffd17 	ldw	r2,-12(fp)
 200d7f4:	18800e26 	beq	r3,r2,200d830 <alt_load_section+0x5c>
  {
    while( to != end )
 200d7f8:	00000a06 	br	200d824 <alt_load_section+0x50>
    {
      *to++ = *from++;
 200d7fc:	e0bffd17 	ldw	r2,-12(fp)
 200d800:	10c00017 	ldw	r3,0(r2)
 200d804:	e0bffe17 	ldw	r2,-8(fp)
 200d808:	10c00015 	stw	r3,0(r2)
 200d80c:	e0bffe17 	ldw	r2,-8(fp)
 200d810:	10800104 	addi	r2,r2,4
 200d814:	e0bffe15 	stw	r2,-8(fp)
 200d818:	e0bffd17 	ldw	r2,-12(fp)
 200d81c:	10800104 	addi	r2,r2,4
 200d820:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200d824:	e0fffe17 	ldw	r3,-8(fp)
 200d828:	e0bfff17 	ldw	r2,-4(fp)
 200d82c:	18bff31e 	bne	r3,r2,200d7fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200d830:	e037883a 	mov	sp,fp
 200d834:	df000017 	ldw	fp,0(sp)
 200d838:	dec00104 	addi	sp,sp,4
 200d83c:	f800283a 	ret

0200d840 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200d840:	defff804 	addi	sp,sp,-32
 200d844:	dfc00715 	stw	ra,28(sp)
 200d848:	df000615 	stw	fp,24(sp)
 200d84c:	df000604 	addi	fp,sp,24
 200d850:	e13ffc15 	stw	r4,-16(fp)
 200d854:	e17ffd15 	stw	r5,-12(fp)
 200d858:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200d85c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200d860:	e0bffc17 	ldw	r2,-16(fp)
 200d864:	1004803a 	cmplt	r2,r2,zero
 200d868:	1000091e 	bne	r2,zero,200d890 <lseek+0x50>
 200d86c:	e13ffc17 	ldw	r4,-16(fp)
 200d870:	01400304 	movi	r5,12
 200d874:	20040f00 	call	20040f0 <__mulsi3>
 200d878:	1007883a 	mov	r3,r2
 200d87c:	00808074 	movhi	r2,513
 200d880:	10889904 	addi	r2,r2,8804
 200d884:	1887883a 	add	r3,r3,r2
 200d888:	e0ffff15 	stw	r3,-4(fp)
 200d88c:	00000106 	br	200d894 <lseek+0x54>
 200d890:	e03fff15 	stw	zero,-4(fp)
 200d894:	e0bfff17 	ldw	r2,-4(fp)
 200d898:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 200d89c:	e0bffb17 	ldw	r2,-20(fp)
 200d8a0:	1005003a 	cmpeq	r2,r2,zero
 200d8a4:	1000111e 	bne	r2,zero,200d8ec <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200d8a8:	e0bffb17 	ldw	r2,-20(fp)
 200d8ac:	10800017 	ldw	r2,0(r2)
 200d8b0:	10800717 	ldw	r2,28(r2)
 200d8b4:	1005003a 	cmpeq	r2,r2,zero
 200d8b8:	1000091e 	bne	r2,zero,200d8e0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200d8bc:	e0bffb17 	ldw	r2,-20(fp)
 200d8c0:	10800017 	ldw	r2,0(r2)
 200d8c4:	10800717 	ldw	r2,28(r2)
 200d8c8:	e13ffb17 	ldw	r4,-20(fp)
 200d8cc:	e17ffd17 	ldw	r5,-12(fp)
 200d8d0:	e1bffe17 	ldw	r6,-8(fp)
 200d8d4:	103ee83a 	callr	r2
 200d8d8:	e0bffa15 	stw	r2,-24(fp)
 200d8dc:	00000506 	br	200d8f4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200d8e0:	00bfde84 	movi	r2,-134
 200d8e4:	e0bffa15 	stw	r2,-24(fp)
 200d8e8:	00000206 	br	200d8f4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 200d8ec:	00bfebc4 	movi	r2,-81
 200d8f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 200d8f4:	e0bffa17 	ldw	r2,-24(fp)
 200d8f8:	1004403a 	cmpge	r2,r2,zero
 200d8fc:	1000071e 	bne	r2,zero,200d91c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 200d900:	200d9340 	call	200d934 <alt_get_errno>
 200d904:	1007883a 	mov	r3,r2
 200d908:	e0bffa17 	ldw	r2,-24(fp)
 200d90c:	0085c83a 	sub	r2,zero,r2
 200d910:	18800015 	stw	r2,0(r3)
    rc = -1;
 200d914:	00bfffc4 	movi	r2,-1
 200d918:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 200d91c:	e0bffa17 	ldw	r2,-24(fp)
}
 200d920:	e037883a 	mov	sp,fp
 200d924:	dfc00117 	ldw	ra,4(sp)
 200d928:	df000017 	ldw	fp,0(sp)
 200d92c:	dec00204 	addi	sp,sp,8
 200d930:	f800283a 	ret

0200d934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d934:	defffd04 	addi	sp,sp,-12
 200d938:	dfc00215 	stw	ra,8(sp)
 200d93c:	df000115 	stw	fp,4(sp)
 200d940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200d944:	00808074 	movhi	r2,513
 200d948:	108d7204 	addi	r2,r2,13768
 200d94c:	10800017 	ldw	r2,0(r2)
 200d950:	1005003a 	cmpeq	r2,r2,zero
 200d954:	1000061e 	bne	r2,zero,200d970 <alt_get_errno+0x3c>
 200d958:	00808074 	movhi	r2,513
 200d95c:	108d7204 	addi	r2,r2,13768
 200d960:	10800017 	ldw	r2,0(r2)
 200d964:	103ee83a 	callr	r2
 200d968:	e0bfff15 	stw	r2,-4(fp)
 200d96c:	00000306 	br	200d97c <alt_get_errno+0x48>
 200d970:	00808074 	movhi	r2,513
 200d974:	1094ed04 	addi	r2,r2,21428
 200d978:	e0bfff15 	stw	r2,-4(fp)
 200d97c:	e0bfff17 	ldw	r2,-4(fp)
}
 200d980:	e037883a 	mov	sp,fp
 200d984:	dfc00117 	ldw	ra,4(sp)
 200d988:	df000017 	ldw	fp,0(sp)
 200d98c:	dec00204 	addi	sp,sp,8
 200d990:	f800283a 	ret

0200d994 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200d994:	defffd04 	addi	sp,sp,-12
 200d998:	dfc00215 	stw	ra,8(sp)
 200d99c:	df000115 	stw	fp,4(sp)
 200d9a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200d9a4:	0009883a 	mov	r4,zero
 200d9a8:	200deac0 	call	200deac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200d9ac:	200dee00 	call	200dee0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200d9b0:	01008074 	movhi	r4,513
 200d9b4:	21059a04 	addi	r4,r4,5736
 200d9b8:	01408074 	movhi	r5,513
 200d9bc:	29459a04 	addi	r5,r5,5736
 200d9c0:	01808074 	movhi	r6,513
 200d9c4:	31859a04 	addi	r6,r6,5736
 200d9c8:	20103880 	call	2010388 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200d9cc:	200feec0 	call	200feec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200d9d0:	01008074 	movhi	r4,513
 200d9d4:	213fd404 	addi	r4,r4,-176
 200d9d8:	2010bbc0 	call	2010bbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200d9dc:	d1279617 	ldw	r4,-25000(gp)
 200d9e0:	d1679717 	ldw	r5,-24996(gp)
 200d9e4:	d1a79817 	ldw	r6,-24992(gp)
 200d9e8:	2002e200 	call	2002e20 <main>
 200d9ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200d9f0:	01000044 	movi	r4,1
 200d9f4:	200d1ac0 	call	200d1ac <close>
  exit (result);
 200d9f8:	e13fff17 	ldw	r4,-4(fp)
 200d9fc:	2010bd00 	call	2010bd0 <exit>

0200da00 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200da00:	defffe04 	addi	sp,sp,-8
 200da04:	df000115 	stw	fp,4(sp)
 200da08:	df000104 	addi	fp,sp,4
 200da0c:	e13fff15 	stw	r4,-4(fp)
}
 200da10:	e037883a 	mov	sp,fp
 200da14:	df000017 	ldw	fp,0(sp)
 200da18:	dec00104 	addi	sp,sp,4
 200da1c:	f800283a 	ret

0200da20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200da20:	defffe04 	addi	sp,sp,-8
 200da24:	df000115 	stw	fp,4(sp)
 200da28:	df000104 	addi	fp,sp,4
 200da2c:	e13fff15 	stw	r4,-4(fp)
}
 200da30:	e037883a 	mov	sp,fp
 200da34:	df000017 	ldw	fp,0(sp)
 200da38:	dec00104 	addi	sp,sp,4
 200da3c:	f800283a 	ret

0200da40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200da40:	defff704 	addi	sp,sp,-36
 200da44:	dfc00815 	stw	ra,32(sp)
 200da48:	df000715 	stw	fp,28(sp)
 200da4c:	df000704 	addi	fp,sp,28
 200da50:	e13ffb15 	stw	r4,-20(fp)
 200da54:	e17ffc15 	stw	r5,-16(fp)
 200da58:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200da5c:	e0bffb17 	ldw	r2,-20(fp)
 200da60:	1004803a 	cmplt	r2,r2,zero
 200da64:	1000091e 	bne	r2,zero,200da8c <read+0x4c>
 200da68:	e13ffb17 	ldw	r4,-20(fp)
 200da6c:	01400304 	movi	r5,12
 200da70:	20040f00 	call	20040f0 <__mulsi3>
 200da74:	1007883a 	mov	r3,r2
 200da78:	00808074 	movhi	r2,513
 200da7c:	10889904 	addi	r2,r2,8804
 200da80:	1887883a 	add	r3,r3,r2
 200da84:	e0ffff15 	stw	r3,-4(fp)
 200da88:	00000106 	br	200da90 <read+0x50>
 200da8c:	e03fff15 	stw	zero,-4(fp)
 200da90:	e0bfff17 	ldw	r2,-4(fp)
 200da94:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200da98:	e0bffa17 	ldw	r2,-24(fp)
 200da9c:	1005003a 	cmpeq	r2,r2,zero
 200daa0:	1000241e 	bne	r2,zero,200db34 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200daa4:	e0bffa17 	ldw	r2,-24(fp)
 200daa8:	10800217 	ldw	r2,8(r2)
 200daac:	108000cc 	andi	r2,r2,3
 200dab0:	10800060 	cmpeqi	r2,r2,1
 200dab4:	10001a1e 	bne	r2,zero,200db20 <read+0xe0>
 200dab8:	e0bffa17 	ldw	r2,-24(fp)
 200dabc:	10800017 	ldw	r2,0(r2)
 200dac0:	10800517 	ldw	r2,20(r2)
 200dac4:	1005003a 	cmpeq	r2,r2,zero
 200dac8:	1000151e 	bne	r2,zero,200db20 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200dacc:	e0bffa17 	ldw	r2,-24(fp)
 200dad0:	10800017 	ldw	r2,0(r2)
 200dad4:	10800517 	ldw	r2,20(r2)
 200dad8:	e17ffc17 	ldw	r5,-16(fp)
 200dadc:	e1bffd17 	ldw	r6,-12(fp)
 200dae0:	e13ffa17 	ldw	r4,-24(fp)
 200dae4:	103ee83a 	callr	r2
 200dae8:	e0bff915 	stw	r2,-28(fp)
 200daec:	e0bff917 	ldw	r2,-28(fp)
 200daf0:	1004403a 	cmpge	r2,r2,zero
 200daf4:	1000071e 	bne	r2,zero,200db14 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 200daf8:	200db640 	call	200db64 <alt_get_errno>
 200dafc:	e0fff917 	ldw	r3,-28(fp)
 200db00:	00c7c83a 	sub	r3,zero,r3
 200db04:	10c00015 	stw	r3,0(r2)
          return -1;
 200db08:	00bfffc4 	movi	r2,-1
 200db0c:	e0bffe15 	stw	r2,-8(fp)
 200db10:	00000e06 	br	200db4c <read+0x10c>
        }
        return rval;
 200db14:	e0bff917 	ldw	r2,-28(fp)
 200db18:	e0bffe15 	stw	r2,-8(fp)
 200db1c:	00000b06 	br	200db4c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200db20:	200db640 	call	200db64 <alt_get_errno>
 200db24:	1007883a 	mov	r3,r2
 200db28:	00800344 	movi	r2,13
 200db2c:	18800015 	stw	r2,0(r3)
 200db30:	00000406 	br	200db44 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200db34:	200db640 	call	200db64 <alt_get_errno>
 200db38:	1007883a 	mov	r3,r2
 200db3c:	00801444 	movi	r2,81
 200db40:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200db44:	00bfffc4 	movi	r2,-1
 200db48:	e0bffe15 	stw	r2,-8(fp)
 200db4c:	e0bffe17 	ldw	r2,-8(fp)
}
 200db50:	e037883a 	mov	sp,fp
 200db54:	dfc00117 	ldw	ra,4(sp)
 200db58:	df000017 	ldw	fp,0(sp)
 200db5c:	dec00204 	addi	sp,sp,8
 200db60:	f800283a 	ret

0200db64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200db64:	defffd04 	addi	sp,sp,-12
 200db68:	dfc00215 	stw	ra,8(sp)
 200db6c:	df000115 	stw	fp,4(sp)
 200db70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200db74:	00808074 	movhi	r2,513
 200db78:	108d7204 	addi	r2,r2,13768
 200db7c:	10800017 	ldw	r2,0(r2)
 200db80:	1005003a 	cmpeq	r2,r2,zero
 200db84:	1000061e 	bne	r2,zero,200dba0 <alt_get_errno+0x3c>
 200db88:	00808074 	movhi	r2,513
 200db8c:	108d7204 	addi	r2,r2,13768
 200db90:	10800017 	ldw	r2,0(r2)
 200db94:	103ee83a 	callr	r2
 200db98:	e0bfff15 	stw	r2,-4(fp)
 200db9c:	00000306 	br	200dbac <alt_get_errno+0x48>
 200dba0:	00808074 	movhi	r2,513
 200dba4:	1094ed04 	addi	r2,r2,21428
 200dba8:	e0bfff15 	stw	r2,-4(fp)
 200dbac:	e0bfff17 	ldw	r2,-4(fp)
}
 200dbb0:	e037883a 	mov	sp,fp
 200dbb4:	dfc00117 	ldw	ra,4(sp)
 200dbb8:	df000017 	ldw	fp,0(sp)
 200dbbc:	dec00204 	addi	sp,sp,8
 200dbc0:	f800283a 	ret

0200dbc4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200dbc4:	defffc04 	addi	sp,sp,-16
 200dbc8:	dfc00315 	stw	ra,12(sp)
 200dbcc:	df000215 	stw	fp,8(sp)
 200dbd0:	dc000115 	stw	r16,4(sp)
 200dbd4:	df000104 	addi	fp,sp,4
 200dbd8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200dbdc:	e0bfff17 	ldw	r2,-4(fp)
 200dbe0:	108000d0 	cmplti	r2,r2,3
 200dbe4:	10000f1e 	bne	r2,zero,200dc24 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 200dbe8:	e13fff17 	ldw	r4,-4(fp)
 200dbec:	04008074 	movhi	r16,513
 200dbf0:	84089904 	addi	r16,r16,8804
 200dbf4:	01400304 	movi	r5,12
 200dbf8:	20040f00 	call	20040f0 <__mulsi3>
 200dbfc:	1405883a 	add	r2,r2,r16
 200dc00:	10800204 	addi	r2,r2,8
 200dc04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200dc08:	e13fff17 	ldw	r4,-4(fp)
 200dc0c:	04008074 	movhi	r16,513
 200dc10:	84089904 	addi	r16,r16,8804
 200dc14:	01400304 	movi	r5,12
 200dc18:	20040f00 	call	20040f0 <__mulsi3>
 200dc1c:	1405883a 	add	r2,r2,r16
 200dc20:	10000015 	stw	zero,0(r2)
  }
}
 200dc24:	e037883a 	mov	sp,fp
 200dc28:	dfc00217 	ldw	ra,8(sp)
 200dc2c:	df000117 	ldw	fp,4(sp)
 200dc30:	dc000017 	ldw	r16,0(sp)
 200dc34:	dec00304 	addi	sp,sp,12
 200dc38:	f800283a 	ret

0200dc3c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200dc3c:	defff804 	addi	sp,sp,-32
 200dc40:	df000715 	stw	fp,28(sp)
 200dc44:	df000704 	addi	fp,sp,28
 200dc48:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dc4c:	0005303a 	rdctl	r2,status
 200dc50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dc54:	e0fffb17 	ldw	r3,-20(fp)
 200dc58:	00bfff84 	movi	r2,-2
 200dc5c:	1884703a 	and	r2,r3,r2
 200dc60:	1001703a 	wrctl	status,r2
  
  return context;
 200dc64:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200dc68:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200dc6c:	d0a01b17 	ldw	r2,-32660(gp)
 200dc70:	10c000c4 	addi	r3,r2,3
 200dc74:	00bfff04 	movi	r2,-4
 200dc78:	1884703a 	and	r2,r3,r2
 200dc7c:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200dc80:	d0e01b17 	ldw	r3,-32660(gp)
 200dc84:	e0bffe17 	ldw	r2,-8(fp)
 200dc88:	1887883a 	add	r3,r3,r2
 200dc8c:	0080a034 	movhi	r2,640
 200dc90:	10800004 	addi	r2,r2,0
 200dc94:	10c0072e 	bgeu	r2,r3,200dcb4 <sbrk+0x78>
 200dc98:	e0bffd17 	ldw	r2,-12(fp)
 200dc9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200dca0:	e0bffa17 	ldw	r2,-24(fp)
 200dca4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200dca8:	00bfffc4 	movi	r2,-1
 200dcac:	e0bfff15 	stw	r2,-4(fp)
 200dcb0:	00000c06 	br	200dce4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 200dcb4:	d0a01b17 	ldw	r2,-32660(gp)
 200dcb8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 200dcbc:	d0e01b17 	ldw	r3,-32660(gp)
 200dcc0:	e0bffe17 	ldw	r2,-8(fp)
 200dcc4:	1885883a 	add	r2,r3,r2
 200dcc8:	d0a01b15 	stw	r2,-32660(gp)
 200dccc:	e0bffd17 	ldw	r2,-12(fp)
 200dcd0:	e0bff915 	stw	r2,-28(fp)
 200dcd4:	e0bff917 	ldw	r2,-28(fp)
 200dcd8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200dcdc:	e0bffc17 	ldw	r2,-16(fp)
 200dce0:	e0bfff15 	stw	r2,-4(fp)
 200dce4:	e0bfff17 	ldw	r2,-4(fp)
} 
 200dce8:	e037883a 	mov	sp,fp
 200dcec:	df000017 	ldw	fp,0(sp)
 200dcf0:	dec00104 	addi	sp,sp,4
 200dcf4:	f800283a 	ret

0200dcf8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200dcf8:	defffd04 	addi	sp,sp,-12
 200dcfc:	dfc00215 	stw	ra,8(sp)
 200dd00:	df000115 	stw	fp,4(sp)
 200dd04:	df000104 	addi	fp,sp,4
 200dd08:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200dd0c:	e13fff17 	ldw	r4,-4(fp)
 200dd10:	200fc600 	call	200fc60 <alt_busy_sleep>
}
 200dd14:	e037883a 	mov	sp,fp
 200dd18:	dfc00117 	ldw	ra,4(sp)
 200dd1c:	df000017 	ldw	fp,0(sp)
 200dd20:	dec00204 	addi	sp,sp,8
 200dd24:	f800283a 	ret

0200dd28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200dd28:	defff704 	addi	sp,sp,-36
 200dd2c:	dfc00815 	stw	ra,32(sp)
 200dd30:	df000715 	stw	fp,28(sp)
 200dd34:	df000704 	addi	fp,sp,28
 200dd38:	e13ffb15 	stw	r4,-20(fp)
 200dd3c:	e17ffc15 	stw	r5,-16(fp)
 200dd40:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200dd44:	e0bffb17 	ldw	r2,-20(fp)
 200dd48:	1004803a 	cmplt	r2,r2,zero
 200dd4c:	1000091e 	bne	r2,zero,200dd74 <write+0x4c>
 200dd50:	e13ffb17 	ldw	r4,-20(fp)
 200dd54:	01400304 	movi	r5,12
 200dd58:	20040f00 	call	20040f0 <__mulsi3>
 200dd5c:	1007883a 	mov	r3,r2
 200dd60:	00808074 	movhi	r2,513
 200dd64:	10889904 	addi	r2,r2,8804
 200dd68:	1887883a 	add	r3,r3,r2
 200dd6c:	e0ffff15 	stw	r3,-4(fp)
 200dd70:	00000106 	br	200dd78 <write+0x50>
 200dd74:	e03fff15 	stw	zero,-4(fp)
 200dd78:	e0bfff17 	ldw	r2,-4(fp)
 200dd7c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200dd80:	e0bffa17 	ldw	r2,-24(fp)
 200dd84:	1005003a 	cmpeq	r2,r2,zero
 200dd88:	1000241e 	bne	r2,zero,200de1c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200dd8c:	e0bffa17 	ldw	r2,-24(fp)
 200dd90:	10800217 	ldw	r2,8(r2)
 200dd94:	108000cc 	andi	r2,r2,3
 200dd98:	1005003a 	cmpeq	r2,r2,zero
 200dd9c:	10001a1e 	bne	r2,zero,200de08 <write+0xe0>
 200dda0:	e0bffa17 	ldw	r2,-24(fp)
 200dda4:	10800017 	ldw	r2,0(r2)
 200dda8:	10800617 	ldw	r2,24(r2)
 200ddac:	1005003a 	cmpeq	r2,r2,zero
 200ddb0:	1000151e 	bne	r2,zero,200de08 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200ddb4:	e0bffa17 	ldw	r2,-24(fp)
 200ddb8:	10800017 	ldw	r2,0(r2)
 200ddbc:	10800617 	ldw	r2,24(r2)
 200ddc0:	e17ffc17 	ldw	r5,-16(fp)
 200ddc4:	e1bffd17 	ldw	r6,-12(fp)
 200ddc8:	e13ffa17 	ldw	r4,-24(fp)
 200ddcc:	103ee83a 	callr	r2
 200ddd0:	e0bff915 	stw	r2,-28(fp)
 200ddd4:	e0bff917 	ldw	r2,-28(fp)
 200ddd8:	1004403a 	cmpge	r2,r2,zero
 200dddc:	1000071e 	bne	r2,zero,200ddfc <write+0xd4>
      {
        ALT_ERRNO = -rval;
 200dde0:	200de4c0 	call	200de4c <alt_get_errno>
 200dde4:	e0fff917 	ldw	r3,-28(fp)
 200dde8:	00c7c83a 	sub	r3,zero,r3
 200ddec:	10c00015 	stw	r3,0(r2)
        return -1;
 200ddf0:	00bfffc4 	movi	r2,-1
 200ddf4:	e0bffe15 	stw	r2,-8(fp)
 200ddf8:	00000e06 	br	200de34 <write+0x10c>
      }
      return rval;
 200ddfc:	e0bff917 	ldw	r2,-28(fp)
 200de00:	e0bffe15 	stw	r2,-8(fp)
 200de04:	00000b06 	br	200de34 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200de08:	200de4c0 	call	200de4c <alt_get_errno>
 200de0c:	1007883a 	mov	r3,r2
 200de10:	00800344 	movi	r2,13
 200de14:	18800015 	stw	r2,0(r3)
 200de18:	00000406 	br	200de2c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200de1c:	200de4c0 	call	200de4c <alt_get_errno>
 200de20:	1007883a 	mov	r3,r2
 200de24:	00801444 	movi	r2,81
 200de28:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200de2c:	00bfffc4 	movi	r2,-1
 200de30:	e0bffe15 	stw	r2,-8(fp)
 200de34:	e0bffe17 	ldw	r2,-8(fp)
}
 200de38:	e037883a 	mov	sp,fp
 200de3c:	dfc00117 	ldw	ra,4(sp)
 200de40:	df000017 	ldw	fp,0(sp)
 200de44:	dec00204 	addi	sp,sp,8
 200de48:	f800283a 	ret

0200de4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200de4c:	defffd04 	addi	sp,sp,-12
 200de50:	dfc00215 	stw	ra,8(sp)
 200de54:	df000115 	stw	fp,4(sp)
 200de58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200de5c:	00808074 	movhi	r2,513
 200de60:	108d7204 	addi	r2,r2,13768
 200de64:	10800017 	ldw	r2,0(r2)
 200de68:	1005003a 	cmpeq	r2,r2,zero
 200de6c:	1000061e 	bne	r2,zero,200de88 <alt_get_errno+0x3c>
 200de70:	00808074 	movhi	r2,513
 200de74:	108d7204 	addi	r2,r2,13768
 200de78:	10800017 	ldw	r2,0(r2)
 200de7c:	103ee83a 	callr	r2
 200de80:	e0bfff15 	stw	r2,-4(fp)
 200de84:	00000306 	br	200de94 <alt_get_errno+0x48>
 200de88:	00808074 	movhi	r2,513
 200de8c:	1094ed04 	addi	r2,r2,21428
 200de90:	e0bfff15 	stw	r2,-4(fp)
 200de94:	e0bfff17 	ldw	r2,-4(fp)
}
 200de98:	e037883a 	mov	sp,fp
 200de9c:	dfc00117 	ldw	ra,4(sp)
 200dea0:	df000017 	ldw	fp,0(sp)
 200dea4:	dec00204 	addi	sp,sp,8
 200dea8:	f800283a 	ret

0200deac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200deac:	defffd04 	addi	sp,sp,-12
 200deb0:	dfc00215 	stw	ra,8(sp)
 200deb4:	df000115 	stw	fp,4(sp)
 200deb8:	df000104 	addi	fp,sp,4
 200debc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 200dec0:	20108880 	call	2010888 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200dec4:	00800044 	movi	r2,1
 200dec8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200decc:	e037883a 	mov	sp,fp
 200ded0:	dfc00117 	ldw	ra,4(sp)
 200ded4:	df000017 	ldw	fp,0(sp)
 200ded8:	dec00204 	addi	sp,sp,8
 200dedc:	f800283a 	ret

0200dee0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200dee0:	defffe04 	addi	sp,sp,-8
 200dee4:	dfc00115 	stw	ra,4(sp)
 200dee8:	df000015 	stw	fp,0(sp)
 200deec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 200def0:	01001804 	movi	r4,96
 200def4:	000b883a 	mov	r5,zero
 200def8:	01800084 	movi	r6,2
 200defc:	01c0fa04 	movi	r7,1000
 200df00:	200fa7c0 	call	200fa7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200df04:	01008074 	movhi	r4,513
 200df08:	21090304 	addi	r4,r4,9228
 200df0c:	000b883a 	mov	r5,zero
 200df10:	000d883a 	mov	r6,zero
 200df14:	200e0d00 	call	200e0d0 <altera_avalon_jtag_uart_init>
 200df18:	01008074 	movhi	r4,513
 200df1c:	2108f904 	addi	r4,r4,9188
 200df20:	200df500 	call	200df50 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
 200df24:	01008074 	movhi	r4,513
 200df28:	210d1b04 	addi	r4,r4,13420
 200df2c:	200f8780 	call	200f878 <altera_avalon_lcd_16207_init>
 200df30:	01008074 	movhi	r4,513
 200df34:	210d1104 	addi	r4,r4,13380
 200df38:	200df500 	call	200df50 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 200df3c:	e037883a 	mov	sp,fp
 200df40:	dfc00117 	ldw	ra,4(sp)
 200df44:	df000017 	ldw	fp,0(sp)
 200df48:	dec00204 	addi	sp,sp,8
 200df4c:	f800283a 	ret

0200df50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200df50:	defffd04 	addi	sp,sp,-12
 200df54:	dfc00215 	stw	ra,8(sp)
 200df58:	df000115 	stw	fp,4(sp)
 200df5c:	df000104 	addi	fp,sp,4
 200df60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200df64:	e13fff17 	ldw	r4,-4(fp)
 200df68:	01408074 	movhi	r5,513
 200df6c:	294d6f04 	addi	r5,r5,13756
 200df70:	200fdd80 	call	200fdd8 <alt_dev_llist_insert>
}
 200df74:	e037883a 	mov	sp,fp
 200df78:	dfc00117 	ldw	ra,4(sp)
 200df7c:	df000017 	ldw	fp,0(sp)
 200df80:	dec00204 	addi	sp,sp,8
 200df84:	f800283a 	ret

0200df88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200df88:	defffa04 	addi	sp,sp,-24
 200df8c:	dfc00515 	stw	ra,20(sp)
 200df90:	df000415 	stw	fp,16(sp)
 200df94:	df000404 	addi	fp,sp,16
 200df98:	e13ffd15 	stw	r4,-12(fp)
 200df9c:	e17ffe15 	stw	r5,-8(fp)
 200dfa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200dfa4:	e0bffd17 	ldw	r2,-12(fp)
 200dfa8:	10800017 	ldw	r2,0(r2)
 200dfac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200dfb0:	e0bffc17 	ldw	r2,-16(fp)
 200dfb4:	11000a04 	addi	r4,r2,40
 200dfb8:	e0bffd17 	ldw	r2,-12(fp)
 200dfbc:	11c00217 	ldw	r7,8(r2)
 200dfc0:	e17ffe17 	ldw	r5,-8(fp)
 200dfc4:	e1bfff17 	ldw	r6,-4(fp)
 200dfc8:	200e5d00 	call	200e5d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200dfcc:	e037883a 	mov	sp,fp
 200dfd0:	dfc00117 	ldw	ra,4(sp)
 200dfd4:	df000017 	ldw	fp,0(sp)
 200dfd8:	dec00204 	addi	sp,sp,8
 200dfdc:	f800283a 	ret

0200dfe0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200dfe0:	defffa04 	addi	sp,sp,-24
 200dfe4:	dfc00515 	stw	ra,20(sp)
 200dfe8:	df000415 	stw	fp,16(sp)
 200dfec:	df000404 	addi	fp,sp,16
 200dff0:	e13ffd15 	stw	r4,-12(fp)
 200dff4:	e17ffe15 	stw	r5,-8(fp)
 200dff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200dffc:	e0bffd17 	ldw	r2,-12(fp)
 200e000:	10800017 	ldw	r2,0(r2)
 200e004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200e008:	e0bffc17 	ldw	r2,-16(fp)
 200e00c:	11000a04 	addi	r4,r2,40
 200e010:	e0bffd17 	ldw	r2,-12(fp)
 200e014:	11c00217 	ldw	r7,8(r2)
 200e018:	e17ffe17 	ldw	r5,-8(fp)
 200e01c:	e1bfff17 	ldw	r6,-4(fp)
 200e020:	200e7f40 	call	200e7f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200e024:	e037883a 	mov	sp,fp
 200e028:	dfc00117 	ldw	ra,4(sp)
 200e02c:	df000017 	ldw	fp,0(sp)
 200e030:	dec00204 	addi	sp,sp,8
 200e034:	f800283a 	ret

0200e038 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200e038:	defffc04 	addi	sp,sp,-16
 200e03c:	dfc00315 	stw	ra,12(sp)
 200e040:	df000215 	stw	fp,8(sp)
 200e044:	df000204 	addi	fp,sp,8
 200e048:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200e04c:	e0bfff17 	ldw	r2,-4(fp)
 200e050:	10800017 	ldw	r2,0(r2)
 200e054:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200e058:	e0bffe17 	ldw	r2,-8(fp)
 200e05c:	11000a04 	addi	r4,r2,40
 200e060:	e0bfff17 	ldw	r2,-4(fp)
 200e064:	11400217 	ldw	r5,8(r2)
 200e068:	200e4680 	call	200e468 <altera_avalon_jtag_uart_close>
}
 200e06c:	e037883a 	mov	sp,fp
 200e070:	dfc00117 	ldw	ra,4(sp)
 200e074:	df000017 	ldw	fp,0(sp)
 200e078:	dec00204 	addi	sp,sp,8
 200e07c:	f800283a 	ret

0200e080 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200e080:	defffa04 	addi	sp,sp,-24
 200e084:	dfc00515 	stw	ra,20(sp)
 200e088:	df000415 	stw	fp,16(sp)
 200e08c:	df000404 	addi	fp,sp,16
 200e090:	e13ffd15 	stw	r4,-12(fp)
 200e094:	e17ffe15 	stw	r5,-8(fp)
 200e098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200e09c:	e0bffd17 	ldw	r2,-12(fp)
 200e0a0:	10800017 	ldw	r2,0(r2)
 200e0a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200e0a8:	e0bffc17 	ldw	r2,-16(fp)
 200e0ac:	11000a04 	addi	r4,r2,40
 200e0b0:	e17ffe17 	ldw	r5,-8(fp)
 200e0b4:	e1bfff17 	ldw	r6,-4(fp)
 200e0b8:	200e4dc0 	call	200e4dc <altera_avalon_jtag_uart_ioctl>
}
 200e0bc:	e037883a 	mov	sp,fp
 200e0c0:	dfc00117 	ldw	ra,4(sp)
 200e0c4:	df000017 	ldw	fp,0(sp)
 200e0c8:	dec00204 	addi	sp,sp,8
 200e0cc:	f800283a 	ret

0200e0d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200e0d0:	defffa04 	addi	sp,sp,-24
 200e0d4:	dfc00515 	stw	ra,20(sp)
 200e0d8:	df000415 	stw	fp,16(sp)
 200e0dc:	df000404 	addi	fp,sp,16
 200e0e0:	e13ffd15 	stw	r4,-12(fp)
 200e0e4:	e17ffe15 	stw	r5,-8(fp)
 200e0e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200e0ec:	e0fffd17 	ldw	r3,-12(fp)
 200e0f0:	00800044 	movi	r2,1
 200e0f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200e0f8:	e0bffd17 	ldw	r2,-12(fp)
 200e0fc:	10800017 	ldw	r2,0(r2)
 200e100:	11000104 	addi	r4,r2,4
 200e104:	e0bffd17 	ldw	r2,-12(fp)
 200e108:	10800817 	ldw	r2,32(r2)
 200e10c:	1007883a 	mov	r3,r2
 200e110:	2005883a 	mov	r2,r4
 200e114:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200e118:	e13ffe17 	ldw	r4,-8(fp)
 200e11c:	e17fff17 	ldw	r5,-4(fp)
 200e120:	d8000015 	stw	zero,0(sp)
 200e124:	01808074 	movhi	r6,513
 200e128:	31b86404 	addi	r6,r6,-7792
 200e12c:	e1fffd17 	ldw	r7,-12(fp)
 200e130:	200ffe40 	call	200ffe4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200e134:	e0bffd17 	ldw	r2,-12(fp)
 200e138:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200e13c:	e0bffd17 	ldw	r2,-12(fp)
 200e140:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200e144:	00808074 	movhi	r2,513
 200e148:	1094f204 	addi	r2,r2,21448
 200e14c:	10800017 	ldw	r2,0(r2)
 200e150:	100b883a 	mov	r5,r2
 200e154:	01808074 	movhi	r6,513
 200e158:	31b8ee04 	addi	r6,r6,-7240
 200e15c:	e1fffd17 	ldw	r7,-12(fp)
 200e160:	200fb0c0 	call	200fb0c <alt_alarm_start>
 200e164:	1004403a 	cmpge	r2,r2,zero
 200e168:	1000041e 	bne	r2,zero,200e17c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200e16c:	e0fffd17 	ldw	r3,-12(fp)
 200e170:	00a00034 	movhi	r2,32768
 200e174:	10bfffc4 	addi	r2,r2,-1
 200e178:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200e17c:	e037883a 	mov	sp,fp
 200e180:	dfc00117 	ldw	ra,4(sp)
 200e184:	df000017 	ldw	fp,0(sp)
 200e188:	dec00204 	addi	sp,sp,8
 200e18c:	f800283a 	ret

0200e190 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200e190:	defff804 	addi	sp,sp,-32
 200e194:	df000715 	stw	fp,28(sp)
 200e198:	df000704 	addi	fp,sp,28
 200e19c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200e1a0:	e0bfff17 	ldw	r2,-4(fp)
 200e1a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 200e1a8:	e0bffe17 	ldw	r2,-8(fp)
 200e1ac:	10800017 	ldw	r2,0(r2)
 200e1b0:	e0bffd15 	stw	r2,-12(fp)
 200e1b4:	00000006 	br	200e1b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200e1b8:	e0bffd17 	ldw	r2,-12(fp)
 200e1bc:	10800104 	addi	r2,r2,4
 200e1c0:	10800037 	ldwio	r2,0(r2)
 200e1c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200e1c8:	e0bffc17 	ldw	r2,-16(fp)
 200e1cc:	1080c00c 	andi	r2,r2,768
 200e1d0:	1005003a 	cmpeq	r2,r2,zero
 200e1d4:	1000741e 	bne	r2,zero,200e3a8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200e1d8:	e0bffc17 	ldw	r2,-16(fp)
 200e1dc:	1080400c 	andi	r2,r2,256
 200e1e0:	1005003a 	cmpeq	r2,r2,zero
 200e1e4:	1000351e 	bne	r2,zero,200e2bc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200e1e8:	00800074 	movhi	r2,1
 200e1ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200e1f0:	e0bffe17 	ldw	r2,-8(fp)
 200e1f4:	10800a17 	ldw	r2,40(r2)
 200e1f8:	10800044 	addi	r2,r2,1
 200e1fc:	1081ffcc 	andi	r2,r2,2047
 200e200:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 200e204:	e0bffe17 	ldw	r2,-8(fp)
 200e208:	10c00b17 	ldw	r3,44(r2)
 200e20c:	e0bffa17 	ldw	r2,-24(fp)
 200e210:	18801626 	beq	r3,r2,200e26c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200e214:	e0bffd17 	ldw	r2,-12(fp)
 200e218:	10800037 	ldwio	r2,0(r2)
 200e21c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200e220:	e0bffb17 	ldw	r2,-20(fp)
 200e224:	10a0000c 	andi	r2,r2,32768
 200e228:	1005003a 	cmpeq	r2,r2,zero
 200e22c:	10000f1e 	bne	r2,zero,200e26c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200e230:	e0bffe17 	ldw	r2,-8(fp)
 200e234:	10c00a17 	ldw	r3,40(r2)
 200e238:	e0bffb17 	ldw	r2,-20(fp)
 200e23c:	1009883a 	mov	r4,r2
 200e240:	e0bffe17 	ldw	r2,-8(fp)
 200e244:	1885883a 	add	r2,r3,r2
 200e248:	10800e04 	addi	r2,r2,56
 200e24c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200e250:	e0bffe17 	ldw	r2,-8(fp)
 200e254:	10800a17 	ldw	r2,40(r2)
 200e258:	10800044 	addi	r2,r2,1
 200e25c:	10c1ffcc 	andi	r3,r2,2047
 200e260:	e0bffe17 	ldw	r2,-8(fp)
 200e264:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200e268:	003fe106 	br	200e1f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200e26c:	e0bffb17 	ldw	r2,-20(fp)
 200e270:	10bfffec 	andhi	r2,r2,65535
 200e274:	1005003a 	cmpeq	r2,r2,zero
 200e278:	1000101e 	bne	r2,zero,200e2bc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200e27c:	e0bffe17 	ldw	r2,-8(fp)
 200e280:	10c00817 	ldw	r3,32(r2)
 200e284:	00bfff84 	movi	r2,-2
 200e288:	1886703a 	and	r3,r3,r2
 200e28c:	e0bffe17 	ldw	r2,-8(fp)
 200e290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200e294:	e0bffd17 	ldw	r2,-12(fp)
 200e298:	11000104 	addi	r4,r2,4
 200e29c:	e0bffe17 	ldw	r2,-8(fp)
 200e2a0:	10800817 	ldw	r2,32(r2)
 200e2a4:	1007883a 	mov	r3,r2
 200e2a8:	2005883a 	mov	r2,r4
 200e2ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200e2b0:	e0bffd17 	ldw	r2,-12(fp)
 200e2b4:	10800104 	addi	r2,r2,4
 200e2b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200e2bc:	e0bffc17 	ldw	r2,-16(fp)
 200e2c0:	1080800c 	andi	r2,r2,512
 200e2c4:	1005003a 	cmpeq	r2,r2,zero
 200e2c8:	103fbb1e 	bne	r2,zero,200e1b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200e2cc:	e0bffc17 	ldw	r2,-16(fp)
 200e2d0:	10bfffec 	andhi	r2,r2,65535
 200e2d4:	1004d43a 	srli	r2,r2,16
 200e2d8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200e2dc:	00001506 	br	200e334 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200e2e0:	e13ffd17 	ldw	r4,-12(fp)
 200e2e4:	e0bffe17 	ldw	r2,-8(fp)
 200e2e8:	10c00d17 	ldw	r3,52(r2)
 200e2ec:	e0bffe17 	ldw	r2,-8(fp)
 200e2f0:	1885883a 	add	r2,r3,r2
 200e2f4:	10820e04 	addi	r2,r2,2104
 200e2f8:	10800003 	ldbu	r2,0(r2)
 200e2fc:	10c03fcc 	andi	r3,r2,255
 200e300:	18c0201c 	xori	r3,r3,128
 200e304:	18ffe004 	addi	r3,r3,-128
 200e308:	2005883a 	mov	r2,r4
 200e30c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200e310:	e0bffe17 	ldw	r2,-8(fp)
 200e314:	10800d17 	ldw	r2,52(r2)
 200e318:	10800044 	addi	r2,r2,1
 200e31c:	10c1ffcc 	andi	r3,r2,2047
 200e320:	e0bffe17 	ldw	r2,-8(fp)
 200e324:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200e328:	e0bff917 	ldw	r2,-28(fp)
 200e32c:	10bfffc4 	addi	r2,r2,-1
 200e330:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200e334:	e0bff917 	ldw	r2,-28(fp)
 200e338:	1005003a 	cmpeq	r2,r2,zero
 200e33c:	1000051e 	bne	r2,zero,200e354 <altera_avalon_jtag_uart_irq+0x1c4>
 200e340:	e0bffe17 	ldw	r2,-8(fp)
 200e344:	10c00d17 	ldw	r3,52(r2)
 200e348:	e0bffe17 	ldw	r2,-8(fp)
 200e34c:	10800c17 	ldw	r2,48(r2)
 200e350:	18bfe31e 	bne	r3,r2,200e2e0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200e354:	e0bff917 	ldw	r2,-28(fp)
 200e358:	1005003a 	cmpeq	r2,r2,zero
 200e35c:	103f961e 	bne	r2,zero,200e1b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200e360:	e0bffe17 	ldw	r2,-8(fp)
 200e364:	10c00817 	ldw	r3,32(r2)
 200e368:	00bfff44 	movi	r2,-3
 200e36c:	1886703a 	and	r3,r3,r2
 200e370:	e0bffe17 	ldw	r2,-8(fp)
 200e374:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200e378:	e0bffe17 	ldw	r2,-8(fp)
 200e37c:	10800017 	ldw	r2,0(r2)
 200e380:	11000104 	addi	r4,r2,4
 200e384:	e0bffe17 	ldw	r2,-8(fp)
 200e388:	10800817 	ldw	r2,32(r2)
 200e38c:	1007883a 	mov	r3,r2
 200e390:	2005883a 	mov	r2,r4
 200e394:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200e398:	e0bffd17 	ldw	r2,-12(fp)
 200e39c:	10800104 	addi	r2,r2,4
 200e3a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200e3a4:	003f8406 	br	200e1b8 <altera_avalon_jtag_uart_irq+0x28>
}
 200e3a8:	e037883a 	mov	sp,fp
 200e3ac:	df000017 	ldw	fp,0(sp)
 200e3b0:	dec00104 	addi	sp,sp,4
 200e3b4:	f800283a 	ret

0200e3b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200e3b8:	defffc04 	addi	sp,sp,-16
 200e3bc:	df000315 	stw	fp,12(sp)
 200e3c0:	df000304 	addi	fp,sp,12
 200e3c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200e3c8:	e0bfff17 	ldw	r2,-4(fp)
 200e3cc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200e3d0:	e0bffe17 	ldw	r2,-8(fp)
 200e3d4:	10800017 	ldw	r2,0(r2)
 200e3d8:	10800104 	addi	r2,r2,4
 200e3dc:	10800037 	ldwio	r2,0(r2)
 200e3e0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200e3e4:	e0bffd17 	ldw	r2,-12(fp)
 200e3e8:	1081000c 	andi	r2,r2,1024
 200e3ec:	1005003a 	cmpeq	r2,r2,zero
 200e3f0:	10000c1e 	bne	r2,zero,200e424 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200e3f4:	e0bffe17 	ldw	r2,-8(fp)
 200e3f8:	10800017 	ldw	r2,0(r2)
 200e3fc:	11000104 	addi	r4,r2,4
 200e400:	e0bffe17 	ldw	r2,-8(fp)
 200e404:	10800817 	ldw	r2,32(r2)
 200e408:	10810014 	ori	r2,r2,1024
 200e40c:	1007883a 	mov	r3,r2
 200e410:	2005883a 	mov	r2,r4
 200e414:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200e418:	e0bffe17 	ldw	r2,-8(fp)
 200e41c:	10000915 	stw	zero,36(r2)
 200e420:	00000a06 	br	200e44c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200e424:	e0bffe17 	ldw	r2,-8(fp)
 200e428:	10c00917 	ldw	r3,36(r2)
 200e42c:	00a00034 	movhi	r2,32768
 200e430:	10bfff04 	addi	r2,r2,-4
 200e434:	10c00536 	bltu	r2,r3,200e44c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 200e438:	e0bffe17 	ldw	r2,-8(fp)
 200e43c:	10800917 	ldw	r2,36(r2)
 200e440:	10c00044 	addi	r3,r2,1
 200e444:	e0bffe17 	ldw	r2,-8(fp)
 200e448:	10c00915 	stw	r3,36(r2)
 200e44c:	00808074 	movhi	r2,513
 200e450:	1094f204 	addi	r2,r2,21448
 200e454:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200e458:	e037883a 	mov	sp,fp
 200e45c:	df000017 	ldw	fp,0(sp)
 200e460:	dec00104 	addi	sp,sp,4
 200e464:	f800283a 	ret

0200e468 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200e468:	defffc04 	addi	sp,sp,-16
 200e46c:	df000315 	stw	fp,12(sp)
 200e470:	df000304 	addi	fp,sp,12
 200e474:	e13ffd15 	stw	r4,-12(fp)
 200e478:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200e47c:	00000706 	br	200e49c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 200e480:	e0bffe17 	ldw	r2,-8(fp)
 200e484:	1090000c 	andi	r2,r2,16384
 200e488:	1005003a 	cmpeq	r2,r2,zero
 200e48c:	1000031e 	bne	r2,zero,200e49c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 200e490:	00bffd44 	movi	r2,-11
 200e494:	e0bfff15 	stw	r2,-4(fp)
 200e498:	00000b06 	br	200e4c8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200e49c:	e0bffd17 	ldw	r2,-12(fp)
 200e4a0:	10c00d17 	ldw	r3,52(r2)
 200e4a4:	e0bffd17 	ldw	r2,-12(fp)
 200e4a8:	10800c17 	ldw	r2,48(r2)
 200e4ac:	18800526 	beq	r3,r2,200e4c4 <altera_avalon_jtag_uart_close+0x5c>
 200e4b0:	e0bffd17 	ldw	r2,-12(fp)
 200e4b4:	10c00917 	ldw	r3,36(r2)
 200e4b8:	e0bffd17 	ldw	r2,-12(fp)
 200e4bc:	10800117 	ldw	r2,4(r2)
 200e4c0:	18bfef36 	bltu	r3,r2,200e480 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200e4c4:	e03fff15 	stw	zero,-4(fp)
 200e4c8:	e0bfff17 	ldw	r2,-4(fp)
}
 200e4cc:	e037883a 	mov	sp,fp
 200e4d0:	df000017 	ldw	fp,0(sp)
 200e4d4:	dec00104 	addi	sp,sp,4
 200e4d8:	f800283a 	ret

0200e4dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200e4dc:	defff804 	addi	sp,sp,-32
 200e4e0:	df000715 	stw	fp,28(sp)
 200e4e4:	df000704 	addi	fp,sp,28
 200e4e8:	e13ffb15 	stw	r4,-20(fp)
 200e4ec:	e17ffc15 	stw	r5,-16(fp)
 200e4f0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 200e4f4:	00bff9c4 	movi	r2,-25
 200e4f8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 200e4fc:	e0bffc17 	ldw	r2,-16(fp)
 200e500:	e0bfff15 	stw	r2,-4(fp)
 200e504:	e0ffff17 	ldw	r3,-4(fp)
 200e508:	189a8060 	cmpeqi	r2,r3,27137
 200e50c:	1000041e 	bne	r2,zero,200e520 <altera_avalon_jtag_uart_ioctl+0x44>
 200e510:	e0ffff17 	ldw	r3,-4(fp)
 200e514:	189a80a0 	cmpeqi	r2,r3,27138
 200e518:	10001b1e 	bne	r2,zero,200e588 <altera_avalon_jtag_uart_ioctl+0xac>
 200e51c:	00002706 	br	200e5bc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200e520:	e0bffb17 	ldw	r2,-20(fp)
 200e524:	10c00117 	ldw	r3,4(r2)
 200e528:	00a00034 	movhi	r2,32768
 200e52c:	10bfffc4 	addi	r2,r2,-1
 200e530:	18802226 	beq	r3,r2,200e5bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 200e534:	e0bffd17 	ldw	r2,-12(fp)
 200e538:	10800017 	ldw	r2,0(r2)
 200e53c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200e540:	e0bff917 	ldw	r2,-28(fp)
 200e544:	10800090 	cmplti	r2,r2,2
 200e548:	1000071e 	bne	r2,zero,200e568 <altera_avalon_jtag_uart_ioctl+0x8c>
 200e54c:	e0fff917 	ldw	r3,-28(fp)
 200e550:	00a00034 	movhi	r2,32768
 200e554:	10bfffc4 	addi	r2,r2,-1
 200e558:	18800326 	beq	r3,r2,200e568 <altera_avalon_jtag_uart_ioctl+0x8c>
 200e55c:	e0bff917 	ldw	r2,-28(fp)
 200e560:	e0bffe15 	stw	r2,-8(fp)
 200e564:	00000306 	br	200e574 <altera_avalon_jtag_uart_ioctl+0x98>
 200e568:	00e00034 	movhi	r3,32768
 200e56c:	18ffff84 	addi	r3,r3,-2
 200e570:	e0fffe15 	stw	r3,-8(fp)
 200e574:	e0bffb17 	ldw	r2,-20(fp)
 200e578:	e0fffe17 	ldw	r3,-8(fp)
 200e57c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 200e580:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 200e584:	00000d06 	br	200e5bc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200e588:	e0bffb17 	ldw	r2,-20(fp)
 200e58c:	10c00117 	ldw	r3,4(r2)
 200e590:	00a00034 	movhi	r2,32768
 200e594:	10bfffc4 	addi	r2,r2,-1
 200e598:	18800826 	beq	r3,r2,200e5bc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200e59c:	e13ffd17 	ldw	r4,-12(fp)
 200e5a0:	e0bffb17 	ldw	r2,-20(fp)
 200e5a4:	10c00917 	ldw	r3,36(r2)
 200e5a8:	e0bffb17 	ldw	r2,-20(fp)
 200e5ac:	10800117 	ldw	r2,4(r2)
 200e5b0:	1885803a 	cmpltu	r2,r3,r2
 200e5b4:	20800015 	stw	r2,0(r4)
      rc = 0;
 200e5b8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 200e5bc:	e0bffa17 	ldw	r2,-24(fp)
}
 200e5c0:	e037883a 	mov	sp,fp
 200e5c4:	df000017 	ldw	fp,0(sp)
 200e5c8:	dec00104 	addi	sp,sp,4
 200e5cc:	f800283a 	ret

0200e5d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200e5d0:	defff204 	addi	sp,sp,-56
 200e5d4:	dfc00d15 	stw	ra,52(sp)
 200e5d8:	df000c15 	stw	fp,48(sp)
 200e5dc:	df000c04 	addi	fp,sp,48
 200e5e0:	e13ffb15 	stw	r4,-20(fp)
 200e5e4:	e17ffc15 	stw	r5,-16(fp)
 200e5e8:	e1bffd15 	stw	r6,-12(fp)
 200e5ec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 200e5f0:	e0bffc17 	ldw	r2,-16(fp)
 200e5f4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200e5f8:	00004806 	br	200e71c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200e5fc:	e0bffb17 	ldw	r2,-20(fp)
 200e600:	10800a17 	ldw	r2,40(r2)
 200e604:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200e608:	e0bffb17 	ldw	r2,-20(fp)
 200e60c:	10800b17 	ldw	r2,44(r2)
 200e610:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 200e614:	e0fff717 	ldw	r3,-36(fp)
 200e618:	e0bff617 	ldw	r2,-40(fp)
 200e61c:	18800536 	bltu	r3,r2,200e634 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200e620:	e0bff717 	ldw	r2,-36(fp)
 200e624:	e0fff617 	ldw	r3,-40(fp)
 200e628:	10c5c83a 	sub	r2,r2,r3
 200e62c:	e0bff815 	stw	r2,-32(fp)
 200e630:	00000406 	br	200e644 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200e634:	00820004 	movi	r2,2048
 200e638:	e0fff617 	ldw	r3,-40(fp)
 200e63c:	10c5c83a 	sub	r2,r2,r3
 200e640:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200e644:	e0bff817 	ldw	r2,-32(fp)
 200e648:	1005003a 	cmpeq	r2,r2,zero
 200e64c:	10001f1e 	bne	r2,zero,200e6cc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 200e650:	e0fffd17 	ldw	r3,-12(fp)
 200e654:	e0bff817 	ldw	r2,-32(fp)
 200e658:	1880022e 	bgeu	r3,r2,200e664 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 200e65c:	e0bffd17 	ldw	r2,-12(fp)
 200e660:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200e664:	e0bffb17 	ldw	r2,-20(fp)
 200e668:	10c00e04 	addi	r3,r2,56
 200e66c:	e0bff617 	ldw	r2,-40(fp)
 200e670:	1887883a 	add	r3,r3,r2
 200e674:	e0bffa17 	ldw	r2,-24(fp)
 200e678:	1009883a 	mov	r4,r2
 200e67c:	180b883a 	mov	r5,r3
 200e680:	e1bff817 	ldw	r6,-32(fp)
 200e684:	2009cac0 	call	2009cac <memcpy>
      ptr   += n;
 200e688:	e0fff817 	ldw	r3,-32(fp)
 200e68c:	e0bffa17 	ldw	r2,-24(fp)
 200e690:	10c5883a 	add	r2,r2,r3
 200e694:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 200e698:	e0fffd17 	ldw	r3,-12(fp)
 200e69c:	e0bff817 	ldw	r2,-32(fp)
 200e6a0:	1885c83a 	sub	r2,r3,r2
 200e6a4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200e6a8:	e0fff617 	ldw	r3,-40(fp)
 200e6ac:	e0bff817 	ldw	r2,-32(fp)
 200e6b0:	1885883a 	add	r2,r3,r2
 200e6b4:	10c1ffcc 	andi	r3,r2,2047
 200e6b8:	e0bffb17 	ldw	r2,-20(fp)
 200e6bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200e6c0:	e0bffd17 	ldw	r2,-12(fp)
 200e6c4:	10800048 	cmpgei	r2,r2,1
 200e6c8:	103fcc1e 	bne	r2,zero,200e5fc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 200e6cc:	e0fffa17 	ldw	r3,-24(fp)
 200e6d0:	e0bffc17 	ldw	r2,-16(fp)
 200e6d4:	1880141e 	bne	r3,r2,200e728 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200e6d8:	e0bffe17 	ldw	r2,-8(fp)
 200e6dc:	1090000c 	andi	r2,r2,16384
 200e6e0:	1004c03a 	cmpne	r2,r2,zero
 200e6e4:	1000101e 	bne	r2,zero,200e728 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200e6e8:	e0bffb17 	ldw	r2,-20(fp)
 200e6ec:	10c00a17 	ldw	r3,40(r2)
 200e6f0:	e0bff717 	ldw	r2,-36(fp)
 200e6f4:	1880051e 	bne	r3,r2,200e70c <altera_avalon_jtag_uart_read+0x13c>
 200e6f8:	e0bffb17 	ldw	r2,-20(fp)
 200e6fc:	10c00917 	ldw	r3,36(r2)
 200e700:	e0bffb17 	ldw	r2,-20(fp)
 200e704:	10800117 	ldw	r2,4(r2)
 200e708:	18bff736 	bltu	r3,r2,200e6e8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200e70c:	e0bffb17 	ldw	r2,-20(fp)
 200e710:	10c00a17 	ldw	r3,40(r2)
 200e714:	e0bff717 	ldw	r2,-36(fp)
 200e718:	18800326 	beq	r3,r2,200e728 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200e71c:	e0bffd17 	ldw	r2,-12(fp)
 200e720:	10800048 	cmpgei	r2,r2,1
 200e724:	103fb51e 	bne	r2,zero,200e5fc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200e728:	e0fffa17 	ldw	r3,-24(fp)
 200e72c:	e0bffc17 	ldw	r2,-16(fp)
 200e730:	18801926 	beq	r3,r2,200e798 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e734:	0005303a 	rdctl	r2,status
 200e738:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e73c:	e0fff517 	ldw	r3,-44(fp)
 200e740:	00bfff84 	movi	r2,-2
 200e744:	1884703a 	and	r2,r3,r2
 200e748:	1001703a 	wrctl	status,r2
  
  return context;
 200e74c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200e750:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200e754:	e0bffb17 	ldw	r2,-20(fp)
 200e758:	10800817 	ldw	r2,32(r2)
 200e75c:	10c00054 	ori	r3,r2,1
 200e760:	e0bffb17 	ldw	r2,-20(fp)
 200e764:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200e768:	e0bffb17 	ldw	r2,-20(fp)
 200e76c:	10800017 	ldw	r2,0(r2)
 200e770:	11000104 	addi	r4,r2,4
 200e774:	e0bffb17 	ldw	r2,-20(fp)
 200e778:	10800817 	ldw	r2,32(r2)
 200e77c:	1007883a 	mov	r3,r2
 200e780:	2005883a 	mov	r2,r4
 200e784:	10c00035 	stwio	r3,0(r2)
 200e788:	e0bff917 	ldw	r2,-28(fp)
 200e78c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e790:	e0bff417 	ldw	r2,-48(fp)
 200e794:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200e798:	e0fffa17 	ldw	r3,-24(fp)
 200e79c:	e0bffc17 	ldw	r2,-16(fp)
 200e7a0:	18800526 	beq	r3,r2,200e7b8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 200e7a4:	e0fffa17 	ldw	r3,-24(fp)
 200e7a8:	e0bffc17 	ldw	r2,-16(fp)
 200e7ac:	1887c83a 	sub	r3,r3,r2
 200e7b0:	e0ffff15 	stw	r3,-4(fp)
 200e7b4:	00000906 	br	200e7dc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 200e7b8:	e0bffe17 	ldw	r2,-8(fp)
 200e7bc:	1090000c 	andi	r2,r2,16384
 200e7c0:	1005003a 	cmpeq	r2,r2,zero
 200e7c4:	1000031e 	bne	r2,zero,200e7d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200e7c8:	00bffd44 	movi	r2,-11
 200e7cc:	e0bfff15 	stw	r2,-4(fp)
 200e7d0:	00000206 	br	200e7dc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 200e7d4:	00bffec4 	movi	r2,-5
 200e7d8:	e0bfff15 	stw	r2,-4(fp)
 200e7dc:	e0bfff17 	ldw	r2,-4(fp)
}
 200e7e0:	e037883a 	mov	sp,fp
 200e7e4:	dfc00117 	ldw	ra,4(sp)
 200e7e8:	df000017 	ldw	fp,0(sp)
 200e7ec:	dec00204 	addi	sp,sp,8
 200e7f0:	f800283a 	ret

0200e7f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200e7f4:	defff204 	addi	sp,sp,-56
 200e7f8:	dfc00d15 	stw	ra,52(sp)
 200e7fc:	df000c15 	stw	fp,48(sp)
 200e800:	df000c04 	addi	fp,sp,48
 200e804:	e13ffb15 	stw	r4,-20(fp)
 200e808:	e17ffc15 	stw	r5,-16(fp)
 200e80c:	e1bffd15 	stw	r6,-12(fp)
 200e810:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200e814:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200e818:	e0bffc17 	ldw	r2,-16(fp)
 200e81c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200e820:	00003a06 	br	200e90c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200e824:	e0bffb17 	ldw	r2,-20(fp)
 200e828:	10800c17 	ldw	r2,48(r2)
 200e82c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 200e830:	e0bffb17 	ldw	r2,-20(fp)
 200e834:	10800d17 	ldw	r2,52(r2)
 200e838:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 200e83c:	e0fffa17 	ldw	r3,-24(fp)
 200e840:	e0bff917 	ldw	r2,-28(fp)
 200e844:	1880062e 	bgeu	r3,r2,200e860 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200e848:	e0fff917 	ldw	r3,-28(fp)
 200e84c:	e0bffa17 	ldw	r2,-24(fp)
 200e850:	1885c83a 	sub	r2,r3,r2
 200e854:	10bfffc4 	addi	r2,r2,-1
 200e858:	e0bff815 	stw	r2,-32(fp)
 200e85c:	00000c06 	br	200e890 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 200e860:	e0bff917 	ldw	r2,-28(fp)
 200e864:	1005003a 	cmpeq	r2,r2,zero
 200e868:	1000051e 	bne	r2,zero,200e880 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200e86c:	00820004 	movi	r2,2048
 200e870:	e0fffa17 	ldw	r3,-24(fp)
 200e874:	10c5c83a 	sub	r2,r2,r3
 200e878:	e0bff815 	stw	r2,-32(fp)
 200e87c:	00000406 	br	200e890 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200e880:	0081ffc4 	movi	r2,2047
 200e884:	e0fffa17 	ldw	r3,-24(fp)
 200e888:	10c5c83a 	sub	r2,r2,r3
 200e88c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200e890:	e0bff817 	ldw	r2,-32(fp)
 200e894:	1005003a 	cmpeq	r2,r2,zero
 200e898:	10001f1e 	bne	r2,zero,200e918 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 200e89c:	e0fffd17 	ldw	r3,-12(fp)
 200e8a0:	e0bff817 	ldw	r2,-32(fp)
 200e8a4:	1880022e 	bgeu	r3,r2,200e8b0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 200e8a8:	e0bffd17 	ldw	r2,-12(fp)
 200e8ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200e8b0:	e0bffb17 	ldw	r2,-20(fp)
 200e8b4:	10c20e04 	addi	r3,r2,2104
 200e8b8:	e0bffa17 	ldw	r2,-24(fp)
 200e8bc:	1885883a 	add	r2,r3,r2
 200e8c0:	e0fffc17 	ldw	r3,-16(fp)
 200e8c4:	1009883a 	mov	r4,r2
 200e8c8:	180b883a 	mov	r5,r3
 200e8cc:	e1bff817 	ldw	r6,-32(fp)
 200e8d0:	2009cac0 	call	2009cac <memcpy>
      ptr   += n;
 200e8d4:	e0fff817 	ldw	r3,-32(fp)
 200e8d8:	e0bffc17 	ldw	r2,-16(fp)
 200e8dc:	10c5883a 	add	r2,r2,r3
 200e8e0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 200e8e4:	e0fffd17 	ldw	r3,-12(fp)
 200e8e8:	e0bff817 	ldw	r2,-32(fp)
 200e8ec:	1885c83a 	sub	r2,r3,r2
 200e8f0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200e8f4:	e0fffa17 	ldw	r3,-24(fp)
 200e8f8:	e0bff817 	ldw	r2,-32(fp)
 200e8fc:	1885883a 	add	r2,r3,r2
 200e900:	10c1ffcc 	andi	r3,r2,2047
 200e904:	e0bffb17 	ldw	r2,-20(fp)
 200e908:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200e90c:	e0bffd17 	ldw	r2,-12(fp)
 200e910:	10800048 	cmpgei	r2,r2,1
 200e914:	103fc31e 	bne	r2,zero,200e824 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e918:	0005303a 	rdctl	r2,status
 200e91c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e920:	e0fff517 	ldw	r3,-44(fp)
 200e924:	00bfff84 	movi	r2,-2
 200e928:	1884703a 	and	r2,r3,r2
 200e92c:	1001703a 	wrctl	status,r2
  
  return context;
 200e930:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200e934:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200e938:	e0bffb17 	ldw	r2,-20(fp)
 200e93c:	10800817 	ldw	r2,32(r2)
 200e940:	10c00094 	ori	r3,r2,2
 200e944:	e0bffb17 	ldw	r2,-20(fp)
 200e948:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200e94c:	e0bffb17 	ldw	r2,-20(fp)
 200e950:	10800017 	ldw	r2,0(r2)
 200e954:	11000104 	addi	r4,r2,4
 200e958:	e0bffb17 	ldw	r2,-20(fp)
 200e95c:	10800817 	ldw	r2,32(r2)
 200e960:	1007883a 	mov	r3,r2
 200e964:	2005883a 	mov	r2,r4
 200e968:	10c00035 	stwio	r3,0(r2)
 200e96c:	e0bff717 	ldw	r2,-36(fp)
 200e970:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e974:	e0bff417 	ldw	r2,-48(fp)
 200e978:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200e97c:	e0bffd17 	ldw	r2,-12(fp)
 200e980:	10800050 	cmplti	r2,r2,1
 200e984:	1000111e 	bne	r2,zero,200e9cc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 200e988:	e0bffe17 	ldw	r2,-8(fp)
 200e98c:	1090000c 	andi	r2,r2,16384
 200e990:	1004c03a 	cmpne	r2,r2,zero
 200e994:	1000101e 	bne	r2,zero,200e9d8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200e998:	e0bffb17 	ldw	r2,-20(fp)
 200e99c:	10c00d17 	ldw	r3,52(r2)
 200e9a0:	e0bff917 	ldw	r2,-28(fp)
 200e9a4:	1880051e 	bne	r3,r2,200e9bc <altera_avalon_jtag_uart_write+0x1c8>
 200e9a8:	e0bffb17 	ldw	r2,-20(fp)
 200e9ac:	10c00917 	ldw	r3,36(r2)
 200e9b0:	e0bffb17 	ldw	r2,-20(fp)
 200e9b4:	10800117 	ldw	r2,4(r2)
 200e9b8:	18bff736 	bltu	r3,r2,200e998 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200e9bc:	e0bffb17 	ldw	r2,-20(fp)
 200e9c0:	10c00d17 	ldw	r3,52(r2)
 200e9c4:	e0bff917 	ldw	r2,-28(fp)
 200e9c8:	18800326 	beq	r3,r2,200e9d8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 200e9cc:	e0bffd17 	ldw	r2,-12(fp)
 200e9d0:	10800048 	cmpgei	r2,r2,1
 200e9d4:	103fcd1e 	bne	r2,zero,200e90c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200e9d8:	e0fffc17 	ldw	r3,-16(fp)
 200e9dc:	e0bff617 	ldw	r2,-40(fp)
 200e9e0:	18800526 	beq	r3,r2,200e9f8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 200e9e4:	e0fffc17 	ldw	r3,-16(fp)
 200e9e8:	e0bff617 	ldw	r2,-40(fp)
 200e9ec:	1887c83a 	sub	r3,r3,r2
 200e9f0:	e0ffff15 	stw	r3,-4(fp)
 200e9f4:	00000906 	br	200ea1c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 200e9f8:	e0bffe17 	ldw	r2,-8(fp)
 200e9fc:	1090000c 	andi	r2,r2,16384
 200ea00:	1005003a 	cmpeq	r2,r2,zero
 200ea04:	1000031e 	bne	r2,zero,200ea14 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 200ea08:	00bffd44 	movi	r2,-11
 200ea0c:	e0bfff15 	stw	r2,-4(fp)
 200ea10:	00000206 	br	200ea1c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 200ea14:	00bffec4 	movi	r2,-5
 200ea18:	e0bfff15 	stw	r2,-4(fp)
 200ea1c:	e0bfff17 	ldw	r2,-4(fp)
}
 200ea20:	e037883a 	mov	sp,fp
 200ea24:	dfc00117 	ldw	ra,4(sp)
 200ea28:	df000017 	ldw	fp,0(sp)
 200ea2c:	dec00204 	addi	sp,sp,8
 200ea30:	f800283a 	ret

0200ea34 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 200ea34:	defffa04 	addi	sp,sp,-24
 200ea38:	dfc00515 	stw	ra,20(sp)
 200ea3c:	df000415 	stw	fp,16(sp)
 200ea40:	df000404 	addi	fp,sp,16
 200ea44:	e13ffe15 	stw	r4,-8(fp)
 200ea48:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 200ea4c:	e0bffe17 	ldw	r2,-8(fp)
 200ea50:	10800017 	ldw	r2,0(r2)
 200ea54:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 200ea58:	008003f4 	movhi	r2,15
 200ea5c:	10909004 	addi	r2,r2,16960
 200ea60:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 200ea64:	e0bffe17 	ldw	r2,-8(fp)
 200ea68:	10800803 	ldbu	r2,32(r2)
 200ea6c:	10803fcc 	andi	r2,r2,255
 200ea70:	1080201c 	xori	r2,r2,128
 200ea74:	10bfe004 	addi	r2,r2,-128
 200ea78:	1004c03a 	cmpne	r2,r2,zero
 200ea7c:	1000161e 	bne	r2,zero,200ead8 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200ea80:	00000a06 	br	200eaac <lcd_write_command+0x78>
    if (--i == 0)
 200ea84:	e0bffc17 	ldw	r2,-16(fp)
 200ea88:	10bfffc4 	addi	r2,r2,-1
 200ea8c:	e0bffc15 	stw	r2,-16(fp)
 200ea90:	e0bffc17 	ldw	r2,-16(fp)
 200ea94:	1004c03a 	cmpne	r2,r2,zero
 200ea98:	1000041e 	bne	r2,zero,200eaac <lcd_write_command+0x78>
    {
      sp->broken = 1;
 200ea9c:	e0fffe17 	ldw	r3,-8(fp)
 200eaa0:	00800044 	movi	r2,1
 200eaa4:	18800805 	stb	r2,32(r3)
      return;
 200eaa8:	00000b06 	br	200ead8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200eaac:	e0bffd17 	ldw	r2,-12(fp)
 200eab0:	10800104 	addi	r2,r2,4
 200eab4:	10800037 	ldwio	r2,0(r2)
 200eab8:	1080200c 	andi	r2,r2,128
 200eabc:	1004c03a 	cmpne	r2,r2,zero
 200eac0:	103ff01e 	bne	r2,zero,200ea84 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 200eac4:	01001904 	movi	r4,100
 200eac8:	200dcf80 	call	200dcf8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 200eacc:	e0bffd17 	ldw	r2,-12(fp)
 200ead0:	e0ffff03 	ldbu	r3,-4(fp)
 200ead4:	10c00035 	stwio	r3,0(r2)
}
 200ead8:	e037883a 	mov	sp,fp
 200eadc:	dfc00117 	ldw	ra,4(sp)
 200eae0:	df000017 	ldw	fp,0(sp)
 200eae4:	dec00204 	addi	sp,sp,8
 200eae8:	f800283a 	ret

0200eaec <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 200eaec:	defffa04 	addi	sp,sp,-24
 200eaf0:	dfc00515 	stw	ra,20(sp)
 200eaf4:	df000415 	stw	fp,16(sp)
 200eaf8:	df000404 	addi	fp,sp,16
 200eafc:	e13ffe15 	stw	r4,-8(fp)
 200eb00:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 200eb04:	e0bffe17 	ldw	r2,-8(fp)
 200eb08:	10800017 	ldw	r2,0(r2)
 200eb0c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 200eb10:	008003f4 	movhi	r2,15
 200eb14:	10909004 	addi	r2,r2,16960
 200eb18:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 200eb1c:	e0bffe17 	ldw	r2,-8(fp)
 200eb20:	10800803 	ldbu	r2,32(r2)
 200eb24:	10803fcc 	andi	r2,r2,255
 200eb28:	1080201c 	xori	r2,r2,128
 200eb2c:	10bfe004 	addi	r2,r2,-128
 200eb30:	1004c03a 	cmpne	r2,r2,zero
 200eb34:	10001d1e 	bne	r2,zero,200ebac <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200eb38:	00000a06 	br	200eb64 <lcd_write_data+0x78>
    if (--i == 0)
 200eb3c:	e0bffc17 	ldw	r2,-16(fp)
 200eb40:	10bfffc4 	addi	r2,r2,-1
 200eb44:	e0bffc15 	stw	r2,-16(fp)
 200eb48:	e0bffc17 	ldw	r2,-16(fp)
 200eb4c:	1004c03a 	cmpne	r2,r2,zero
 200eb50:	1000041e 	bne	r2,zero,200eb64 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 200eb54:	e0fffe17 	ldw	r3,-8(fp)
 200eb58:	00800044 	movi	r2,1
 200eb5c:	18800805 	stb	r2,32(r3)
      return;
 200eb60:	00001206 	br	200ebac <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200eb64:	e0bffd17 	ldw	r2,-12(fp)
 200eb68:	10800104 	addi	r2,r2,4
 200eb6c:	10800037 	ldwio	r2,0(r2)
 200eb70:	1080200c 	andi	r2,r2,128
 200eb74:	1004c03a 	cmpne	r2,r2,zero
 200eb78:	103ff01e 	bne	r2,zero,200eb3c <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 200eb7c:	01001904 	movi	r4,100
 200eb80:	200dcf80 	call	200dcf8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 200eb84:	e0bffd17 	ldw	r2,-12(fp)
 200eb88:	10800204 	addi	r2,r2,8
 200eb8c:	e0ffff03 	ldbu	r3,-4(fp)
 200eb90:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 200eb94:	e0bffe17 	ldw	r2,-8(fp)
 200eb98:	108008c3 	ldbu	r2,35(r2)
 200eb9c:	10800044 	addi	r2,r2,1
 200eba0:	1007883a 	mov	r3,r2
 200eba4:	e0bffe17 	ldw	r2,-8(fp)
 200eba8:	10c008c5 	stb	r3,35(r2)
}
 200ebac:	e037883a 	mov	sp,fp
 200ebb0:	dfc00117 	ldw	ra,4(sp)
 200ebb4:	df000017 	ldw	fp,0(sp)
 200ebb8:	dec00204 	addi	sp,sp,8
 200ebbc:	f800283a 	ret

0200ebc0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 200ebc0:	defffb04 	addi	sp,sp,-20
 200ebc4:	dfc00415 	stw	ra,16(sp)
 200ebc8:	df000315 	stw	fp,12(sp)
 200ebcc:	dc000215 	stw	r16,8(sp)
 200ebd0:	df000204 	addi	fp,sp,8
 200ebd4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 200ebd8:	e13fff17 	ldw	r4,-4(fp)
 200ebdc:	01400044 	movi	r5,1
 200ebe0:	200ea340 	call	200ea34 <lcd_write_command>

  sp->x = 0;
 200ebe4:	e0bfff17 	ldw	r2,-4(fp)
 200ebe8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 200ebec:	e0bfff17 	ldw	r2,-4(fp)
 200ebf0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 200ebf4:	e0bfff17 	ldw	r2,-4(fp)
 200ebf8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200ebfc:	e03ffe15 	stw	zero,-8(fp)
 200ec00:	00001c06 	br	200ec74 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 200ec04:	e13ffe17 	ldw	r4,-8(fp)
 200ec08:	014018c4 	movi	r5,99
 200ec0c:	20040f00 	call	20040f0 <__mulsi3>
 200ec10:	10c01004 	addi	r3,r2,64
 200ec14:	e0bfff17 	ldw	r2,-4(fp)
 200ec18:	1889883a 	add	r4,r3,r2
 200ec1c:	01400804 	movi	r5,32
 200ec20:	01801444 	movi	r6,81
 200ec24:	20046bc0 	call	20046bc <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 200ec28:	e13ffe17 	ldw	r4,-8(fp)
 200ec2c:	014018c4 	movi	r5,99
 200ec30:	20040f00 	call	20040f0 <__mulsi3>
 200ec34:	10c00c04 	addi	r3,r2,48
 200ec38:	e0bfff17 	ldw	r2,-4(fp)
 200ec3c:	1889883a 	add	r4,r3,r2
 200ec40:	01400804 	movi	r5,32
 200ec44:	01800404 	movi	r6,16
 200ec48:	20046bc0 	call	20046bc <memset>
    sp->line[y].width = 0;
 200ec4c:	e13ffe17 	ldw	r4,-8(fp)
 200ec50:	e43fff17 	ldw	r16,-4(fp)
 200ec54:	014018c4 	movi	r5,99
 200ec58:	20040f00 	call	20040f0 <__mulsi3>
 200ec5c:	1405883a 	add	r2,r2,r16
 200ec60:	10802404 	addi	r2,r2,144
 200ec64:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200ec68:	e0bffe17 	ldw	r2,-8(fp)
 200ec6c:	10800044 	addi	r2,r2,1
 200ec70:	e0bffe15 	stw	r2,-8(fp)
 200ec74:	e0bffe17 	ldw	r2,-8(fp)
 200ec78:	10800090 	cmplti	r2,r2,2
 200ec7c:	103fe11e 	bne	r2,zero,200ec04 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 200ec80:	e037883a 	mov	sp,fp
 200ec84:	dfc00217 	ldw	ra,8(sp)
 200ec88:	df000117 	ldw	fp,4(sp)
 200ec8c:	dc000017 	ldw	r16,0(sp)
 200ec90:	dec00304 	addi	sp,sp,12
 200ec94:	f800283a 	ret

0200ec98 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 200ec98:	defff404 	addi	sp,sp,-48
 200ec9c:	dfc00b15 	stw	ra,44(sp)
 200eca0:	df000a15 	stw	fp,40(sp)
 200eca4:	dc800915 	stw	r18,36(sp)
 200eca8:	dc400815 	stw	r17,32(sp)
 200ecac:	dc000715 	stw	r16,28(sp)
 200ecb0:	df000704 	addi	fp,sp,28
 200ecb4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 200ecb8:	e0bfff17 	ldw	r2,-4(fp)
 200ecbc:	10800943 	ldbu	r2,37(r2)
 200ecc0:	10803fcc 	andi	r2,r2,255
 200ecc4:	1080201c 	xori	r2,r2,128
 200ecc8:	10bfe004 	addi	r2,r2,-128
 200eccc:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200ecd0:	e03ffe15 	stw	zero,-8(fp)
 200ecd4:	00006a06 	br	200ee80 <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
 200ecd8:	e13ffe17 	ldw	r4,-8(fp)
 200ecdc:	e43fff17 	ldw	r16,-4(fp)
 200ece0:	014018c4 	movi	r5,99
 200ece4:	20040f00 	call	20040f0 <__mulsi3>
 200ece8:	1405883a 	add	r2,r2,r16
 200ecec:	10802404 	addi	r2,r2,144
 200ecf0:	10800043 	ldbu	r2,1(r2)
 200ecf4:	10803fcc 	andi	r2,r2,255
 200ecf8:	1080201c 	xori	r2,r2,128
 200ecfc:	10bfe004 	addi	r2,r2,-128
 200ed00:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 200ed04:	e13ffe17 	ldw	r4,-8(fp)
 200ed08:	e43fff17 	ldw	r16,-4(fp)
 200ed0c:	014018c4 	movi	r5,99
 200ed10:	20040f00 	call	20040f0 <__mulsi3>
 200ed14:	1405883a 	add	r2,r2,r16
 200ed18:	10802404 	addi	r2,r2,144
 200ed1c:	10800083 	ldbu	r2,2(r2)
 200ed20:	11003fcc 	andi	r4,r2,255
 200ed24:	e17ffc17 	ldw	r5,-16(fp)
 200ed28:	20040f00 	call	20040f0 <__mulsi3>
 200ed2c:	1005d23a 	srai	r2,r2,8
 200ed30:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 200ed34:	e0fffa17 	ldw	r3,-24(fp)
 200ed38:	e0bffb17 	ldw	r2,-20(fp)
 200ed3c:	18800116 	blt	r3,r2,200ed44 <lcd_repaint_screen+0xac>
      offset = 0;
 200ed40:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 200ed44:	e03ffd15 	stw	zero,-12(fp)
 200ed48:	00004706 	br	200ee68 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 200ed4c:	e47ffe17 	ldw	r17,-8(fp)
 200ed50:	e0fffd17 	ldw	r3,-12(fp)
 200ed54:	e0bffa17 	ldw	r2,-24(fp)
 200ed58:	1889883a 	add	r4,r3,r2
 200ed5c:	e17ffb17 	ldw	r5,-20(fp)
 200ed60:	20040800 	call	2004080 <__modsi3>
 200ed64:	1025883a 	mov	r18,r2
 200ed68:	e43fff17 	ldw	r16,-4(fp)
 200ed6c:	8809883a 	mov	r4,r17
 200ed70:	014018c4 	movi	r5,99
 200ed74:	20040f00 	call	20040f0 <__mulsi3>
 200ed78:	1405883a 	add	r2,r2,r16
 200ed7c:	1485883a 	add	r2,r2,r18
 200ed80:	10801004 	addi	r2,r2,64
 200ed84:	10800003 	ldbu	r2,0(r2)
 200ed88:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 200ed8c:	e13ffe17 	ldw	r4,-8(fp)
 200ed90:	e47ffd17 	ldw	r17,-12(fp)
 200ed94:	e43fff17 	ldw	r16,-4(fp)
 200ed98:	014018c4 	movi	r5,99
 200ed9c:	20040f00 	call	20040f0 <__mulsi3>
 200eda0:	1405883a 	add	r2,r2,r16
 200eda4:	1445883a 	add	r2,r2,r17
 200eda8:	10800c04 	addi	r2,r2,48
 200edac:	10800003 	ldbu	r2,0(r2)
 200edb0:	10c03fcc 	andi	r3,r2,255
 200edb4:	18c0201c 	xori	r3,r3,128
 200edb8:	18ffe004 	addi	r3,r3,-128
 200edbc:	e0bff947 	ldb	r2,-27(fp)
 200edc0:	18802626 	beq	r3,r2,200ee5c <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
 200edc4:	e0fffe17 	ldw	r3,-8(fp)
 200edc8:	d0a01c04 	addi	r2,gp,-32656
 200edcc:	1885883a 	add	r2,r3,r2
 200edd0:	10800003 	ldbu	r2,0(r2)
 200edd4:	1007883a 	mov	r3,r2
 200edd8:	e0bffd17 	ldw	r2,-12(fp)
 200eddc:	1885883a 	add	r2,r3,r2
 200ede0:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 200ede4:	e0fff903 	ldbu	r3,-28(fp)
 200ede8:	e0bfff17 	ldw	r2,-4(fp)
 200edec:	108008c3 	ldbu	r2,35(r2)
 200edf0:	10803fcc 	andi	r2,r2,255
 200edf4:	1080201c 	xori	r2,r2,128
 200edf8:	10bfe004 	addi	r2,r2,-128
 200edfc:	18800926 	beq	r3,r2,200ee24 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 200ee00:	e0fff903 	ldbu	r3,-28(fp)
 200ee04:	00bfe004 	movi	r2,-128
 200ee08:	1884b03a 	or	r2,r3,r2
 200ee0c:	11403fcc 	andi	r5,r2,255
 200ee10:	e13fff17 	ldw	r4,-4(fp)
 200ee14:	200ea340 	call	200ea34 <lcd_write_command>
          sp->address = address;
 200ee18:	e0fff903 	ldbu	r3,-28(fp)
 200ee1c:	e0bfff17 	ldw	r2,-4(fp)
 200ee20:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 200ee24:	e0bff943 	ldbu	r2,-27(fp)
 200ee28:	11403fcc 	andi	r5,r2,255
 200ee2c:	e13fff17 	ldw	r4,-4(fp)
 200ee30:	200eaec0 	call	200eaec <lcd_write_data>
        sp->line[y].visible[x] = c;
 200ee34:	e13ffe17 	ldw	r4,-8(fp)
 200ee38:	e47ffd17 	ldw	r17,-12(fp)
 200ee3c:	e43fff17 	ldw	r16,-4(fp)
 200ee40:	014018c4 	movi	r5,99
 200ee44:	20040f00 	call	20040f0 <__mulsi3>
 200ee48:	1405883a 	add	r2,r2,r16
 200ee4c:	1445883a 	add	r2,r2,r17
 200ee50:	10c00c04 	addi	r3,r2,48
 200ee54:	e0bff943 	ldbu	r2,-27(fp)
 200ee58:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 200ee5c:	e0bffd17 	ldw	r2,-12(fp)
 200ee60:	10800044 	addi	r2,r2,1
 200ee64:	e0bffd15 	stw	r2,-12(fp)
 200ee68:	e0bffd17 	ldw	r2,-12(fp)
 200ee6c:	10800410 	cmplti	r2,r2,16
 200ee70:	103fb61e 	bne	r2,zero,200ed4c <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200ee74:	e0bffe17 	ldw	r2,-8(fp)
 200ee78:	10800044 	addi	r2,r2,1
 200ee7c:	e0bffe15 	stw	r2,-8(fp)
 200ee80:	e0bffe17 	ldw	r2,-8(fp)
 200ee84:	10800090 	cmplti	r2,r2,2
 200ee88:	103f931e 	bne	r2,zero,200ecd8 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 200ee8c:	e037883a 	mov	sp,fp
 200ee90:	dfc00417 	ldw	ra,16(sp)
 200ee94:	df000317 	ldw	fp,12(sp)
 200ee98:	dc800217 	ldw	r18,8(sp)
 200ee9c:	dc400117 	ldw	r17,4(sp)
 200eea0:	dc000017 	ldw	r16,0(sp)
 200eea4:	dec00504 	addi	sp,sp,20
 200eea8:	f800283a 	ret

0200eeac <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 200eeac:	defffb04 	addi	sp,sp,-20
 200eeb0:	dfc00415 	stw	ra,16(sp)
 200eeb4:	df000315 	stw	fp,12(sp)
 200eeb8:	dc000215 	stw	r16,8(sp)
 200eebc:	df000204 	addi	fp,sp,8
 200eec0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200eec4:	e03ffe15 	stw	zero,-8(fp)
 200eec8:	00002106 	br	200ef50 <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
 200eecc:	e0bffe17 	ldw	r2,-8(fp)
 200eed0:	10800048 	cmpgei	r2,r2,1
 200eed4:	1000121e 	bne	r2,zero,200ef20 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 200eed8:	e13ffe17 	ldw	r4,-8(fp)
 200eedc:	014018c4 	movi	r5,99
 200eee0:	20040f00 	call	20040f0 <__mulsi3>
 200eee4:	10c01004 	addi	r3,r2,64
 200eee8:	e0bfff17 	ldw	r2,-4(fp)
 200eeec:	18a1883a 	add	r16,r3,r2
 200eef0:	e0bffe17 	ldw	r2,-8(fp)
 200eef4:	11000044 	addi	r4,r2,1
 200eef8:	014018c4 	movi	r5,99
 200eefc:	20040f00 	call	20040f0 <__mulsi3>
 200ef00:	10c01004 	addi	r3,r2,64
 200ef04:	e0bfff17 	ldw	r2,-4(fp)
 200ef08:	1885883a 	add	r2,r3,r2
 200ef0c:	8009883a 	mov	r4,r16
 200ef10:	100b883a 	mov	r5,r2
 200ef14:	01801404 	movi	r6,80
 200ef18:	2009cac0 	call	2009cac <memcpy>
 200ef1c:	00000906 	br	200ef44 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 200ef20:	e13ffe17 	ldw	r4,-8(fp)
 200ef24:	014018c4 	movi	r5,99
 200ef28:	20040f00 	call	20040f0 <__mulsi3>
 200ef2c:	10c01004 	addi	r3,r2,64
 200ef30:	e0bfff17 	ldw	r2,-4(fp)
 200ef34:	1889883a 	add	r4,r3,r2
 200ef38:	01400804 	movi	r5,32
 200ef3c:	01801404 	movi	r6,80
 200ef40:	20046bc0 	call	20046bc <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200ef44:	e0bffe17 	ldw	r2,-8(fp)
 200ef48:	10800044 	addi	r2,r2,1
 200ef4c:	e0bffe15 	stw	r2,-8(fp)
 200ef50:	e0bffe17 	ldw	r2,-8(fp)
 200ef54:	10800090 	cmplti	r2,r2,2
 200ef58:	103fdc1e 	bne	r2,zero,200eecc <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 200ef5c:	e0bfff17 	ldw	r2,-4(fp)
 200ef60:	10800883 	ldbu	r2,34(r2)
 200ef64:	10bfffc4 	addi	r2,r2,-1
 200ef68:	1007883a 	mov	r3,r2
 200ef6c:	e0bfff17 	ldw	r2,-4(fp)
 200ef70:	10c00885 	stb	r3,34(r2)
}
 200ef74:	e037883a 	mov	sp,fp
 200ef78:	dfc00217 	ldw	ra,8(sp)
 200ef7c:	df000117 	ldw	fp,4(sp)
 200ef80:	dc000017 	ldw	r16,0(sp)
 200ef84:	dec00304 	addi	sp,sp,12
 200ef88:	f800283a 	ret

0200ef8c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 200ef8c:	defff804 	addi	sp,sp,-32
 200ef90:	dfc00715 	stw	ra,28(sp)
 200ef94:	df000615 	stw	fp,24(sp)
 200ef98:	df000604 	addi	fp,sp,24
 200ef9c:	e13ffd15 	stw	r4,-12(fp)
 200efa0:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 200efa4:	e03ffc15 	stw	zero,-16(fp)
 200efa8:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 200efac:	e0bffd17 	ldw	r2,-12(fp)
 200efb0:	10800a03 	ldbu	r2,40(r2)
 200efb4:	10803fcc 	andi	r2,r2,255
 200efb8:	1080201c 	xori	r2,r2,128
 200efbc:	10bfe004 	addi	r2,r2,-128
 200efc0:	108016d8 	cmpnei	r2,r2,91
 200efc4:	10004d1e 	bne	r2,zero,200f0fc <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
 200efc8:	e0bffd17 	ldw	r2,-12(fp)
 200efcc:	10800a04 	addi	r2,r2,40
 200efd0:	10800044 	addi	r2,r2,1
 200efd4:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 200efd8:	00000f06 	br	200f018 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 200efdc:	e13ffc17 	ldw	r4,-16(fp)
 200efe0:	01400284 	movi	r5,10
 200efe4:	20040f00 	call	20040f0 <__mulsi3>
 200efe8:	1007883a 	mov	r3,r2
 200efec:	e0bffa17 	ldw	r2,-24(fp)
 200eff0:	10800003 	ldbu	r2,0(r2)
 200eff4:	10803fcc 	andi	r2,r2,255
 200eff8:	1080201c 	xori	r2,r2,128
 200effc:	10bfe004 	addi	r2,r2,-128
 200f000:	1885883a 	add	r2,r3,r2
 200f004:	10bff404 	addi	r2,r2,-48
 200f008:	e0bffc15 	stw	r2,-16(fp)
 200f00c:	e0bffa17 	ldw	r2,-24(fp)
 200f010:	10800044 	addi	r2,r2,1
 200f014:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 200f018:	e0bffa17 	ldw	r2,-24(fp)
 200f01c:	10800003 	ldbu	r2,0(r2)
 200f020:	10803fcc 	andi	r2,r2,255
 200f024:	1080201c 	xori	r2,r2,128
 200f028:	10bfe004 	addi	r2,r2,-128
 200f02c:	1007883a 	mov	r3,r2
 200f030:	00808074 	movhi	r2,513
 200f034:	108d7804 	addi	r2,r2,13792
 200f038:	10800017 	ldw	r2,0(r2)
 200f03c:	1885883a 	add	r2,r3,r2
 200f040:	10800003 	ldbu	r2,0(r2)
 200f044:	10803fcc 	andi	r2,r2,255
 200f048:	1080010c 	andi	r2,r2,4
 200f04c:	1004c03a 	cmpne	r2,r2,zero
 200f050:	103fe21e 	bne	r2,zero,200efdc <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 200f054:	e0bffa17 	ldw	r2,-24(fp)
 200f058:	10800003 	ldbu	r2,0(r2)
 200f05c:	10803fcc 	andi	r2,r2,255
 200f060:	1080201c 	xori	r2,r2,128
 200f064:	10bfe004 	addi	r2,r2,-128
 200f068:	10800ed8 	cmpnei	r2,r2,59
 200f06c:	1000251e 	bne	r2,zero,200f104 <lcd_handle_escape+0x178>
    {
      ptr++;
 200f070:	e0bffa17 	ldw	r2,-24(fp)
 200f074:	10800044 	addi	r2,r2,1
 200f078:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 200f07c:	00000f06 	br	200f0bc <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 200f080:	e13ffb17 	ldw	r4,-20(fp)
 200f084:	01400284 	movi	r5,10
 200f088:	20040f00 	call	20040f0 <__mulsi3>
 200f08c:	1007883a 	mov	r3,r2
 200f090:	e0bffa17 	ldw	r2,-24(fp)
 200f094:	10800003 	ldbu	r2,0(r2)
 200f098:	10803fcc 	andi	r2,r2,255
 200f09c:	1080201c 	xori	r2,r2,128
 200f0a0:	10bfe004 	addi	r2,r2,-128
 200f0a4:	1885883a 	add	r2,r3,r2
 200f0a8:	10bff404 	addi	r2,r2,-48
 200f0ac:	e0bffb15 	stw	r2,-20(fp)
 200f0b0:	e0bffa17 	ldw	r2,-24(fp)
 200f0b4:	10800044 	addi	r2,r2,1
 200f0b8:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 200f0bc:	e0bffa17 	ldw	r2,-24(fp)
 200f0c0:	10800003 	ldbu	r2,0(r2)
 200f0c4:	10803fcc 	andi	r2,r2,255
 200f0c8:	1080201c 	xori	r2,r2,128
 200f0cc:	10bfe004 	addi	r2,r2,-128
 200f0d0:	1007883a 	mov	r3,r2
 200f0d4:	00808074 	movhi	r2,513
 200f0d8:	108d7804 	addi	r2,r2,13792
 200f0dc:	10800017 	ldw	r2,0(r2)
 200f0e0:	1885883a 	add	r2,r3,r2
 200f0e4:	10800003 	ldbu	r2,0(r2)
 200f0e8:	10803fcc 	andi	r2,r2,255
 200f0ec:	1080010c 	andi	r2,r2,4
 200f0f0:	1004c03a 	cmpne	r2,r2,zero
 200f0f4:	103fe21e 	bne	r2,zero,200f080 <lcd_handle_escape+0xf4>
 200f0f8:	00000206 	br	200f104 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 200f0fc:	00bfffc4 	movi	r2,-1
 200f100:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 200f104:	e0bffe07 	ldb	r2,-8(fp)
 200f108:	e0bfff15 	stw	r2,-4(fp)
 200f10c:	e0ffff17 	ldw	r3,-4(fp)
 200f110:	188012a0 	cmpeqi	r2,r3,74
 200f114:	10002f1e 	bne	r2,zero,200f1d4 <lcd_handle_escape+0x248>
 200f118:	e0ffff17 	ldw	r3,-4(fp)
 200f11c:	188012c8 	cmpgei	r2,r3,75
 200f120:	1000041e 	bne	r2,zero,200f134 <lcd_handle_escape+0x1a8>
 200f124:	e0ffff17 	ldw	r3,-4(fp)
 200f128:	18801220 	cmpeqi	r2,r3,72
 200f12c:	1000081e 	bne	r2,zero,200f150 <lcd_handle_escape+0x1c4>
 200f130:	00004a06 	br	200f25c <lcd_handle_escape+0x2d0>
 200f134:	e0ffff17 	ldw	r3,-4(fp)
 200f138:	188012e0 	cmpeqi	r2,r3,75
 200f13c:	10002b1e 	bne	r2,zero,200f1ec <lcd_handle_escape+0x260>
 200f140:	e0ffff17 	ldw	r3,-4(fp)
 200f144:	188019a0 	cmpeqi	r2,r3,102
 200f148:	1000011e 	bne	r2,zero,200f150 <lcd_handle_escape+0x1c4>
 200f14c:	00004306 	br	200f25c <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 200f150:	e0bffb17 	ldw	r2,-20(fp)
 200f154:	10800050 	cmplti	r2,r2,1
 200f158:	1000051e 	bne	r2,zero,200f170 <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
 200f15c:	e0bffb17 	ldw	r2,-20(fp)
 200f160:	10bfffc4 	addi	r2,r2,-1
 200f164:	1007883a 	mov	r3,r2
 200f168:	e0bffd17 	ldw	r2,-12(fp)
 200f16c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 200f170:	e0bffc17 	ldw	r2,-16(fp)
 200f174:	10800050 	cmplti	r2,r2,1
 200f178:	1000381e 	bne	r2,zero,200f25c <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
 200f17c:	e0bffc17 	ldw	r2,-16(fp)
 200f180:	10bfffc4 	addi	r2,r2,-1
 200f184:	1007883a 	mov	r3,r2
 200f188:	e0bffd17 	ldw	r2,-12(fp)
 200f18c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 200f190:	e0bffd17 	ldw	r2,-12(fp)
 200f194:	10800883 	ldbu	r2,34(r2)
 200f198:	10803fcc 	andi	r2,r2,255
 200f19c:	10800170 	cmpltui	r2,r2,5
 200f1a0:	1000061e 	bne	r2,zero,200f1bc <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
 200f1a4:	e0fffd17 	ldw	r3,-12(fp)
 200f1a8:	00800104 	movi	r2,4
 200f1ac:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 200f1b0:	00000206 	br	200f1bc <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
 200f1b4:	e13ffd17 	ldw	r4,-12(fp)
 200f1b8:	200eeac0 	call	200eeac <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 200f1bc:	e0bffd17 	ldw	r2,-12(fp)
 200f1c0:	10800883 	ldbu	r2,34(r2)
 200f1c4:	10803fcc 	andi	r2,r2,255
 200f1c8:	108000e8 	cmpgeui	r2,r2,3
 200f1cc:	103ff91e 	bne	r2,zero,200f1b4 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
 200f1d0:	00002206 	br	200f25c <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 200f1d4:	e0bffc17 	ldw	r2,-16(fp)
 200f1d8:	10800098 	cmpnei	r2,r2,2
 200f1dc:	10001f1e 	bne	r2,zero,200f25c <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
 200f1e0:	e13ffd17 	ldw	r4,-12(fp)
 200f1e4:	200ebc00 	call	200ebc0 <lcd_clear_screen>
    break;
 200f1e8:	00001c06 	br	200f25c <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 200f1ec:	e0bffc17 	ldw	r2,-16(fp)
 200f1f0:	10800048 	cmpgei	r2,r2,1
 200f1f4:	1000191e 	bne	r2,zero,200f25c <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 200f1f8:	e0bffd17 	ldw	r2,-12(fp)
 200f1fc:	10800843 	ldbu	r2,33(r2)
 200f200:	10803fcc 	andi	r2,r2,255
 200f204:	10801428 	cmpgeui	r2,r2,80
 200f208:	1000141e 	bne	r2,zero,200f25c <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 200f20c:	e0bffd17 	ldw	r2,-12(fp)
 200f210:	10800883 	ldbu	r2,34(r2)
 200f214:	11003fcc 	andi	r4,r2,255
 200f218:	014018c4 	movi	r5,99
 200f21c:	20040f00 	call	20040f0 <__mulsi3>
 200f220:	10c01004 	addi	r3,r2,64
 200f224:	e0bffd17 	ldw	r2,-12(fp)
 200f228:	1887883a 	add	r3,r3,r2
 200f22c:	e0bffd17 	ldw	r2,-12(fp)
 200f230:	10800843 	ldbu	r2,33(r2)
 200f234:	10803fcc 	andi	r2,r2,255
 200f238:	1889883a 	add	r4,r3,r2
 200f23c:	e0bffd17 	ldw	r2,-12(fp)
 200f240:	10800843 	ldbu	r2,33(r2)
 200f244:	10c03fcc 	andi	r3,r2,255
 200f248:	00801404 	movi	r2,80
 200f24c:	10c5c83a 	sub	r2,r2,r3
 200f250:	100d883a 	mov	r6,r2
 200f254:	01400804 	movi	r5,32
 200f258:	20046bc0 	call	20046bc <memset>
    }
    break;
  }
}
 200f25c:	e037883a 	mov	sp,fp
 200f260:	dfc00117 	ldw	ra,4(sp)
 200f264:	df000017 	ldw	fp,0(sp)
 200f268:	dec00204 	addi	sp,sp,8
 200f26c:	f800283a 	ret

0200f270 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 200f270:	defff004 	addi	sp,sp,-64
 200f274:	dfc00f15 	stw	ra,60(sp)
 200f278:	df000e15 	stw	fp,56(sp)
 200f27c:	dc800d15 	stw	r18,52(sp)
 200f280:	dc400c15 	stw	r17,48(sp)
 200f284:	dc000b15 	stw	r16,44(sp)
 200f288:	df000b04 	addi	fp,sp,44
 200f28c:	e13ffc15 	stw	r4,-16(fp)
 200f290:	e17ffd15 	stw	r5,-12(fp)
 200f294:	e1bffe15 	stw	r6,-8(fp)
 200f298:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 200f29c:	e0bffe17 	ldw	r2,-8(fp)
 200f2a0:	1007883a 	mov	r3,r2
 200f2a4:	e0bffd17 	ldw	r2,-12(fp)
 200f2a8:	10c5883a 	add	r2,r2,r3
 200f2ac:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 200f2b0:	e0fffc17 	ldw	r3,-16(fp)
 200f2b4:	00800044 	movi	r2,1
 200f2b8:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 200f2bc:	0000a306 	br	200f54c <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
 200f2c0:	e0bffd17 	ldw	r2,-12(fp)
 200f2c4:	10800003 	ldbu	r2,0(r2)
 200f2c8:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 200f2cc:	e0bffc17 	ldw	r2,-16(fp)
 200f2d0:	10800903 	ldbu	r2,36(r2)
 200f2d4:	10803fcc 	andi	r2,r2,255
 200f2d8:	1080201c 	xori	r2,r2,128
 200f2dc:	10bfe004 	addi	r2,r2,-128
 200f2e0:	1004803a 	cmplt	r2,r2,zero
 200f2e4:	10003b1e 	bne	r2,zero,200f3d4 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
 200f2e8:	e0bffc17 	ldw	r2,-16(fp)
 200f2ec:	10800903 	ldbu	r2,36(r2)
 200f2f0:	10803fcc 	andi	r2,r2,255
 200f2f4:	1080201c 	xori	r2,r2,128
 200f2f8:	10bfe004 	addi	r2,r2,-128
 200f2fc:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 200f300:	e0bff717 	ldw	r2,-36(fp)
 200f304:	1004c03a 	cmpne	r2,r2,zero
 200f308:	1000031e 	bne	r2,zero,200f318 <altera_avalon_lcd_16207_write+0xa8>
 200f30c:	e0bff807 	ldb	r2,-32(fp)
 200f310:	108016d8 	cmpnei	r2,r2,91
 200f314:	1000111e 	bne	r2,zero,200f35c <altera_avalon_lcd_16207_write+0xec>
 200f318:	e0bff717 	ldw	r2,-36(fp)
 200f31c:	1005003a 	cmpeq	r2,r2,zero
 200f320:	10001a1e 	bne	r2,zero,200f38c <altera_avalon_lcd_16207_write+0x11c>
 200f324:	e0bff807 	ldb	r2,-32(fp)
 200f328:	1007883a 	mov	r3,r2
 200f32c:	00808074 	movhi	r2,513
 200f330:	108d7804 	addi	r2,r2,13792
 200f334:	10800017 	ldw	r2,0(r2)
 200f338:	1885883a 	add	r2,r3,r2
 200f33c:	10800003 	ldbu	r2,0(r2)
 200f340:	10803fcc 	andi	r2,r2,255
 200f344:	1080010c 	andi	r2,r2,4
 200f348:	1004c03a 	cmpne	r2,r2,zero
 200f34c:	10000f1e 	bne	r2,zero,200f38c <altera_avalon_lcd_16207_write+0x11c>
 200f350:	e0bff807 	ldb	r2,-32(fp)
 200f354:	10800ee0 	cmpeqi	r2,r2,59
 200f358:	10000c1e 	bne	r2,zero,200f38c <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 200f35c:	e0fff717 	ldw	r3,-36(fp)
 200f360:	e0bffc17 	ldw	r2,-16(fp)
 200f364:	1885883a 	add	r2,r3,r2
 200f368:	10800a04 	addi	r2,r2,40
 200f36c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 200f370:	e17ff807 	ldb	r5,-32(fp)
 200f374:	e13ffc17 	ldw	r4,-16(fp)
 200f378:	200ef8c0 	call	200ef8c <lcd_handle_escape>

        sp->esccount = -1;
 200f37c:	e0fffc17 	ldw	r3,-16(fp)
 200f380:	00bfffc4 	movi	r2,-1
 200f384:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 200f388:	00006d06 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 200f38c:	e0bffc17 	ldw	r2,-16(fp)
 200f390:	10800903 	ldbu	r2,36(r2)
 200f394:	10803fcc 	andi	r2,r2,255
 200f398:	108001e8 	cmpgeui	r2,r2,7
 200f39c:	1000681e 	bne	r2,zero,200f540 <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
 200f3a0:	e0fff717 	ldw	r3,-36(fp)
 200f3a4:	e0bffc17 	ldw	r2,-16(fp)
 200f3a8:	1885883a 	add	r2,r3,r2
 200f3ac:	10c00a04 	addi	r3,r2,40
 200f3b0:	e0bff803 	ldbu	r2,-32(fp)
 200f3b4:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 200f3b8:	e0bffc17 	ldw	r2,-16(fp)
 200f3bc:	10800903 	ldbu	r2,36(r2)
 200f3c0:	10800044 	addi	r2,r2,1
 200f3c4:	1007883a 	mov	r3,r2
 200f3c8:	e0bffc17 	ldw	r2,-16(fp)
 200f3cc:	10c00905 	stb	r3,36(r2)
 200f3d0:	00005b06 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
 200f3d4:	e0bff807 	ldb	r2,-32(fp)
 200f3d8:	108006d8 	cmpnei	r2,r2,27
 200f3dc:	1000031e 	bne	r2,zero,200f3ec <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
 200f3e0:	e0bffc17 	ldw	r2,-16(fp)
 200f3e4:	10000905 	stb	zero,36(r2)
 200f3e8:	00005506 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
 200f3ec:	e0bff807 	ldb	r2,-32(fp)
 200f3f0:	10800358 	cmpnei	r2,r2,13
 200f3f4:	1000031e 	bne	r2,zero,200f404 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
 200f3f8:	e0bffc17 	ldw	r2,-16(fp)
 200f3fc:	10000845 	stb	zero,33(r2)
 200f400:	00004f06 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
 200f404:	e0bff807 	ldb	r2,-32(fp)
 200f408:	10800298 	cmpnei	r2,r2,10
 200f40c:	1000101e 	bne	r2,zero,200f450 <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
 200f410:	e0bffc17 	ldw	r2,-16(fp)
 200f414:	10000845 	stb	zero,33(r2)
      sp->y++;
 200f418:	e0bffc17 	ldw	r2,-16(fp)
 200f41c:	10800883 	ldbu	r2,34(r2)
 200f420:	10800044 	addi	r2,r2,1
 200f424:	1007883a 	mov	r3,r2
 200f428:	e0bffc17 	ldw	r2,-16(fp)
 200f42c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 200f430:	e0bffc17 	ldw	r2,-16(fp)
 200f434:	10800883 	ldbu	r2,34(r2)
 200f438:	10803fcc 	andi	r2,r2,255
 200f43c:	108000f0 	cmpltui	r2,r2,3
 200f440:	10003f1e 	bne	r2,zero,200f540 <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
 200f444:	e13ffc17 	ldw	r4,-16(fp)
 200f448:	200eeac0 	call	200eeac <lcd_scroll_up>
 200f44c:	00003c06 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
 200f450:	e0bff807 	ldb	r2,-32(fp)
 200f454:	10800218 	cmpnei	r2,r2,8
 200f458:	10000c1e 	bne	r2,zero,200f48c <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
 200f45c:	e0bffc17 	ldw	r2,-16(fp)
 200f460:	10800843 	ldbu	r2,33(r2)
 200f464:	10803fcc 	andi	r2,r2,255
 200f468:	1005003a 	cmpeq	r2,r2,zero
 200f46c:	1000341e 	bne	r2,zero,200f540 <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
 200f470:	e0bffc17 	ldw	r2,-16(fp)
 200f474:	10800843 	ldbu	r2,33(r2)
 200f478:	10bfffc4 	addi	r2,r2,-1
 200f47c:	1007883a 	mov	r3,r2
 200f480:	e0bffc17 	ldw	r2,-16(fp)
 200f484:	10c00845 	stb	r3,33(r2)
 200f488:	00002d06 	br	200f540 <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
 200f48c:	e0bff807 	ldb	r2,-32(fp)
 200f490:	1007883a 	mov	r3,r2
 200f494:	00808074 	movhi	r2,513
 200f498:	108d7804 	addi	r2,r2,13792
 200f49c:	10800017 	ldw	r2,0(r2)
 200f4a0:	1885883a 	add	r2,r3,r2
 200f4a4:	10800003 	ldbu	r2,0(r2)
 200f4a8:	10803fcc 	andi	r2,r2,255
 200f4ac:	1080201c 	xori	r2,r2,128
 200f4b0:	10bfe004 	addi	r2,r2,-128
 200f4b4:	108025cc 	andi	r2,r2,151
 200f4b8:	1005003a 	cmpeq	r2,r2,zero
 200f4bc:	1000201e 	bne	r2,zero,200f540 <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 200f4c0:	e0bffc17 	ldw	r2,-16(fp)
 200f4c4:	10800883 	ldbu	r2,34(r2)
 200f4c8:	10803fcc 	andi	r2,r2,255
 200f4cc:	108000b0 	cmpltui	r2,r2,2
 200f4d0:	1000021e 	bne	r2,zero,200f4dc <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
 200f4d4:	e13ffc17 	ldw	r4,-16(fp)
 200f4d8:	200eeac0 	call	200eeac <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 200f4dc:	e0bffc17 	ldw	r2,-16(fp)
 200f4e0:	10800843 	ldbu	r2,33(r2)
 200f4e4:	10803fcc 	andi	r2,r2,255
 200f4e8:	10801428 	cmpgeui	r2,r2,80
 200f4ec:	10000e1e 	bne	r2,zero,200f528 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
 200f4f0:	e0bffc17 	ldw	r2,-16(fp)
 200f4f4:	10800883 	ldbu	r2,34(r2)
 200f4f8:	11003fcc 	andi	r4,r2,255
 200f4fc:	e0bffc17 	ldw	r2,-16(fp)
 200f500:	10800843 	ldbu	r2,33(r2)
 200f504:	14403fcc 	andi	r17,r2,255
 200f508:	e43ffc17 	ldw	r16,-16(fp)
 200f50c:	014018c4 	movi	r5,99
 200f510:	20040f00 	call	20040f0 <__mulsi3>
 200f514:	1405883a 	add	r2,r2,r16
 200f518:	1445883a 	add	r2,r2,r17
 200f51c:	10c01004 	addi	r3,r2,64
 200f520:	e0bff803 	ldbu	r2,-32(fp)
 200f524:	18800005 	stb	r2,0(r3)

      sp->x++;
 200f528:	e0bffc17 	ldw	r2,-16(fp)
 200f52c:	10800843 	ldbu	r2,33(r2)
 200f530:	10800044 	addi	r2,r2,1
 200f534:	1007883a 	mov	r3,r2
 200f538:	e0bffc17 	ldw	r2,-16(fp)
 200f53c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 200f540:	e0bffd17 	ldw	r2,-12(fp)
 200f544:	10800044 	addi	r2,r2,1
 200f548:	e0bffd15 	stw	r2,-12(fp)
 200f54c:	e0fffd17 	ldw	r3,-12(fp)
 200f550:	e0bffb17 	ldw	r2,-20(fp)
 200f554:	18bf5a36 	bltu	r3,r2,200f2c0 <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 200f558:	00800404 	movi	r2,16
 200f55c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200f560:	e03ffa15 	stw	zero,-24(fp)
 200f564:	00003906 	br	200f64c <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 200f568:	00801404 	movi	r2,80
 200f56c:	e0bff615 	stw	r2,-40(fp)
 200f570:	00001206 	br	200f5bc <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
 200f574:	e13ffa17 	ldw	r4,-24(fp)
 200f578:	e0bff617 	ldw	r2,-40(fp)
 200f57c:	147fffc4 	addi	r17,r2,-1
 200f580:	e43ffc17 	ldw	r16,-16(fp)
 200f584:	014018c4 	movi	r5,99
 200f588:	20040f00 	call	20040f0 <__mulsi3>
 200f58c:	1405883a 	add	r2,r2,r16
 200f590:	1445883a 	add	r2,r2,r17
 200f594:	10801004 	addi	r2,r2,64
 200f598:	10800003 	ldbu	r2,0(r2)
 200f59c:	10803fcc 	andi	r2,r2,255
 200f5a0:	1080201c 	xori	r2,r2,128
 200f5a4:	10bfe004 	addi	r2,r2,-128
 200f5a8:	10800818 	cmpnei	r2,r2,32
 200f5ac:	1000061e 	bne	r2,zero,200f5c8 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 200f5b0:	e0bff617 	ldw	r2,-40(fp)
 200f5b4:	10bfffc4 	addi	r2,r2,-1
 200f5b8:	e0bff615 	stw	r2,-40(fp)
 200f5bc:	e0bff617 	ldw	r2,-40(fp)
 200f5c0:	10800048 	cmpgei	r2,r2,1
 200f5c4:	103feb1e 	bne	r2,zero,200f574 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 200f5c8:	e0bff617 	ldw	r2,-40(fp)
 200f5cc:	10800448 	cmpgei	r2,r2,17
 200f5d0:	1000031e 	bne	r2,zero,200f5e0 <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
 200f5d4:	00800404 	movi	r2,16
 200f5d8:	e0bff615 	stw	r2,-40(fp)
 200f5dc:	00000306 	br	200f5ec <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
 200f5e0:	e0bff617 	ldw	r2,-40(fp)
 200f5e4:	10800044 	addi	r2,r2,1
 200f5e8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 200f5ec:	e13ffa17 	ldw	r4,-24(fp)
 200f5f0:	e0bff617 	ldw	r2,-40(fp)
 200f5f4:	1023883a 	mov	r17,r2
 200f5f8:	e43ffc17 	ldw	r16,-16(fp)
 200f5fc:	014018c4 	movi	r5,99
 200f600:	20040f00 	call	20040f0 <__mulsi3>
 200f604:	1405883a 	add	r2,r2,r16
 200f608:	10802404 	addi	r2,r2,144
 200f60c:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
 200f610:	e0fff917 	ldw	r3,-28(fp)
 200f614:	e0bff617 	ldw	r2,-40(fp)
 200f618:	1880020e 	bge	r3,r2,200f624 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
 200f61c:	e0bff617 	ldw	r2,-40(fp)
 200f620:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 200f624:	e13ffa17 	ldw	r4,-24(fp)
 200f628:	e43ffc17 	ldw	r16,-16(fp)
 200f62c:	014018c4 	movi	r5,99
 200f630:	20040f00 	call	20040f0 <__mulsi3>
 200f634:	1405883a 	add	r2,r2,r16
 200f638:	10802404 	addi	r2,r2,144
 200f63c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200f640:	e0bffa17 	ldw	r2,-24(fp)
 200f644:	10800044 	addi	r2,r2,1
 200f648:	e0bffa15 	stw	r2,-24(fp)
 200f64c:	e0bffa17 	ldw	r2,-24(fp)
 200f650:	10800090 	cmplti	r2,r2,2
 200f654:	103fc41e 	bne	r2,zero,200f568 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 200f658:	e0bff917 	ldw	r2,-28(fp)
 200f65c:	10800448 	cmpgei	r2,r2,17
 200f660:	1000031e 	bne	r2,zero,200f670 <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
 200f664:	e0bffc17 	ldw	r2,-16(fp)
 200f668:	10000985 	stb	zero,38(r2)
 200f66c:	00003106 	br	200f734 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
 200f670:	e0bff917 	ldw	r2,-28(fp)
 200f674:	1085883a 	add	r2,r2,r2
 200f678:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 200f67c:	e0bff917 	ldw	r2,-28(fp)
 200f680:	1007883a 	mov	r3,r2
 200f684:	e0bffc17 	ldw	r2,-16(fp)
 200f688:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200f68c:	e03ffa15 	stw	zero,-24(fp)
 200f690:	00002506 	br	200f728 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 200f694:	e13ffa17 	ldw	r4,-24(fp)
 200f698:	e43ffc17 	ldw	r16,-16(fp)
 200f69c:	014018c4 	movi	r5,99
 200f6a0:	20040f00 	call	20040f0 <__mulsi3>
 200f6a4:	1405883a 	add	r2,r2,r16
 200f6a8:	10802404 	addi	r2,r2,144
 200f6ac:	10800043 	ldbu	r2,1(r2)
 200f6b0:	10803fcc 	andi	r2,r2,255
 200f6b4:	1080201c 	xori	r2,r2,128
 200f6b8:	10bfe004 	addi	r2,r2,-128
 200f6bc:	10800450 	cmplti	r2,r2,17
 200f6c0:	1000161e 	bne	r2,zero,200f71c <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 200f6c4:	e4bffa17 	ldw	r18,-24(fp)
 200f6c8:	e13ffa17 	ldw	r4,-24(fp)
 200f6cc:	e43ffc17 	ldw	r16,-16(fp)
 200f6d0:	014018c4 	movi	r5,99
 200f6d4:	20040f00 	call	20040f0 <__mulsi3>
 200f6d8:	1405883a 	add	r2,r2,r16
 200f6dc:	10802404 	addi	r2,r2,144
 200f6e0:	10800043 	ldbu	r2,1(r2)
 200f6e4:	10803fcc 	andi	r2,r2,255
 200f6e8:	1080201c 	xori	r2,r2,128
 200f6ec:	10bfe004 	addi	r2,r2,-128
 200f6f0:	1008923a 	slli	r4,r2,8
 200f6f4:	e17ff917 	ldw	r5,-28(fp)
 200f6f8:	20040200 	call	2004020 <__divsi3>
 200f6fc:	1023883a 	mov	r17,r2
 200f700:	e43ffc17 	ldw	r16,-16(fp)
 200f704:	9009883a 	mov	r4,r18
 200f708:	014018c4 	movi	r5,99
 200f70c:	20040f00 	call	20040f0 <__mulsi3>
 200f710:	1405883a 	add	r2,r2,r16
 200f714:	10802404 	addi	r2,r2,144
 200f718:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200f71c:	e0bffa17 	ldw	r2,-24(fp)
 200f720:	10800044 	addi	r2,r2,1
 200f724:	e0bffa15 	stw	r2,-24(fp)
 200f728:	e0bffa17 	ldw	r2,-24(fp)
 200f72c:	10800090 	cmplti	r2,r2,2
 200f730:	103fd81e 	bne	r2,zero,200f694 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 200f734:	e0bffc17 	ldw	r2,-16(fp)
 200f738:	10800943 	ldbu	r2,37(r2)
 200f73c:	10803fcc 	andi	r2,r2,255
 200f740:	1080201c 	xori	r2,r2,128
 200f744:	10bfe004 	addi	r2,r2,-128
 200f748:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 200f74c:	e13ffc17 	ldw	r4,-16(fp)
 200f750:	200ec980 	call	200ec98 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 200f754:	e0bffc17 	ldw	r2,-16(fp)
 200f758:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 200f75c:	e0bffc17 	ldw	r2,-16(fp)
 200f760:	10800943 	ldbu	r2,37(r2)
 200f764:	10c03fcc 	andi	r3,r2,255
 200f768:	18c0201c 	xori	r3,r3,128
 200f76c:	18ffe004 	addi	r3,r3,-128
 200f770:	e0bff517 	ldw	r2,-44(fp)
 200f774:	18800426 	beq	r3,r2,200f788 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 200f778:	e0fffc17 	ldw	r3,-16(fp)
 200f77c:	00800044 	movi	r2,1
 200f780:	188009c5 	stb	r2,39(r3)
  }
 200f784:	003feb06 	br	200f734 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 200f788:	e0bffe17 	ldw	r2,-8(fp)
}
 200f78c:	e037883a 	mov	sp,fp
 200f790:	dfc00417 	ldw	ra,16(sp)
 200f794:	df000317 	ldw	fp,12(sp)
 200f798:	dc800217 	ldw	r18,8(sp)
 200f79c:	dc400117 	ldw	r17,4(sp)
 200f7a0:	dc000017 	ldw	r16,0(sp)
 200f7a4:	dec00504 	addi	sp,sp,20
 200f7a8:	f800283a 	ret

0200f7ac <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 200f7ac:	defffc04 	addi	sp,sp,-16
 200f7b0:	dfc00315 	stw	ra,12(sp)
 200f7b4:	df000215 	stw	fp,8(sp)
 200f7b8:	df000204 	addi	fp,sp,8
 200f7bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 200f7c0:	e0bfff17 	ldw	r2,-4(fp)
 200f7c4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 200f7c8:	e0bffe17 	ldw	r2,-8(fp)
 200f7cc:	10800943 	ldbu	r2,37(r2)
 200f7d0:	10803fcc 	andi	r2,r2,255
 200f7d4:	1080201c 	xori	r2,r2,128
 200f7d8:	10bfe004 	addi	r2,r2,-128
 200f7dc:	10c00044 	addi	r3,r2,1
 200f7e0:	e0bffe17 	ldw	r2,-8(fp)
 200f7e4:	10800983 	ldbu	r2,38(r2)
 200f7e8:	10803fcc 	andi	r2,r2,255
 200f7ec:	1080201c 	xori	r2,r2,128
 200f7f0:	10bfe004 	addi	r2,r2,-128
 200f7f4:	18800316 	blt	r3,r2,200f804 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 200f7f8:	e0bffe17 	ldw	r2,-8(fp)
 200f7fc:	10000945 	stb	zero,37(r2)
 200f800:	00000606 	br	200f81c <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 200f804:	e0bffe17 	ldw	r2,-8(fp)
 200f808:	10800943 	ldbu	r2,37(r2)
 200f80c:	10800044 	addi	r2,r2,1
 200f810:	1007883a 	mov	r3,r2
 200f814:	e0bffe17 	ldw	r2,-8(fp)
 200f818:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 200f81c:	e0bffe17 	ldw	r2,-8(fp)
 200f820:	10800983 	ldbu	r2,38(r2)
 200f824:	10803fcc 	andi	r2,r2,255
 200f828:	1080201c 	xori	r2,r2,128
 200f82c:	10bfe004 	addi	r2,r2,-128
 200f830:	10800050 	cmplti	r2,r2,1
 200f834:	1000091e 	bne	r2,zero,200f85c <alt_lcd_16207_timeout+0xb0>
 200f838:	e0bffe17 	ldw	r2,-8(fp)
 200f83c:	108009c3 	ldbu	r2,39(r2)
 200f840:	10803fcc 	andi	r2,r2,255
 200f844:	1080201c 	xori	r2,r2,128
 200f848:	10bfe004 	addi	r2,r2,-128
 200f84c:	1004c03a 	cmpne	r2,r2,zero
 200f850:	1000021e 	bne	r2,zero,200f85c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 200f854:	e13ffe17 	ldw	r4,-8(fp)
 200f858:	200ec980 	call	200ec98 <lcd_repaint_screen>

  return sp->period;
 200f85c:	e0bffe17 	ldw	r2,-8(fp)
 200f860:	10800717 	ldw	r2,28(r2)
}
 200f864:	e037883a 	mov	sp,fp
 200f868:	dfc00117 	ldw	ra,4(sp)
 200f86c:	df000017 	ldw	fp,0(sp)
 200f870:	dec00204 	addi	sp,sp,8
 200f874:	f800283a 	ret

0200f878 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 200f878:	defffc04 	addi	sp,sp,-16
 200f87c:	dfc00315 	stw	ra,12(sp)
 200f880:	df000215 	stw	fp,8(sp)
 200f884:	df000204 	addi	fp,sp,8
 200f888:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 200f88c:	e0bfff17 	ldw	r2,-4(fp)
 200f890:	10800017 	ldw	r2,0(r2)
 200f894:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 200f898:	e0bfff17 	ldw	r2,-4(fp)
 200f89c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 200f8a0:	010ea604 	movi	r4,15000
 200f8a4:	200dcf80 	call	200dcf8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200f8a8:	e0bffe17 	ldw	r2,-8(fp)
 200f8ac:	1007883a 	mov	r3,r2
 200f8b0:	00800c04 	movi	r2,48
 200f8b4:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 200f8b8:	01040104 	movi	r4,4100
 200f8bc:	200dcf80 	call	200dcf8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200f8c0:	e0bffe17 	ldw	r2,-8(fp)
 200f8c4:	1007883a 	mov	r3,r2
 200f8c8:	00800c04 	movi	r2,48
 200f8cc:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 200f8d0:	0100fa04 	movi	r4,1000
 200f8d4:	200dcf80 	call	200dcf8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200f8d8:	e0bffe17 	ldw	r2,-8(fp)
 200f8dc:	1007883a 	mov	r3,r2
 200f8e0:	00800c04 	movi	r2,48
 200f8e4:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 200f8e8:	e13fff17 	ldw	r4,-4(fp)
 200f8ec:	01400e04 	movi	r5,56
 200f8f0:	200ea340 	call	200ea34 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 200f8f4:	e13fff17 	ldw	r4,-4(fp)
 200f8f8:	01400204 	movi	r5,8
 200f8fc:	200ea340 	call	200ea34 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 200f900:	e13fff17 	ldw	r4,-4(fp)
 200f904:	200ebc00 	call	200ebc0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 200f908:	e13fff17 	ldw	r4,-4(fp)
 200f90c:	01400184 	movi	r5,6
 200f910:	200ea340 	call	200ea34 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 200f914:	e13fff17 	ldw	r4,-4(fp)
 200f918:	01400304 	movi	r5,12
 200f91c:	200ea340 	call	200ea34 <lcd_write_command>

  sp->esccount = -1;
 200f920:	e0ffff17 	ldw	r3,-4(fp)
 200f924:	00bfffc4 	movi	r2,-1
 200f928:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 200f92c:	e0bfff17 	ldw	r2,-4(fp)
 200f930:	11000a04 	addi	r4,r2,40
 200f934:	000b883a 	mov	r5,zero
 200f938:	01800204 	movi	r6,8
 200f93c:	20046bc0 	call	20046bc <memset>

  sp->scrollpos = 0;
 200f940:	e0bfff17 	ldw	r2,-4(fp)
 200f944:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 200f948:	e0bfff17 	ldw	r2,-4(fp)
 200f94c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 200f950:	e0bfff17 	ldw	r2,-4(fp)
 200f954:	100009c5 	stb	zero,39(r2)
 200f958:	00808074 	movhi	r2,513
 200f95c:	1094f204 	addi	r2,r2,21448
 200f960:	10800017 	ldw	r2,0(r2)
 200f964:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 200f968:	01400284 	movi	r5,10
 200f96c:	20040e00 	call	20040e0 <__udivsi3>
 200f970:	1007883a 	mov	r3,r2
 200f974:	e0bfff17 	ldw	r2,-4(fp)
 200f978:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 200f97c:	e0bfff17 	ldw	r2,-4(fp)
 200f980:	11000104 	addi	r4,r2,4
 200f984:	e0bfff17 	ldw	r2,-4(fp)
 200f988:	10800717 	ldw	r2,28(r2)
 200f98c:	100b883a 	mov	r5,r2
 200f990:	01808074 	movhi	r6,513
 200f994:	31bdeb04 	addi	r6,r6,-2132
 200f998:	e1ffff17 	ldw	r7,-4(fp)
 200f99c:	200fb0c0 	call	200fb0c <alt_alarm_start>
}
 200f9a0:	e037883a 	mov	sp,fp
 200f9a4:	dfc00117 	ldw	ra,4(sp)
 200f9a8:	df000017 	ldw	fp,0(sp)
 200f9ac:	dec00204 	addi	sp,sp,8
 200f9b0:	f800283a 	ret

0200f9b4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200f9b4:	defffa04 	addi	sp,sp,-24
 200f9b8:	dfc00515 	stw	ra,20(sp)
 200f9bc:	df000415 	stw	fp,16(sp)
 200f9c0:	df000404 	addi	fp,sp,16
 200f9c4:	e13ffd15 	stw	r4,-12(fp)
 200f9c8:	e17ffe15 	stw	r5,-8(fp)
 200f9cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 200f9d0:	e0bffd17 	ldw	r2,-12(fp)
 200f9d4:	10800017 	ldw	r2,0(r2)
 200f9d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 200f9dc:	e0bffc17 	ldw	r2,-16(fp)
 200f9e0:	11000a04 	addi	r4,r2,40
 200f9e4:	e0bffd17 	ldw	r2,-12(fp)
 200f9e8:	11c00217 	ldw	r7,8(r2)
 200f9ec:	e17ffe17 	ldw	r5,-8(fp)
 200f9f0:	e1bfff17 	ldw	r6,-4(fp)
 200f9f4:	200f2700 	call	200f270 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 200f9f8:	e037883a 	mov	sp,fp
 200f9fc:	dfc00117 	ldw	ra,4(sp)
 200fa00:	df000017 	ldw	fp,0(sp)
 200fa04:	dec00204 	addi	sp,sp,8
 200fa08:	f800283a 	ret

0200fa0c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200fa0c:	defffa04 	addi	sp,sp,-24
 200fa10:	dfc00515 	stw	ra,20(sp)
 200fa14:	df000415 	stw	fp,16(sp)
 200fa18:	df000404 	addi	fp,sp,16
 200fa1c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200fa20:	e0bfff17 	ldw	r2,-4(fp)
 200fa24:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200fa28:	e0bfff17 	ldw	r2,-4(fp)
 200fa2c:	10800104 	addi	r2,r2,4
 200fa30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fa34:	0005303a 	rdctl	r2,status
 200fa38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fa3c:	e0fffd17 	ldw	r3,-12(fp)
 200fa40:	00bfff84 	movi	r2,-2
 200fa44:	1884703a 	and	r2,r3,r2
 200fa48:	1001703a 	wrctl	status,r2
  
  return context;
 200fa4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200fa50:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 200fa54:	201077c0 	call	201077c <alt_tick>
 200fa58:	e0bffe17 	ldw	r2,-8(fp)
 200fa5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fa60:	e0bffc17 	ldw	r2,-16(fp)
 200fa64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200fa68:	e037883a 	mov	sp,fp
 200fa6c:	dfc00117 	ldw	ra,4(sp)
 200fa70:	df000017 	ldw	fp,0(sp)
 200fa74:	dec00204 	addi	sp,sp,8
 200fa78:	f800283a 	ret

0200fa7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200fa7c:	defff804 	addi	sp,sp,-32
 200fa80:	dfc00715 	stw	ra,28(sp)
 200fa84:	df000615 	stw	fp,24(sp)
 200fa88:	df000604 	addi	fp,sp,24
 200fa8c:	e13ffc15 	stw	r4,-16(fp)
 200fa90:	e17ffd15 	stw	r5,-12(fp)
 200fa94:	e1bffe15 	stw	r6,-8(fp)
 200fa98:	e1ffff15 	stw	r7,-4(fp)
 200fa9c:	e0bfff17 	ldw	r2,-4(fp)
 200faa0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200faa4:	00808074 	movhi	r2,513
 200faa8:	1094f204 	addi	r2,r2,21448
 200faac:	10800017 	ldw	r2,0(r2)
 200fab0:	1004c03a 	cmpne	r2,r2,zero
 200fab4:	1000041e 	bne	r2,zero,200fac8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 200fab8:	00c08074 	movhi	r3,513
 200fabc:	18d4f204 	addi	r3,r3,21448
 200fac0:	e0bffb17 	ldw	r2,-20(fp)
 200fac4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200fac8:	e0bffc17 	ldw	r2,-16(fp)
 200facc:	10800104 	addi	r2,r2,4
 200fad0:	1007883a 	mov	r3,r2
 200fad4:	008001c4 	movi	r2,7
 200fad8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200fadc:	d8000015 	stw	zero,0(sp)
 200fae0:	e13ffd17 	ldw	r4,-12(fp)
 200fae4:	e17ffe17 	ldw	r5,-8(fp)
 200fae8:	01808074 	movhi	r6,513
 200faec:	31be8304 	addi	r6,r6,-1524
 200faf0:	e1fffc17 	ldw	r7,-16(fp)
 200faf4:	200ffe40 	call	200ffe4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200faf8:	e037883a 	mov	sp,fp
 200fafc:	dfc00117 	ldw	ra,4(sp)
 200fb00:	df000017 	ldw	fp,0(sp)
 200fb04:	dec00204 	addi	sp,sp,8
 200fb08:	f800283a 	ret

0200fb0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200fb0c:	defff404 	addi	sp,sp,-48
 200fb10:	df000b15 	stw	fp,44(sp)
 200fb14:	df000b04 	addi	fp,sp,44
 200fb18:	e13ffb15 	stw	r4,-20(fp)
 200fb1c:	e17ffc15 	stw	r5,-16(fp)
 200fb20:	e1bffd15 	stw	r6,-12(fp)
 200fb24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200fb28:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200fb2c:	00808074 	movhi	r2,513
 200fb30:	1094f204 	addi	r2,r2,21448
 200fb34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200fb38:	1005003a 	cmpeq	r2,r2,zero
 200fb3c:	1000411e 	bne	r2,zero,200fc44 <alt_alarm_start+0x138>
  {
    if (alarm)
 200fb40:	e0bffb17 	ldw	r2,-20(fp)
 200fb44:	1005003a 	cmpeq	r2,r2,zero
 200fb48:	10003b1e 	bne	r2,zero,200fc38 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 200fb4c:	e0fffb17 	ldw	r3,-20(fp)
 200fb50:	e0bffd17 	ldw	r2,-12(fp)
 200fb54:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 200fb58:	e0fffb17 	ldw	r3,-20(fp)
 200fb5c:	e0bffe17 	ldw	r2,-8(fp)
 200fb60:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fb64:	0005303a 	rdctl	r2,status
 200fb68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fb6c:	e0fff817 	ldw	r3,-32(fp)
 200fb70:	00bfff84 	movi	r2,-2
 200fb74:	1884703a 	and	r2,r3,r2
 200fb78:	1001703a 	wrctl	status,r2
  
  return context;
 200fb7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200fb80:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200fb84:	00808074 	movhi	r2,513
 200fb88:	1094f304 	addi	r2,r2,21452
 200fb8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200fb90:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200fb94:	e0fffc17 	ldw	r3,-16(fp)
 200fb98:	e0bff917 	ldw	r2,-28(fp)
 200fb9c:	1885883a 	add	r2,r3,r2
 200fba0:	10c00044 	addi	r3,r2,1
 200fba4:	e0bffb17 	ldw	r2,-20(fp)
 200fba8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200fbac:	e0bffb17 	ldw	r2,-20(fp)
 200fbb0:	10c00217 	ldw	r3,8(r2)
 200fbb4:	e0bff917 	ldw	r2,-28(fp)
 200fbb8:	1880042e 	bgeu	r3,r2,200fbcc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 200fbbc:	e0fffb17 	ldw	r3,-20(fp)
 200fbc0:	00800044 	movi	r2,1
 200fbc4:	18800405 	stb	r2,16(r3)
 200fbc8:	00000206 	br	200fbd4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 200fbcc:	e0bffb17 	ldw	r2,-20(fp)
 200fbd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200fbd4:	e0fffb17 	ldw	r3,-20(fp)
 200fbd8:	00808074 	movhi	r2,513
 200fbdc:	108d7604 	addi	r2,r2,13784
 200fbe0:	e0bff615 	stw	r2,-40(fp)
 200fbe4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200fbe8:	e0fff717 	ldw	r3,-36(fp)
 200fbec:	e0bff617 	ldw	r2,-40(fp)
 200fbf0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200fbf4:	e0bff617 	ldw	r2,-40(fp)
 200fbf8:	10c00017 	ldw	r3,0(r2)
 200fbfc:	e0bff717 	ldw	r2,-36(fp)
 200fc00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200fc04:	e0bff617 	ldw	r2,-40(fp)
 200fc08:	10c00017 	ldw	r3,0(r2)
 200fc0c:	e0bff717 	ldw	r2,-36(fp)
 200fc10:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200fc14:	e0fff617 	ldw	r3,-40(fp)
 200fc18:	e0bff717 	ldw	r2,-36(fp)
 200fc1c:	18800015 	stw	r2,0(r3)
 200fc20:	e0bffa17 	ldw	r2,-24(fp)
 200fc24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fc28:	e0bff517 	ldw	r2,-44(fp)
 200fc2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200fc30:	e03fff15 	stw	zero,-4(fp)
 200fc34:	00000506 	br	200fc4c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 200fc38:	00bffa84 	movi	r2,-22
 200fc3c:	e0bfff15 	stw	r2,-4(fp)
 200fc40:	00000206 	br	200fc4c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 200fc44:	00bfde84 	movi	r2,-134
 200fc48:	e0bfff15 	stw	r2,-4(fp)
 200fc4c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 200fc50:	e037883a 	mov	sp,fp
 200fc54:	df000017 	ldw	fp,0(sp)
 200fc58:	dec00104 	addi	sp,sp,4
 200fc5c:	f800283a 	ret

0200fc60 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200fc60:	defffa04 	addi	sp,sp,-24
 200fc64:	dfc00515 	stw	ra,20(sp)
 200fc68:	df000415 	stw	fp,16(sp)
 200fc6c:	df000404 	addi	fp,sp,16
 200fc70:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 200fc74:	008000c4 	movi	r2,3
 200fc78:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 200fc7c:	e13ffc17 	ldw	r4,-16(fp)
 200fc80:	014003f4 	movhi	r5,15
 200fc84:	29509004 	addi	r5,r5,16960
 200fc88:	20040f00 	call	20040f0 <__mulsi3>
 200fc8c:	100b883a 	mov	r5,r2
 200fc90:	0100bef4 	movhi	r4,763
 200fc94:	213c2004 	addi	r4,r4,-3968
 200fc98:	20040e00 	call	20040e0 <__udivsi3>
 200fc9c:	100b883a 	mov	r5,r2
 200fca0:	01200034 	movhi	r4,32768
 200fca4:	213fffc4 	addi	r4,r4,-1
 200fca8:	20040e00 	call	20040e0 <__udivsi3>
 200fcac:	100b883a 	mov	r5,r2
 200fcb0:	e13fff17 	ldw	r4,-4(fp)
 200fcb4:	20040e00 	call	20040e0 <__udivsi3>
 200fcb8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200fcbc:	e0bffd17 	ldw	r2,-12(fp)
 200fcc0:	1005003a 	cmpeq	r2,r2,zero
 200fcc4:	10002a1e 	bne	r2,zero,200fd70 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 200fcc8:	e03ffe15 	stw	zero,-8(fp)
 200fccc:	00001706 	br	200fd2c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200fcd0:	00a00034 	movhi	r2,32768
 200fcd4:	10bfffc4 	addi	r2,r2,-1
 200fcd8:	10bfffc4 	addi	r2,r2,-1
 200fcdc:	103ffe1e 	bne	r2,zero,200fcd8 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200fce0:	e13ffc17 	ldw	r4,-16(fp)
 200fce4:	014003f4 	movhi	r5,15
 200fce8:	29509004 	addi	r5,r5,16960
 200fcec:	20040f00 	call	20040f0 <__mulsi3>
 200fcf0:	100b883a 	mov	r5,r2
 200fcf4:	0100bef4 	movhi	r4,763
 200fcf8:	213c2004 	addi	r4,r4,-3968
 200fcfc:	20040e00 	call	20040e0 <__udivsi3>
 200fd00:	100b883a 	mov	r5,r2
 200fd04:	01200034 	movhi	r4,32768
 200fd08:	213fffc4 	addi	r4,r4,-1
 200fd0c:	20040e00 	call	20040e0 <__udivsi3>
 200fd10:	1007883a 	mov	r3,r2
 200fd14:	e0bfff17 	ldw	r2,-4(fp)
 200fd18:	10c5c83a 	sub	r2,r2,r3
 200fd1c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200fd20:	e0bffe17 	ldw	r2,-8(fp)
 200fd24:	10800044 	addi	r2,r2,1
 200fd28:	e0bffe15 	stw	r2,-8(fp)
 200fd2c:	e0fffe17 	ldw	r3,-8(fp)
 200fd30:	e0bffd17 	ldw	r2,-12(fp)
 200fd34:	18bfe616 	blt	r3,r2,200fcd0 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200fd38:	e13ffc17 	ldw	r4,-16(fp)
 200fd3c:	014003f4 	movhi	r5,15
 200fd40:	29509004 	addi	r5,r5,16960
 200fd44:	20040f00 	call	20040f0 <__mulsi3>
 200fd48:	100b883a 	mov	r5,r2
 200fd4c:	0100bef4 	movhi	r4,763
 200fd50:	213c2004 	addi	r4,r4,-3968
 200fd54:	20040e00 	call	20040e0 <__udivsi3>
 200fd58:	1009883a 	mov	r4,r2
 200fd5c:	e17fff17 	ldw	r5,-4(fp)
 200fd60:	20040f00 	call	20040f0 <__mulsi3>
 200fd64:	10bfffc4 	addi	r2,r2,-1
 200fd68:	103ffe1e 	bne	r2,zero,200fd64 <alt_busy_sleep+0x104>
 200fd6c:	00000d06 	br	200fda4 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200fd70:	e13ffc17 	ldw	r4,-16(fp)
 200fd74:	014003f4 	movhi	r5,15
 200fd78:	29509004 	addi	r5,r5,16960
 200fd7c:	20040f00 	call	20040f0 <__mulsi3>
 200fd80:	100b883a 	mov	r5,r2
 200fd84:	0100bef4 	movhi	r4,763
 200fd88:	213c2004 	addi	r4,r4,-3968
 200fd8c:	20040e00 	call	20040e0 <__udivsi3>
 200fd90:	1009883a 	mov	r4,r2
 200fd94:	e17fff17 	ldw	r5,-4(fp)
 200fd98:	20040f00 	call	20040f0 <__mulsi3>
 200fd9c:	10bfffc4 	addi	r2,r2,-1
 200fda0:	00bffe16 	blt	zero,r2,200fd9c <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200fda4:	0005883a 	mov	r2,zero
}
 200fda8:	e037883a 	mov	sp,fp
 200fdac:	dfc00117 	ldw	ra,4(sp)
 200fdb0:	df000017 	ldw	fp,0(sp)
 200fdb4:	dec00204 	addi	sp,sp,8
 200fdb8:	f800283a 	ret

0200fdbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200fdbc:	deffff04 	addi	sp,sp,-4
 200fdc0:	df000015 	stw	fp,0(sp)
 200fdc4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200fdc8:	e037883a 	mov	sp,fp
 200fdcc:	df000017 	ldw	fp,0(sp)
 200fdd0:	dec00104 	addi	sp,sp,4
 200fdd4:	f800283a 	ret

0200fdd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200fdd8:	defff904 	addi	sp,sp,-28
 200fddc:	dfc00615 	stw	ra,24(sp)
 200fde0:	df000515 	stw	fp,20(sp)
 200fde4:	df000504 	addi	fp,sp,20
 200fde8:	e13ffd15 	stw	r4,-12(fp)
 200fdec:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200fdf0:	e0bffd17 	ldw	r2,-12(fp)
 200fdf4:	1005003a 	cmpeq	r2,r2,zero
 200fdf8:	1000041e 	bne	r2,zero,200fe0c <alt_dev_llist_insert+0x34>
 200fdfc:	e0bffd17 	ldw	r2,-12(fp)
 200fe00:	10800217 	ldw	r2,8(r2)
 200fe04:	1004c03a 	cmpne	r2,r2,zero
 200fe08:	1000071e 	bne	r2,zero,200fe28 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 200fe0c:	200fe8c0 	call	200fe8c <alt_get_errno>
 200fe10:	1007883a 	mov	r3,r2
 200fe14:	00800584 	movi	r2,22
 200fe18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200fe1c:	00bffa84 	movi	r2,-22
 200fe20:	e0bfff15 	stw	r2,-4(fp)
 200fe24:	00001306 	br	200fe74 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200fe28:	e0fffd17 	ldw	r3,-12(fp)
 200fe2c:	e0bffe17 	ldw	r2,-8(fp)
 200fe30:	e0bffb15 	stw	r2,-20(fp)
 200fe34:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200fe38:	e0fffc17 	ldw	r3,-16(fp)
 200fe3c:	e0bffb17 	ldw	r2,-20(fp)
 200fe40:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200fe44:	e0bffb17 	ldw	r2,-20(fp)
 200fe48:	10c00017 	ldw	r3,0(r2)
 200fe4c:	e0bffc17 	ldw	r2,-16(fp)
 200fe50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200fe54:	e0bffb17 	ldw	r2,-20(fp)
 200fe58:	10c00017 	ldw	r3,0(r2)
 200fe5c:	e0bffc17 	ldw	r2,-16(fp)
 200fe60:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200fe64:	e0fffb17 	ldw	r3,-20(fp)
 200fe68:	e0bffc17 	ldw	r2,-16(fp)
 200fe6c:	18800015 	stw	r2,0(r3)

  return 0;  
 200fe70:	e03fff15 	stw	zero,-4(fp)
 200fe74:	e0bfff17 	ldw	r2,-4(fp)
}
 200fe78:	e037883a 	mov	sp,fp
 200fe7c:	dfc00117 	ldw	ra,4(sp)
 200fe80:	df000017 	ldw	fp,0(sp)
 200fe84:	dec00204 	addi	sp,sp,8
 200fe88:	f800283a 	ret

0200fe8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200fe8c:	defffd04 	addi	sp,sp,-12
 200fe90:	dfc00215 	stw	ra,8(sp)
 200fe94:	df000115 	stw	fp,4(sp)
 200fe98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200fe9c:	00808074 	movhi	r2,513
 200fea0:	108d7204 	addi	r2,r2,13768
 200fea4:	10800017 	ldw	r2,0(r2)
 200fea8:	1005003a 	cmpeq	r2,r2,zero
 200feac:	1000061e 	bne	r2,zero,200fec8 <alt_get_errno+0x3c>
 200feb0:	00808074 	movhi	r2,513
 200feb4:	108d7204 	addi	r2,r2,13768
 200feb8:	10800017 	ldw	r2,0(r2)
 200febc:	103ee83a 	callr	r2
 200fec0:	e0bfff15 	stw	r2,-4(fp)
 200fec4:	00000306 	br	200fed4 <alt_get_errno+0x48>
 200fec8:	00808074 	movhi	r2,513
 200fecc:	1094ed04 	addi	r2,r2,21428
 200fed0:	e0bfff15 	stw	r2,-4(fp)
 200fed4:	e0bfff17 	ldw	r2,-4(fp)
}
 200fed8:	e037883a 	mov	sp,fp
 200fedc:	dfc00117 	ldw	ra,4(sp)
 200fee0:	df000017 	ldw	fp,0(sp)
 200fee4:	dec00204 	addi	sp,sp,8
 200fee8:	f800283a 	ret

0200feec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200feec:	defffd04 	addi	sp,sp,-12
 200fef0:	dfc00215 	stw	ra,8(sp)
 200fef4:	df000115 	stw	fp,4(sp)
 200fef8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200fefc:	00bfff04 	movi	r2,-4
 200ff00:	00c08074 	movhi	r3,513
 200ff04:	18c40d04 	addi	r3,r3,4148
 200ff08:	1885883a 	add	r2,r3,r2
 200ff0c:	e0bfff15 	stw	r2,-4(fp)
 200ff10:	00000606 	br	200ff2c <_do_ctors+0x40>
        (*ctor) (); 
 200ff14:	e0bfff17 	ldw	r2,-4(fp)
 200ff18:	10800017 	ldw	r2,0(r2)
 200ff1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200ff20:	e0bfff17 	ldw	r2,-4(fp)
 200ff24:	10bfff04 	addi	r2,r2,-4
 200ff28:	e0bfff15 	stw	r2,-4(fp)
 200ff2c:	e0ffff17 	ldw	r3,-4(fp)
 200ff30:	00808074 	movhi	r2,513
 200ff34:	10840c04 	addi	r2,r2,4144
 200ff38:	18bff62e 	bgeu	r3,r2,200ff14 <_do_ctors+0x28>
        (*ctor) (); 
}
 200ff3c:	e037883a 	mov	sp,fp
 200ff40:	dfc00117 	ldw	ra,4(sp)
 200ff44:	df000017 	ldw	fp,0(sp)
 200ff48:	dec00204 	addi	sp,sp,8
 200ff4c:	f800283a 	ret

0200ff50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200ff50:	defffd04 	addi	sp,sp,-12
 200ff54:	dfc00215 	stw	ra,8(sp)
 200ff58:	df000115 	stw	fp,4(sp)
 200ff5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200ff60:	00bfff04 	movi	r2,-4
 200ff64:	00c08074 	movhi	r3,513
 200ff68:	18c40d04 	addi	r3,r3,4148
 200ff6c:	1885883a 	add	r2,r3,r2
 200ff70:	e0bfff15 	stw	r2,-4(fp)
 200ff74:	00000606 	br	200ff90 <_do_dtors+0x40>
        (*dtor) (); 
 200ff78:	e0bfff17 	ldw	r2,-4(fp)
 200ff7c:	10800017 	ldw	r2,0(r2)
 200ff80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200ff84:	e0bfff17 	ldw	r2,-4(fp)
 200ff88:	10bfff04 	addi	r2,r2,-4
 200ff8c:	e0bfff15 	stw	r2,-4(fp)
 200ff90:	e0ffff17 	ldw	r3,-4(fp)
 200ff94:	00808074 	movhi	r2,513
 200ff98:	10840d04 	addi	r2,r2,4148
 200ff9c:	18bff62e 	bgeu	r3,r2,200ff78 <_do_dtors+0x28>
        (*dtor) (); 
}
 200ffa0:	e037883a 	mov	sp,fp
 200ffa4:	dfc00117 	ldw	ra,4(sp)
 200ffa8:	df000017 	ldw	fp,0(sp)
 200ffac:	dec00204 	addi	sp,sp,8
 200ffb0:	f800283a 	ret

0200ffb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200ffb4:	defffe04 	addi	sp,sp,-8
 200ffb8:	dfc00115 	stw	ra,4(sp)
 200ffbc:	df000015 	stw	fp,0(sp)
 200ffc0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 200ffc4:	0009883a 	mov	r4,zero
 200ffc8:	01440004 	movi	r5,4096
 200ffcc:	2010b2c0 	call	2010b2c <alt_icache_flush>
#endif
}
 200ffd0:	e037883a 	mov	sp,fp
 200ffd4:	dfc00117 	ldw	ra,4(sp)
 200ffd8:	df000017 	ldw	fp,0(sp)
 200ffdc:	dec00204 	addi	sp,sp,8
 200ffe0:	f800283a 	ret

0200ffe4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ffe4:	defff904 	addi	sp,sp,-28
 200ffe8:	dfc00615 	stw	ra,24(sp)
 200ffec:	df000515 	stw	fp,20(sp)
 200fff0:	df000504 	addi	fp,sp,20
 200fff4:	e13ffc15 	stw	r4,-16(fp)
 200fff8:	e17ffd15 	stw	r5,-12(fp)
 200fffc:	e1bffe15 	stw	r6,-8(fp)
 2010000:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2010004:	e0800217 	ldw	r2,8(fp)
 2010008:	d8800015 	stw	r2,0(sp)
 201000c:	e13ffc17 	ldw	r4,-16(fp)
 2010010:	e17ffd17 	ldw	r5,-12(fp)
 2010014:	e1bffe17 	ldw	r6,-8(fp)
 2010018:	e1ffff17 	ldw	r7,-4(fp)
 201001c:	20101b80 	call	20101b8 <alt_iic_isr_register>
}  
 2010020:	e037883a 	mov	sp,fp
 2010024:	dfc00117 	ldw	ra,4(sp)
 2010028:	df000017 	ldw	fp,0(sp)
 201002c:	dec00204 	addi	sp,sp,8
 2010030:	f800283a 	ret

02010034 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2010034:	defff904 	addi	sp,sp,-28
 2010038:	df000615 	stw	fp,24(sp)
 201003c:	df000604 	addi	fp,sp,24
 2010040:	e13ffe15 	stw	r4,-8(fp)
 2010044:	e17fff15 	stw	r5,-4(fp)
 2010048:	e0bfff17 	ldw	r2,-4(fp)
 201004c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010050:	0005303a 	rdctl	r2,status
 2010054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010058:	e0fffb17 	ldw	r3,-20(fp)
 201005c:	00bfff84 	movi	r2,-2
 2010060:	1884703a 	and	r2,r3,r2
 2010064:	1001703a 	wrctl	status,r2
  
  return context;
 2010068:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201006c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2010070:	e0fffc17 	ldw	r3,-16(fp)
 2010074:	00800044 	movi	r2,1
 2010078:	10c4983a 	sll	r2,r2,r3
 201007c:	1007883a 	mov	r3,r2
 2010080:	00808074 	movhi	r2,513
 2010084:	1094ee04 	addi	r2,r2,21432
 2010088:	10800017 	ldw	r2,0(r2)
 201008c:	1886b03a 	or	r3,r3,r2
 2010090:	00808074 	movhi	r2,513
 2010094:	1094ee04 	addi	r2,r2,21432
 2010098:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201009c:	00808074 	movhi	r2,513
 20100a0:	1094ee04 	addi	r2,r2,21432
 20100a4:	10800017 	ldw	r2,0(r2)
 20100a8:	100170fa 	wrctl	ienable,r2
 20100ac:	e0bffd17 	ldw	r2,-12(fp)
 20100b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20100b4:	e0bffa17 	ldw	r2,-24(fp)
 20100b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20100bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20100c0:	e037883a 	mov	sp,fp
 20100c4:	df000017 	ldw	fp,0(sp)
 20100c8:	dec00104 	addi	sp,sp,4
 20100cc:	f800283a 	ret

020100d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20100d0:	defff904 	addi	sp,sp,-28
 20100d4:	df000615 	stw	fp,24(sp)
 20100d8:	df000604 	addi	fp,sp,24
 20100dc:	e13ffe15 	stw	r4,-8(fp)
 20100e0:	e17fff15 	stw	r5,-4(fp)
 20100e4:	e0bfff17 	ldw	r2,-4(fp)
 20100e8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20100ec:	0005303a 	rdctl	r2,status
 20100f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20100f4:	e0fffb17 	ldw	r3,-20(fp)
 20100f8:	00bfff84 	movi	r2,-2
 20100fc:	1884703a 	and	r2,r3,r2
 2010100:	1001703a 	wrctl	status,r2
  
  return context;
 2010104:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010108:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 201010c:	e0fffc17 	ldw	r3,-16(fp)
 2010110:	00800044 	movi	r2,1
 2010114:	10c4983a 	sll	r2,r2,r3
 2010118:	0084303a 	nor	r2,zero,r2
 201011c:	1007883a 	mov	r3,r2
 2010120:	00808074 	movhi	r2,513
 2010124:	1094ee04 	addi	r2,r2,21432
 2010128:	10800017 	ldw	r2,0(r2)
 201012c:	1886703a 	and	r3,r3,r2
 2010130:	00808074 	movhi	r2,513
 2010134:	1094ee04 	addi	r2,r2,21432
 2010138:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201013c:	00808074 	movhi	r2,513
 2010140:	1094ee04 	addi	r2,r2,21432
 2010144:	10800017 	ldw	r2,0(r2)
 2010148:	100170fa 	wrctl	ienable,r2
 201014c:	e0bffd17 	ldw	r2,-12(fp)
 2010150:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010154:	e0bffa17 	ldw	r2,-24(fp)
 2010158:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201015c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2010160:	e037883a 	mov	sp,fp
 2010164:	df000017 	ldw	fp,0(sp)
 2010168:	dec00104 	addi	sp,sp,4
 201016c:	f800283a 	ret

02010170 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2010170:	defffc04 	addi	sp,sp,-16
 2010174:	df000315 	stw	fp,12(sp)
 2010178:	df000304 	addi	fp,sp,12
 201017c:	e13ffe15 	stw	r4,-8(fp)
 2010180:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2010184:	000530fa 	rdctl	r2,ienable
 2010188:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 201018c:	e0ffff17 	ldw	r3,-4(fp)
 2010190:	00800044 	movi	r2,1
 2010194:	10c4983a 	sll	r2,r2,r3
 2010198:	1007883a 	mov	r3,r2
 201019c:	e0bffd17 	ldw	r2,-12(fp)
 20101a0:	1884703a 	and	r2,r3,r2
 20101a4:	1004c03a 	cmpne	r2,r2,zero
}
 20101a8:	e037883a 	mov	sp,fp
 20101ac:	df000017 	ldw	fp,0(sp)
 20101b0:	dec00104 	addi	sp,sp,4
 20101b4:	f800283a 	ret

020101b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20101b8:	defff404 	addi	sp,sp,-48
 20101bc:	dfc00b15 	stw	ra,44(sp)
 20101c0:	df000a15 	stw	fp,40(sp)
 20101c4:	df000a04 	addi	fp,sp,40
 20101c8:	e13ffb15 	stw	r4,-20(fp)
 20101cc:	e17ffc15 	stw	r5,-16(fp)
 20101d0:	e1bffd15 	stw	r6,-12(fp)
 20101d4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 20101d8:	00bffa84 	movi	r2,-22
 20101dc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20101e0:	e0bffc17 	ldw	r2,-16(fp)
 20101e4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20101e8:	e0bff917 	ldw	r2,-28(fp)
 20101ec:	10800808 	cmpgei	r2,r2,32
 20101f0:	1000291e 	bne	r2,zero,2010298 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20101f4:	0005303a 	rdctl	r2,status
 20101f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20101fc:	e0fff717 	ldw	r3,-36(fp)
 2010200:	00bfff84 	movi	r2,-2
 2010204:	1884703a 	and	r2,r3,r2
 2010208:	1001703a 	wrctl	status,r2
  
  return context;
 201020c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2010210:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2010214:	e0bff917 	ldw	r2,-28(fp)
 2010218:	00c080f4 	movhi	r3,515
 201021c:	18ff3a04 	addi	r3,r3,-792
 2010220:	100490fa 	slli	r2,r2,3
 2010224:	10c7883a 	add	r3,r2,r3
 2010228:	e0bffd17 	ldw	r2,-12(fp)
 201022c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2010230:	e0bff917 	ldw	r2,-28(fp)
 2010234:	00c080f4 	movhi	r3,515
 2010238:	18ff3a04 	addi	r3,r3,-792
 201023c:	100490fa 	slli	r2,r2,3
 2010240:	10c5883a 	add	r2,r2,r3
 2010244:	10c00104 	addi	r3,r2,4
 2010248:	e0bffe17 	ldw	r2,-8(fp)
 201024c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2010250:	e0bffd17 	ldw	r2,-12(fp)
 2010254:	1005003a 	cmpeq	r2,r2,zero
 2010258:	1000051e 	bne	r2,zero,2010270 <alt_iic_isr_register+0xb8>
 201025c:	e17ff917 	ldw	r5,-28(fp)
 2010260:	e13ffb17 	ldw	r4,-20(fp)
 2010264:	20100340 	call	2010034 <alt_ic_irq_enable>
 2010268:	e0bfff15 	stw	r2,-4(fp)
 201026c:	00000406 	br	2010280 <alt_iic_isr_register+0xc8>
 2010270:	e17ff917 	ldw	r5,-28(fp)
 2010274:	e13ffb17 	ldw	r4,-20(fp)
 2010278:	20100d00 	call	20100d0 <alt_ic_irq_disable>
 201027c:	e0bfff15 	stw	r2,-4(fp)
 2010280:	e0bfff17 	ldw	r2,-4(fp)
 2010284:	e0bffa15 	stw	r2,-24(fp)
 2010288:	e0bff817 	ldw	r2,-32(fp)
 201028c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010290:	e0bff617 	ldw	r2,-40(fp)
 2010294:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2010298:	e0bffa17 	ldw	r2,-24(fp)
}
 201029c:	e037883a 	mov	sp,fp
 20102a0:	dfc00117 	ldw	ra,4(sp)
 20102a4:	df000017 	ldw	fp,0(sp)
 20102a8:	dec00204 	addi	sp,sp,8
 20102ac:	f800283a 	ret

020102b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20102b0:	defff804 	addi	sp,sp,-32
 20102b4:	dfc00715 	stw	ra,28(sp)
 20102b8:	df000615 	stw	fp,24(sp)
 20102bc:	dc000515 	stw	r16,20(sp)
 20102c0:	df000504 	addi	fp,sp,20
 20102c4:	e13ffc15 	stw	r4,-16(fp)
 20102c8:	e17ffd15 	stw	r5,-12(fp)
 20102cc:	e1bffe15 	stw	r6,-8(fp)
 20102d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20102d4:	e13ffd17 	ldw	r4,-12(fp)
 20102d8:	e17ffe17 	ldw	r5,-8(fp)
 20102dc:	e1bfff17 	ldw	r6,-4(fp)
 20102e0:	20104f80 	call	20104f8 <open>
 20102e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20102e8:	e0bffb17 	ldw	r2,-20(fp)
 20102ec:	1004803a 	cmplt	r2,r2,zero
 20102f0:	10001f1e 	bne	r2,zero,2010370 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 20102f4:	e13ffb17 	ldw	r4,-20(fp)
 20102f8:	04008074 	movhi	r16,513
 20102fc:	84089904 	addi	r16,r16,8804
 2010300:	01400304 	movi	r5,12
 2010304:	20040f00 	call	20040f0 <__mulsi3>
 2010308:	1405883a 	add	r2,r2,r16
 201030c:	10c00017 	ldw	r3,0(r2)
 2010310:	e0bffc17 	ldw	r2,-16(fp)
 2010314:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2010318:	e13ffb17 	ldw	r4,-20(fp)
 201031c:	04008074 	movhi	r16,513
 2010320:	84089904 	addi	r16,r16,8804
 2010324:	01400304 	movi	r5,12
 2010328:	20040f00 	call	20040f0 <__mulsi3>
 201032c:	1405883a 	add	r2,r2,r16
 2010330:	10800104 	addi	r2,r2,4
 2010334:	10c00017 	ldw	r3,0(r2)
 2010338:	e0bffc17 	ldw	r2,-16(fp)
 201033c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2010340:	e13ffb17 	ldw	r4,-20(fp)
 2010344:	04008074 	movhi	r16,513
 2010348:	84089904 	addi	r16,r16,8804
 201034c:	01400304 	movi	r5,12
 2010350:	20040f00 	call	20040f0 <__mulsi3>
 2010354:	1405883a 	add	r2,r2,r16
 2010358:	10800204 	addi	r2,r2,8
 201035c:	10c00017 	ldw	r3,0(r2)
 2010360:	e0bffc17 	ldw	r2,-16(fp)
 2010364:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2010368:	e13ffb17 	ldw	r4,-20(fp)
 201036c:	200dbc40 	call	200dbc4 <alt_release_fd>
  }
} 
 2010370:	e037883a 	mov	sp,fp
 2010374:	dfc00217 	ldw	ra,8(sp)
 2010378:	df000117 	ldw	fp,4(sp)
 201037c:	dc000017 	ldw	r16,0(sp)
 2010380:	dec00304 	addi	sp,sp,12
 2010384:	f800283a 	ret

02010388 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2010388:	defffb04 	addi	sp,sp,-20
 201038c:	dfc00415 	stw	ra,16(sp)
 2010390:	df000315 	stw	fp,12(sp)
 2010394:	df000304 	addi	fp,sp,12
 2010398:	e13ffd15 	stw	r4,-12(fp)
 201039c:	e17ffe15 	stw	r5,-8(fp)
 20103a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20103a4:	01008074 	movhi	r4,513
 20103a8:	21089c04 	addi	r4,r4,8816
 20103ac:	e17ffd17 	ldw	r5,-12(fp)
 20103b0:	01800044 	movi	r6,1
 20103b4:	01c07fc4 	movi	r7,511
 20103b8:	20102b00 	call	20102b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20103bc:	01008074 	movhi	r4,513
 20103c0:	21089904 	addi	r4,r4,8804
 20103c4:	e17ffe17 	ldw	r5,-8(fp)
 20103c8:	000d883a 	mov	r6,zero
 20103cc:	01c07fc4 	movi	r7,511
 20103d0:	20102b00 	call	20102b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20103d4:	01008074 	movhi	r4,513
 20103d8:	21089f04 	addi	r4,r4,8828
 20103dc:	e17fff17 	ldw	r5,-4(fp)
 20103e0:	01800044 	movi	r6,1
 20103e4:	01c07fc4 	movi	r7,511
 20103e8:	20102b00 	call	20102b0 <alt_open_fd>
}  
 20103ec:	e037883a 	mov	sp,fp
 20103f0:	dfc00117 	ldw	ra,4(sp)
 20103f4:	df000017 	ldw	fp,0(sp)
 20103f8:	dec00204 	addi	sp,sp,8
 20103fc:	f800283a 	ret

02010400 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2010400:	defffa04 	addi	sp,sp,-24
 2010404:	dfc00515 	stw	ra,20(sp)
 2010408:	df000415 	stw	fp,16(sp)
 201040c:	dc000315 	stw	r16,12(sp)
 2010410:	df000304 	addi	fp,sp,12
 2010414:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2010418:	e0bffe17 	ldw	r2,-8(fp)
 201041c:	10800217 	ldw	r2,8(r2)
 2010420:	10d00034 	orhi	r3,r2,16384
 2010424:	e0bffe17 	ldw	r2,-8(fp)
 2010428:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201042c:	e03ffd15 	stw	zero,-12(fp)
 2010430:	00002306 	br	20104c0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2010434:	e13ffd17 	ldw	r4,-12(fp)
 2010438:	04008074 	movhi	r16,513
 201043c:	84089904 	addi	r16,r16,8804
 2010440:	01400304 	movi	r5,12
 2010444:	20040f00 	call	20040f0 <__mulsi3>
 2010448:	1405883a 	add	r2,r2,r16
 201044c:	10c00017 	ldw	r3,0(r2)
 2010450:	e0bffe17 	ldw	r2,-8(fp)
 2010454:	10800017 	ldw	r2,0(r2)
 2010458:	1880161e 	bne	r3,r2,20104b4 <alt_file_locked+0xb4>
 201045c:	e13ffd17 	ldw	r4,-12(fp)
 2010460:	04008074 	movhi	r16,513
 2010464:	84089904 	addi	r16,r16,8804
 2010468:	01400304 	movi	r5,12
 201046c:	20040f00 	call	20040f0 <__mulsi3>
 2010470:	1405883a 	add	r2,r2,r16
 2010474:	10800204 	addi	r2,r2,8
 2010478:	10800017 	ldw	r2,0(r2)
 201047c:	1004403a 	cmpge	r2,r2,zero
 2010480:	10000c1e 	bne	r2,zero,20104b4 <alt_file_locked+0xb4>
 2010484:	e13ffd17 	ldw	r4,-12(fp)
 2010488:	01400304 	movi	r5,12
 201048c:	20040f00 	call	20040f0 <__mulsi3>
 2010490:	1007883a 	mov	r3,r2
 2010494:	00808074 	movhi	r2,513
 2010498:	10889904 	addi	r2,r2,8804
 201049c:	1887883a 	add	r3,r3,r2
 20104a0:	e0bffe17 	ldw	r2,-8(fp)
 20104a4:	18800326 	beq	r3,r2,20104b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 20104a8:	00bffcc4 	movi	r2,-13
 20104ac:	e0bfff15 	stw	r2,-4(fp)
 20104b0:	00000a06 	br	20104dc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20104b4:	e0bffd17 	ldw	r2,-12(fp)
 20104b8:	10800044 	addi	r2,r2,1
 20104bc:	e0bffd15 	stw	r2,-12(fp)
 20104c0:	00808074 	movhi	r2,513
 20104c4:	108d7104 	addi	r2,r2,13764
 20104c8:	10800017 	ldw	r2,0(r2)
 20104cc:	1007883a 	mov	r3,r2
 20104d0:	e0bffd17 	ldw	r2,-12(fp)
 20104d4:	18bfd72e 	bgeu	r3,r2,2010434 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20104d8:	e03fff15 	stw	zero,-4(fp)
 20104dc:	e0bfff17 	ldw	r2,-4(fp)
}
 20104e0:	e037883a 	mov	sp,fp
 20104e4:	dfc00217 	ldw	ra,8(sp)
 20104e8:	df000117 	ldw	fp,4(sp)
 20104ec:	dc000017 	ldw	r16,0(sp)
 20104f0:	dec00304 	addi	sp,sp,12
 20104f4:	f800283a 	ret

020104f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20104f8:	defff404 	addi	sp,sp,-48
 20104fc:	dfc00b15 	stw	ra,44(sp)
 2010500:	df000a15 	stw	fp,40(sp)
 2010504:	df000a04 	addi	fp,sp,40
 2010508:	e13ffb15 	stw	r4,-20(fp)
 201050c:	e17ffc15 	stw	r5,-16(fp)
 2010510:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2010514:	00bfffc4 	movi	r2,-1
 2010518:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 201051c:	00bffb44 	movi	r2,-19
 2010520:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2010524:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2010528:	e13ffb17 	ldw	r4,-20(fp)
 201052c:	01408074 	movhi	r5,513
 2010530:	294d6f04 	addi	r5,r5,13756
 2010534:	20108a80 	call	20108a8 <alt_find_dev>
 2010538:	e0bffa15 	stw	r2,-24(fp)
 201053c:	e0bffa17 	ldw	r2,-24(fp)
 2010540:	1004c03a 	cmpne	r2,r2,zero
 2010544:	1000051e 	bne	r2,zero,201055c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2010548:	e13ffb17 	ldw	r4,-20(fp)
 201054c:	201093c0 	call	201093c <alt_find_file>
 2010550:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2010554:	00800044 	movi	r2,1
 2010558:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201055c:	e0bffa17 	ldw	r2,-24(fp)
 2010560:	1005003a 	cmpeq	r2,r2,zero
 2010564:	1000311e 	bne	r2,zero,201062c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2010568:	e13ffa17 	ldw	r4,-24(fp)
 201056c:	2010a5c0 	call	2010a5c <alt_get_fd>
 2010570:	e0bff815 	stw	r2,-32(fp)
 2010574:	e0bff817 	ldw	r2,-32(fp)
 2010578:	1004403a 	cmpge	r2,r2,zero
 201057c:	1000031e 	bne	r2,zero,201058c <open+0x94>
    {
      status = index;
 2010580:	e0bff817 	ldw	r2,-32(fp)
 2010584:	e0bff715 	stw	r2,-36(fp)
 2010588:	00002a06 	br	2010634 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 201058c:	e13ff817 	ldw	r4,-32(fp)
 2010590:	01400304 	movi	r5,12
 2010594:	20040f00 	call	20040f0 <__mulsi3>
 2010598:	1007883a 	mov	r3,r2
 201059c:	00808074 	movhi	r2,513
 20105a0:	10889904 	addi	r2,r2,8804
 20105a4:	1885883a 	add	r2,r3,r2
 20105a8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 20105ac:	e0fffc17 	ldw	r3,-16(fp)
 20105b0:	00900034 	movhi	r2,16384
 20105b4:	10bfffc4 	addi	r2,r2,-1
 20105b8:	1886703a 	and	r3,r3,r2
 20105bc:	e0bff917 	ldw	r2,-28(fp)
 20105c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 20105c4:	e0bff617 	ldw	r2,-40(fp)
 20105c8:	1004c03a 	cmpne	r2,r2,zero
 20105cc:	1000061e 	bne	r2,zero,20105e8 <open+0xf0>
 20105d0:	e13ff917 	ldw	r4,-28(fp)
 20105d4:	20104000 	call	2010400 <alt_file_locked>
 20105d8:	e0bff715 	stw	r2,-36(fp)
 20105dc:	e0bff717 	ldw	r2,-36(fp)
 20105e0:	1004803a 	cmplt	r2,r2,zero
 20105e4:	1000131e 	bne	r2,zero,2010634 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20105e8:	e0bffa17 	ldw	r2,-24(fp)
 20105ec:	10800317 	ldw	r2,12(r2)
 20105f0:	1005003a 	cmpeq	r2,r2,zero
 20105f4:	1000091e 	bne	r2,zero,201061c <open+0x124>
 20105f8:	e0bffa17 	ldw	r2,-24(fp)
 20105fc:	10800317 	ldw	r2,12(r2)
 2010600:	e13ff917 	ldw	r4,-28(fp)
 2010604:	e17ffb17 	ldw	r5,-20(fp)
 2010608:	e1bffc17 	ldw	r6,-16(fp)
 201060c:	e1fffd17 	ldw	r7,-12(fp)
 2010610:	103ee83a 	callr	r2
 2010614:	e0bfff15 	stw	r2,-4(fp)
 2010618:	00000106 	br	2010620 <open+0x128>
 201061c:	e03fff15 	stw	zero,-4(fp)
 2010620:	e0bfff17 	ldw	r2,-4(fp)
 2010624:	e0bff715 	stw	r2,-36(fp)
 2010628:	00000206 	br	2010634 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201062c:	00bffb44 	movi	r2,-19
 2010630:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2010634:	e0bff717 	ldw	r2,-36(fp)
 2010638:	1004403a 	cmpge	r2,r2,zero
 201063c:	1000091e 	bne	r2,zero,2010664 <open+0x16c>
  {
    alt_release_fd (index);  
 2010640:	e13ff817 	ldw	r4,-32(fp)
 2010644:	200dbc40 	call	200dbc4 <alt_release_fd>
    ALT_ERRNO = -status;
 2010648:	20106840 	call	2010684 <alt_get_errno>
 201064c:	e0fff717 	ldw	r3,-36(fp)
 2010650:	00c7c83a 	sub	r3,zero,r3
 2010654:	10c00015 	stw	r3,0(r2)
    return -1;
 2010658:	00bfffc4 	movi	r2,-1
 201065c:	e0bffe15 	stw	r2,-8(fp)
 2010660:	00000206 	br	201066c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2010664:	e0bff817 	ldw	r2,-32(fp)
 2010668:	e0bffe15 	stw	r2,-8(fp)
 201066c:	e0bffe17 	ldw	r2,-8(fp)
}
 2010670:	e037883a 	mov	sp,fp
 2010674:	dfc00117 	ldw	ra,4(sp)
 2010678:	df000017 	ldw	fp,0(sp)
 201067c:	dec00204 	addi	sp,sp,8
 2010680:	f800283a 	ret

02010684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010684:	defffd04 	addi	sp,sp,-12
 2010688:	dfc00215 	stw	ra,8(sp)
 201068c:	df000115 	stw	fp,4(sp)
 2010690:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2010694:	00808074 	movhi	r2,513
 2010698:	108d7204 	addi	r2,r2,13768
 201069c:	10800017 	ldw	r2,0(r2)
 20106a0:	1005003a 	cmpeq	r2,r2,zero
 20106a4:	1000061e 	bne	r2,zero,20106c0 <alt_get_errno+0x3c>
 20106a8:	00808074 	movhi	r2,513
 20106ac:	108d7204 	addi	r2,r2,13768
 20106b0:	10800017 	ldw	r2,0(r2)
 20106b4:	103ee83a 	callr	r2
 20106b8:	e0bfff15 	stw	r2,-4(fp)
 20106bc:	00000306 	br	20106cc <alt_get_errno+0x48>
 20106c0:	00808074 	movhi	r2,513
 20106c4:	1094ed04 	addi	r2,r2,21428
 20106c8:	e0bfff15 	stw	r2,-4(fp)
 20106cc:	e0bfff17 	ldw	r2,-4(fp)
}
 20106d0:	e037883a 	mov	sp,fp
 20106d4:	dfc00117 	ldw	ra,4(sp)
 20106d8:	df000017 	ldw	fp,0(sp)
 20106dc:	dec00204 	addi	sp,sp,8
 20106e0:	f800283a 	ret

020106e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20106e4:	defffa04 	addi	sp,sp,-24
 20106e8:	df000515 	stw	fp,20(sp)
 20106ec:	df000504 	addi	fp,sp,20
 20106f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20106f4:	0005303a 	rdctl	r2,status
 20106f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20106fc:	e0fffd17 	ldw	r3,-12(fp)
 2010700:	00bfff84 	movi	r2,-2
 2010704:	1884703a 	and	r2,r3,r2
 2010708:	1001703a 	wrctl	status,r2
  
  return context;
 201070c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2010710:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2010714:	e0bfff17 	ldw	r2,-4(fp)
 2010718:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201071c:	e0bffc17 	ldw	r2,-16(fp)
 2010720:	10c00017 	ldw	r3,0(r2)
 2010724:	e0bffc17 	ldw	r2,-16(fp)
 2010728:	10800117 	ldw	r2,4(r2)
 201072c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2010730:	e0bffc17 	ldw	r2,-16(fp)
 2010734:	10c00117 	ldw	r3,4(r2)
 2010738:	e0bffc17 	ldw	r2,-16(fp)
 201073c:	10800017 	ldw	r2,0(r2)
 2010740:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2010744:	e0fffc17 	ldw	r3,-16(fp)
 2010748:	e0bffc17 	ldw	r2,-16(fp)
 201074c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2010750:	e0fffc17 	ldw	r3,-16(fp)
 2010754:	e0bffc17 	ldw	r2,-16(fp)
 2010758:	18800015 	stw	r2,0(r3)
 201075c:	e0bffe17 	ldw	r2,-8(fp)
 2010760:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010764:	e0bffb17 	ldw	r2,-20(fp)
 2010768:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201076c:	e037883a 	mov	sp,fp
 2010770:	df000017 	ldw	fp,0(sp)
 2010774:	dec00104 	addi	sp,sp,4
 2010778:	f800283a 	ret

0201077c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201077c:	defffb04 	addi	sp,sp,-20
 2010780:	dfc00415 	stw	ra,16(sp)
 2010784:	df000315 	stw	fp,12(sp)
 2010788:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201078c:	d0a01d17 	ldw	r2,-32652(gp)
 2010790:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2010794:	d0a79a17 	ldw	r2,-24984(gp)
 2010798:	10800044 	addi	r2,r2,1
 201079c:	d0a79a15 	stw	r2,-24984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20107a0:	00003106 	br	2010868 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 20107a4:	e0bffe17 	ldw	r2,-8(fp)
 20107a8:	10800017 	ldw	r2,0(r2)
 20107ac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 20107b0:	e0bffe17 	ldw	r2,-8(fp)
 20107b4:	10800403 	ldbu	r2,16(r2)
 20107b8:	10803fcc 	andi	r2,r2,255
 20107bc:	1005003a 	cmpeq	r2,r2,zero
 20107c0:	1000051e 	bne	r2,zero,20107d8 <alt_tick+0x5c>
 20107c4:	d0a79a17 	ldw	r2,-24984(gp)
 20107c8:	1004c03a 	cmpne	r2,r2,zero
 20107cc:	1000021e 	bne	r2,zero,20107d8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 20107d0:	e0bffe17 	ldw	r2,-8(fp)
 20107d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20107d8:	e0bffe17 	ldw	r2,-8(fp)
 20107dc:	10c00217 	ldw	r3,8(r2)
 20107e0:	d0a79a17 	ldw	r2,-24984(gp)
 20107e4:	10c01e36 	bltu	r2,r3,2010860 <alt_tick+0xe4>
 20107e8:	e0bffe17 	ldw	r2,-8(fp)
 20107ec:	10800403 	ldbu	r2,16(r2)
 20107f0:	10803fcc 	andi	r2,r2,255
 20107f4:	1004c03a 	cmpne	r2,r2,zero
 20107f8:	1000191e 	bne	r2,zero,2010860 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 20107fc:	e0bffe17 	ldw	r2,-8(fp)
 2010800:	10c00317 	ldw	r3,12(r2)
 2010804:	e0bffe17 	ldw	r2,-8(fp)
 2010808:	11000517 	ldw	r4,20(r2)
 201080c:	183ee83a 	callr	r3
 2010810:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2010814:	e0bffd17 	ldw	r2,-12(fp)
 2010818:	1004c03a 	cmpne	r2,r2,zero
 201081c:	1000031e 	bne	r2,zero,201082c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2010820:	e13ffe17 	ldw	r4,-8(fp)
 2010824:	20106e40 	call	20106e4 <alt_alarm_stop>
 2010828:	00000d06 	br	2010860 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 201082c:	e0bffe17 	ldw	r2,-8(fp)
 2010830:	10c00217 	ldw	r3,8(r2)
 2010834:	e0bffd17 	ldw	r2,-12(fp)
 2010838:	1887883a 	add	r3,r3,r2
 201083c:	e0bffe17 	ldw	r2,-8(fp)
 2010840:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2010844:	e0bffe17 	ldw	r2,-8(fp)
 2010848:	10c00217 	ldw	r3,8(r2)
 201084c:	d0a79a17 	ldw	r2,-24984(gp)
 2010850:	1880032e 	bgeu	r3,r2,2010860 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2010854:	e0fffe17 	ldw	r3,-8(fp)
 2010858:	00800044 	movi	r2,1
 201085c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2010860:	e0bfff17 	ldw	r2,-4(fp)
 2010864:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2010868:	d0e01d04 	addi	r3,gp,-32652
 201086c:	e0bffe17 	ldw	r2,-8(fp)
 2010870:	10ffcc1e 	bne	r2,r3,20107a4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2010874:	e037883a 	mov	sp,fp
 2010878:	dfc00117 	ldw	ra,4(sp)
 201087c:	df000017 	ldw	fp,0(sp)
 2010880:	dec00204 	addi	sp,sp,8
 2010884:	f800283a 	ret

02010888 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 2010888:	deffff04 	addi	sp,sp,-4
 201088c:	df000015 	stw	fp,0(sp)
 2010890:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2010894:	000170fa 	wrctl	ienable,zero
}
 2010898:	e037883a 	mov	sp,fp
 201089c:	df000017 	ldw	fp,0(sp)
 20108a0:	dec00104 	addi	sp,sp,4
 20108a4:	f800283a 	ret

020108a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20108a8:	defff904 	addi	sp,sp,-28
 20108ac:	dfc00615 	stw	ra,24(sp)
 20108b0:	df000515 	stw	fp,20(sp)
 20108b4:	df000504 	addi	fp,sp,20
 20108b8:	e13ffd15 	stw	r4,-12(fp)
 20108bc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20108c0:	e0bffe17 	ldw	r2,-8(fp)
 20108c4:	10800017 	ldw	r2,0(r2)
 20108c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20108cc:	e13ffd17 	ldw	r4,-12(fp)
 20108d0:	20049c80 	call	20049c8 <strlen>
 20108d4:	10800044 	addi	r2,r2,1
 20108d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20108dc:	00000d06 	br	2010914 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20108e0:	e0bffc17 	ldw	r2,-16(fp)
 20108e4:	11000217 	ldw	r4,8(r2)
 20108e8:	e1bffb17 	ldw	r6,-20(fp)
 20108ec:	e17ffd17 	ldw	r5,-12(fp)
 20108f0:	2010c080 	call	2010c08 <memcmp>
 20108f4:	1004c03a 	cmpne	r2,r2,zero
 20108f8:	1000031e 	bne	r2,zero,2010908 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20108fc:	e0bffc17 	ldw	r2,-16(fp)
 2010900:	e0bfff15 	stw	r2,-4(fp)
 2010904:	00000706 	br	2010924 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2010908:	e0bffc17 	ldw	r2,-16(fp)
 201090c:	10800017 	ldw	r2,0(r2)
 2010910:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2010914:	e0fffe17 	ldw	r3,-8(fp)
 2010918:	e0bffc17 	ldw	r2,-16(fp)
 201091c:	10fff01e 	bne	r2,r3,20108e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2010920:	e03fff15 	stw	zero,-4(fp)
 2010924:	e0bfff17 	ldw	r2,-4(fp)
}
 2010928:	e037883a 	mov	sp,fp
 201092c:	dfc00117 	ldw	ra,4(sp)
 2010930:	df000017 	ldw	fp,0(sp)
 2010934:	dec00204 	addi	sp,sp,8
 2010938:	f800283a 	ret

0201093c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201093c:	defffa04 	addi	sp,sp,-24
 2010940:	dfc00515 	stw	ra,20(sp)
 2010944:	df000415 	stw	fp,16(sp)
 2010948:	df000404 	addi	fp,sp,16
 201094c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2010950:	00808074 	movhi	r2,513
 2010954:	108d6d04 	addi	r2,r2,13748
 2010958:	10800017 	ldw	r2,0(r2)
 201095c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2010960:	00003306 	br	2010a30 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2010964:	e0bffd17 	ldw	r2,-12(fp)
 2010968:	11000217 	ldw	r4,8(r2)
 201096c:	20049c80 	call	20049c8 <strlen>
 2010970:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2010974:	e0bffd17 	ldw	r2,-12(fp)
 2010978:	10c00217 	ldw	r3,8(r2)
 201097c:	e0bffc17 	ldw	r2,-16(fp)
 2010980:	1885883a 	add	r2,r3,r2
 2010984:	10bfffc4 	addi	r2,r2,-1
 2010988:	10800003 	ldbu	r2,0(r2)
 201098c:	10803fcc 	andi	r2,r2,255
 2010990:	1080201c 	xori	r2,r2,128
 2010994:	10bfe004 	addi	r2,r2,-128
 2010998:	10800bd8 	cmpnei	r2,r2,47
 201099c:	1000031e 	bne	r2,zero,20109ac <alt_find_file+0x70>
    {
      len -= 1;
 20109a0:	e0bffc17 	ldw	r2,-16(fp)
 20109a4:	10bfffc4 	addi	r2,r2,-1
 20109a8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20109ac:	e0bffc17 	ldw	r2,-16(fp)
 20109b0:	1007883a 	mov	r3,r2
 20109b4:	e0bffe17 	ldw	r2,-8(fp)
 20109b8:	1885883a 	add	r2,r3,r2
 20109bc:	10800003 	ldbu	r2,0(r2)
 20109c0:	10803fcc 	andi	r2,r2,255
 20109c4:	1080201c 	xori	r2,r2,128
 20109c8:	10bfe004 	addi	r2,r2,-128
 20109cc:	10800be0 	cmpeqi	r2,r2,47
 20109d0:	10000a1e 	bne	r2,zero,20109fc <alt_find_file+0xc0>
 20109d4:	e0bffc17 	ldw	r2,-16(fp)
 20109d8:	1007883a 	mov	r3,r2
 20109dc:	e0bffe17 	ldw	r2,-8(fp)
 20109e0:	1885883a 	add	r2,r3,r2
 20109e4:	10800003 	ldbu	r2,0(r2)
 20109e8:	10803fcc 	andi	r2,r2,255
 20109ec:	1080201c 	xori	r2,r2,128
 20109f0:	10bfe004 	addi	r2,r2,-128
 20109f4:	1004c03a 	cmpne	r2,r2,zero
 20109f8:	10000a1e 	bne	r2,zero,2010a24 <alt_find_file+0xe8>
 20109fc:	e0bffd17 	ldw	r2,-12(fp)
 2010a00:	11000217 	ldw	r4,8(r2)
 2010a04:	e1bffc17 	ldw	r6,-16(fp)
 2010a08:	e17ffe17 	ldw	r5,-8(fp)
 2010a0c:	2010c080 	call	2010c08 <memcmp>
 2010a10:	1004c03a 	cmpne	r2,r2,zero
 2010a14:	1000031e 	bne	r2,zero,2010a24 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2010a18:	e0bffd17 	ldw	r2,-12(fp)
 2010a1c:	e0bfff15 	stw	r2,-4(fp)
 2010a20:	00000806 	br	2010a44 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2010a24:	e0bffd17 	ldw	r2,-12(fp)
 2010a28:	10800017 	ldw	r2,0(r2)
 2010a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2010a30:	00c08074 	movhi	r3,513
 2010a34:	18cd6d04 	addi	r3,r3,13748
 2010a38:	e0bffd17 	ldw	r2,-12(fp)
 2010a3c:	10ffc91e 	bne	r2,r3,2010964 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2010a40:	e03fff15 	stw	zero,-4(fp)
 2010a44:	e0bfff17 	ldw	r2,-4(fp)
}
 2010a48:	e037883a 	mov	sp,fp
 2010a4c:	dfc00117 	ldw	ra,4(sp)
 2010a50:	df000017 	ldw	fp,0(sp)
 2010a54:	dec00204 	addi	sp,sp,8
 2010a58:	f800283a 	ret

02010a5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2010a5c:	defffa04 	addi	sp,sp,-24
 2010a60:	dfc00515 	stw	ra,20(sp)
 2010a64:	df000415 	stw	fp,16(sp)
 2010a68:	dc000315 	stw	r16,12(sp)
 2010a6c:	df000304 	addi	fp,sp,12
 2010a70:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2010a74:	00bffa04 	movi	r2,-24
 2010a78:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010a7c:	e03ffe15 	stw	zero,-8(fp)
 2010a80:	00002006 	br	2010b04 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 2010a84:	e13ffe17 	ldw	r4,-8(fp)
 2010a88:	04008074 	movhi	r16,513
 2010a8c:	84089904 	addi	r16,r16,8804
 2010a90:	01400304 	movi	r5,12
 2010a94:	20040f00 	call	20040f0 <__mulsi3>
 2010a98:	1405883a 	add	r2,r2,r16
 2010a9c:	10800017 	ldw	r2,0(r2)
 2010aa0:	1004c03a 	cmpne	r2,r2,zero
 2010aa4:	1000141e 	bne	r2,zero,2010af8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 2010aa8:	e13ffe17 	ldw	r4,-8(fp)
 2010aac:	04008074 	movhi	r16,513
 2010ab0:	84089904 	addi	r16,r16,8804
 2010ab4:	01400304 	movi	r5,12
 2010ab8:	20040f00 	call	20040f0 <__mulsi3>
 2010abc:	1407883a 	add	r3,r2,r16
 2010ac0:	e0bfff17 	ldw	r2,-4(fp)
 2010ac4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2010ac8:	00808074 	movhi	r2,513
 2010acc:	108d7104 	addi	r2,r2,13764
 2010ad0:	10c00017 	ldw	r3,0(r2)
 2010ad4:	e0bffe17 	ldw	r2,-8(fp)
 2010ad8:	1880040e 	bge	r3,r2,2010aec <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2010adc:	00c08074 	movhi	r3,513
 2010ae0:	18cd7104 	addi	r3,r3,13764
 2010ae4:	e0bffe17 	ldw	r2,-8(fp)
 2010ae8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2010aec:	e0bffe17 	ldw	r2,-8(fp)
 2010af0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2010af4:	00000606 	br	2010b10 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010af8:	e0bffe17 	ldw	r2,-8(fp)
 2010afc:	10800044 	addi	r2,r2,1
 2010b00:	e0bffe15 	stw	r2,-8(fp)
 2010b04:	e0bffe17 	ldw	r2,-8(fp)
 2010b08:	10800810 	cmplti	r2,r2,32
 2010b0c:	103fdd1e 	bne	r2,zero,2010a84 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2010b10:	e0bffd17 	ldw	r2,-12(fp)
}
 2010b14:	e037883a 	mov	sp,fp
 2010b18:	dfc00217 	ldw	ra,8(sp)
 2010b1c:	df000117 	ldw	fp,4(sp)
 2010b20:	dc000017 	ldw	r16,0(sp)
 2010b24:	dec00304 	addi	sp,sp,12
 2010b28:	f800283a 	ret

02010b2c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2010b2c:	defffb04 	addi	sp,sp,-20
 2010b30:	df000415 	stw	fp,16(sp)
 2010b34:	df000404 	addi	fp,sp,16
 2010b38:	e13ffe15 	stw	r4,-8(fp)
 2010b3c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2010b40:	e0bfff17 	ldw	r2,-4(fp)
 2010b44:	10840070 	cmpltui	r2,r2,4097
 2010b48:	1000021e 	bne	r2,zero,2010b54 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2010b4c:	00840004 	movi	r2,4096
 2010b50:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2010b54:	e0fffe17 	ldw	r3,-8(fp)
 2010b58:	e0bfff17 	ldw	r2,-4(fp)
 2010b5c:	1885883a 	add	r2,r3,r2
 2010b60:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2010b64:	e0bffe17 	ldw	r2,-8(fp)
 2010b68:	e0bffd15 	stw	r2,-12(fp)
 2010b6c:	00000506 	br	2010b84 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2010b70:	e0bffd17 	ldw	r2,-12(fp)
 2010b74:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2010b78:	e0bffd17 	ldw	r2,-12(fp)
 2010b7c:	10800804 	addi	r2,r2,32
 2010b80:	e0bffd15 	stw	r2,-12(fp)
 2010b84:	e0fffd17 	ldw	r3,-12(fp)
 2010b88:	e0bffc17 	ldw	r2,-16(fp)
 2010b8c:	18bff836 	bltu	r3,r2,2010b70 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2010b90:	e0bffe17 	ldw	r2,-8(fp)
 2010b94:	108007cc 	andi	r2,r2,31
 2010b98:	1005003a 	cmpeq	r2,r2,zero
 2010b9c:	1000021e 	bne	r2,zero,2010ba8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2010ba0:	e0bffd17 	ldw	r2,-12(fp)
 2010ba4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2010ba8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2010bac:	e037883a 	mov	sp,fp
 2010bb0:	df000017 	ldw	fp,0(sp)
 2010bb4:	dec00104 	addi	sp,sp,4
 2010bb8:	f800283a 	ret

02010bbc <atexit>:
 2010bbc:	200b883a 	mov	r5,r4
 2010bc0:	000d883a 	mov	r6,zero
 2010bc4:	0009883a 	mov	r4,zero
 2010bc8:	000f883a 	mov	r7,zero
 2010bcc:	2010c7c1 	jmpi	2010c7c <__register_exitproc>

02010bd0 <exit>:
 2010bd0:	defffe04 	addi	sp,sp,-8
 2010bd4:	000b883a 	mov	r5,zero
 2010bd8:	dc000015 	stw	r16,0(sp)
 2010bdc:	dfc00115 	stw	ra,4(sp)
 2010be0:	2021883a 	mov	r16,r4
 2010be4:	2010db40 	call	2010db4 <__call_exitprocs>
 2010be8:	00808074 	movhi	r2,513
 2010bec:	108d6804 	addi	r2,r2,13728
 2010bf0:	11000017 	ldw	r4,0(r2)
 2010bf4:	20800f17 	ldw	r2,60(r4)
 2010bf8:	10000126 	beq	r2,zero,2010c00 <exit+0x30>
 2010bfc:	103ee83a 	callr	r2
 2010c00:	8009883a 	mov	r4,r16
 2010c04:	2010fa40 	call	2010fa4 <_exit>

02010c08 <memcmp>:
 2010c08:	00c000c4 	movi	r3,3
 2010c0c:	1980032e 	bgeu	r3,r6,2010c1c <memcmp+0x14>
 2010c10:	2144b03a 	or	r2,r4,r5
 2010c14:	10c4703a 	and	r2,r2,r3
 2010c18:	10000f26 	beq	r2,zero,2010c58 <memcmp+0x50>
 2010c1c:	31ffffc4 	addi	r7,r6,-1
 2010c20:	3000061e 	bne	r6,zero,2010c3c <memcmp+0x34>
 2010c24:	00000a06 	br	2010c50 <memcmp+0x48>
 2010c28:	39ffffc4 	addi	r7,r7,-1
 2010c2c:	00bfffc4 	movi	r2,-1
 2010c30:	21000044 	addi	r4,r4,1
 2010c34:	29400044 	addi	r5,r5,1
 2010c38:	38800526 	beq	r7,r2,2010c50 <memcmp+0x48>
 2010c3c:	20c00003 	ldbu	r3,0(r4)
 2010c40:	28800003 	ldbu	r2,0(r5)
 2010c44:	18bff826 	beq	r3,r2,2010c28 <memcmp+0x20>
 2010c48:	1885c83a 	sub	r2,r3,r2
 2010c4c:	f800283a 	ret
 2010c50:	0005883a 	mov	r2,zero
 2010c54:	f800283a 	ret
 2010c58:	180f883a 	mov	r7,r3
 2010c5c:	20c00017 	ldw	r3,0(r4)
 2010c60:	28800017 	ldw	r2,0(r5)
 2010c64:	18bfed1e 	bne	r3,r2,2010c1c <memcmp+0x14>
 2010c68:	31bfff04 	addi	r6,r6,-4
 2010c6c:	21000104 	addi	r4,r4,4
 2010c70:	29400104 	addi	r5,r5,4
 2010c74:	39bff936 	bltu	r7,r6,2010c5c <memcmp+0x54>
 2010c78:	003fe806 	br	2010c1c <memcmp+0x14>

02010c7c <__register_exitproc>:
 2010c7c:	defffa04 	addi	sp,sp,-24
 2010c80:	00808074 	movhi	r2,513
 2010c84:	108d6804 	addi	r2,r2,13728
 2010c88:	dc000015 	stw	r16,0(sp)
 2010c8c:	14000017 	ldw	r16,0(r2)
 2010c90:	dd000415 	stw	r20,16(sp)
 2010c94:	2829883a 	mov	r20,r5
 2010c98:	81405217 	ldw	r5,328(r16)
 2010c9c:	dcc00315 	stw	r19,12(sp)
 2010ca0:	dc800215 	stw	r18,8(sp)
 2010ca4:	dc400115 	stw	r17,4(sp)
 2010ca8:	dfc00515 	stw	ra,20(sp)
 2010cac:	2023883a 	mov	r17,r4
 2010cb0:	3027883a 	mov	r19,r6
 2010cb4:	3825883a 	mov	r18,r7
 2010cb8:	28002526 	beq	r5,zero,2010d50 <__register_exitproc+0xd4>
 2010cbc:	29000117 	ldw	r4,4(r5)
 2010cc0:	008007c4 	movi	r2,31
 2010cc4:	11002716 	blt	r2,r4,2010d64 <__register_exitproc+0xe8>
 2010cc8:	8800101e 	bne	r17,zero,2010d0c <__register_exitproc+0x90>
 2010ccc:	2105883a 	add	r2,r4,r4
 2010cd0:	1085883a 	add	r2,r2,r2
 2010cd4:	20c00044 	addi	r3,r4,1
 2010cd8:	1145883a 	add	r2,r2,r5
 2010cdc:	0009883a 	mov	r4,zero
 2010ce0:	15000215 	stw	r20,8(r2)
 2010ce4:	28c00115 	stw	r3,4(r5)
 2010ce8:	2005883a 	mov	r2,r4
 2010cec:	dfc00517 	ldw	ra,20(sp)
 2010cf0:	dd000417 	ldw	r20,16(sp)
 2010cf4:	dcc00317 	ldw	r19,12(sp)
 2010cf8:	dc800217 	ldw	r18,8(sp)
 2010cfc:	dc400117 	ldw	r17,4(sp)
 2010d00:	dc000017 	ldw	r16,0(sp)
 2010d04:	dec00604 	addi	sp,sp,24
 2010d08:	f800283a 	ret
 2010d0c:	29802204 	addi	r6,r5,136
 2010d10:	00800044 	movi	r2,1
 2010d14:	110e983a 	sll	r7,r2,r4
 2010d18:	30c04017 	ldw	r3,256(r6)
 2010d1c:	2105883a 	add	r2,r4,r4
 2010d20:	1085883a 	add	r2,r2,r2
 2010d24:	1185883a 	add	r2,r2,r6
 2010d28:	19c6b03a 	or	r3,r3,r7
 2010d2c:	14802015 	stw	r18,128(r2)
 2010d30:	14c00015 	stw	r19,0(r2)
 2010d34:	00800084 	movi	r2,2
 2010d38:	30c04015 	stw	r3,256(r6)
 2010d3c:	88bfe31e 	bne	r17,r2,2010ccc <__register_exitproc+0x50>
 2010d40:	30804117 	ldw	r2,260(r6)
 2010d44:	11c4b03a 	or	r2,r2,r7
 2010d48:	30804115 	stw	r2,260(r6)
 2010d4c:	003fdf06 	br	2010ccc <__register_exitproc+0x50>
 2010d50:	008080f4 	movhi	r2,515
 2010d54:	10bf7a04 	addi	r2,r2,-536
 2010d58:	100b883a 	mov	r5,r2
 2010d5c:	80805215 	stw	r2,328(r16)
 2010d60:	003fd606 	br	2010cbc <__register_exitproc+0x40>
 2010d64:	00800034 	movhi	r2,0
 2010d68:	10800004 	addi	r2,r2,0
 2010d6c:	1000021e 	bne	r2,zero,2010d78 <__register_exitproc+0xfc>
 2010d70:	013fffc4 	movi	r4,-1
 2010d74:	003fdc06 	br	2010ce8 <__register_exitproc+0x6c>
 2010d78:	01006404 	movi	r4,400
 2010d7c:	103ee83a 	callr	r2
 2010d80:	1007883a 	mov	r3,r2
 2010d84:	103ffa26 	beq	r2,zero,2010d70 <__register_exitproc+0xf4>
 2010d88:	80805217 	ldw	r2,328(r16)
 2010d8c:	180b883a 	mov	r5,r3
 2010d90:	18000115 	stw	zero,4(r3)
 2010d94:	18800015 	stw	r2,0(r3)
 2010d98:	80c05215 	stw	r3,328(r16)
 2010d9c:	18006215 	stw	zero,392(r3)
 2010da0:	18006315 	stw	zero,396(r3)
 2010da4:	0009883a 	mov	r4,zero
 2010da8:	883fc826 	beq	r17,zero,2010ccc <__register_exitproc+0x50>
 2010dac:	003fd706 	br	2010d0c <__register_exitproc+0x90>

02010db0 <register_fini>:
 2010db0:	f800283a 	ret

02010db4 <__call_exitprocs>:
 2010db4:	00808074 	movhi	r2,513
 2010db8:	108d6804 	addi	r2,r2,13728
 2010dbc:	10800017 	ldw	r2,0(r2)
 2010dc0:	defff304 	addi	sp,sp,-52
 2010dc4:	df000b15 	stw	fp,44(sp)
 2010dc8:	d8800115 	stw	r2,4(sp)
 2010dcc:	00800034 	movhi	r2,0
 2010dd0:	10800004 	addi	r2,r2,0
 2010dd4:	1005003a 	cmpeq	r2,r2,zero
 2010dd8:	d8800215 	stw	r2,8(sp)
 2010ddc:	d8800117 	ldw	r2,4(sp)
 2010de0:	dd400815 	stw	r21,32(sp)
 2010de4:	dd000715 	stw	r20,28(sp)
 2010de8:	10805204 	addi	r2,r2,328
 2010dec:	dfc00c15 	stw	ra,48(sp)
 2010df0:	ddc00a15 	stw	r23,40(sp)
 2010df4:	dd800915 	stw	r22,36(sp)
 2010df8:	dcc00615 	stw	r19,24(sp)
 2010dfc:	dc800515 	stw	r18,20(sp)
 2010e00:	dc400415 	stw	r17,16(sp)
 2010e04:	dc000315 	stw	r16,12(sp)
 2010e08:	282b883a 	mov	r21,r5
 2010e0c:	2039883a 	mov	fp,r4
 2010e10:	d8800015 	stw	r2,0(sp)
 2010e14:	2829003a 	cmpeq	r20,r5,zero
 2010e18:	d8800117 	ldw	r2,4(sp)
 2010e1c:	14405217 	ldw	r17,328(r2)
 2010e20:	88001026 	beq	r17,zero,2010e64 <__call_exitprocs+0xb0>
 2010e24:	ddc00017 	ldw	r23,0(sp)
 2010e28:	88800117 	ldw	r2,4(r17)
 2010e2c:	8c802204 	addi	r18,r17,136
 2010e30:	143fffc4 	addi	r16,r2,-1
 2010e34:	80000916 	blt	r16,zero,2010e5c <__call_exitprocs+0xa8>
 2010e38:	05bfffc4 	movi	r22,-1
 2010e3c:	a000151e 	bne	r20,zero,2010e94 <__call_exitprocs+0xe0>
 2010e40:	8409883a 	add	r4,r16,r16
 2010e44:	2105883a 	add	r2,r4,r4
 2010e48:	1485883a 	add	r2,r2,r18
 2010e4c:	10c02017 	ldw	r3,128(r2)
 2010e50:	a8c01126 	beq	r21,r3,2010e98 <__call_exitprocs+0xe4>
 2010e54:	843fffc4 	addi	r16,r16,-1
 2010e58:	85bff81e 	bne	r16,r22,2010e3c <__call_exitprocs+0x88>
 2010e5c:	d8800217 	ldw	r2,8(sp)
 2010e60:	10003126 	beq	r2,zero,2010f28 <__call_exitprocs+0x174>
 2010e64:	dfc00c17 	ldw	ra,48(sp)
 2010e68:	df000b17 	ldw	fp,44(sp)
 2010e6c:	ddc00a17 	ldw	r23,40(sp)
 2010e70:	dd800917 	ldw	r22,36(sp)
 2010e74:	dd400817 	ldw	r21,32(sp)
 2010e78:	dd000717 	ldw	r20,28(sp)
 2010e7c:	dcc00617 	ldw	r19,24(sp)
 2010e80:	dc800517 	ldw	r18,20(sp)
 2010e84:	dc400417 	ldw	r17,16(sp)
 2010e88:	dc000317 	ldw	r16,12(sp)
 2010e8c:	dec00d04 	addi	sp,sp,52
 2010e90:	f800283a 	ret
 2010e94:	8409883a 	add	r4,r16,r16
 2010e98:	88c00117 	ldw	r3,4(r17)
 2010e9c:	2105883a 	add	r2,r4,r4
 2010ea0:	1445883a 	add	r2,r2,r17
 2010ea4:	18ffffc4 	addi	r3,r3,-1
 2010ea8:	11800217 	ldw	r6,8(r2)
 2010eac:	1c001526 	beq	r3,r16,2010f04 <__call_exitprocs+0x150>
 2010eb0:	10000215 	stw	zero,8(r2)
 2010eb4:	303fe726 	beq	r6,zero,2010e54 <__call_exitprocs+0xa0>
 2010eb8:	00c00044 	movi	r3,1
 2010ebc:	1c06983a 	sll	r3,r3,r16
 2010ec0:	90804017 	ldw	r2,256(r18)
 2010ec4:	8cc00117 	ldw	r19,4(r17)
 2010ec8:	1884703a 	and	r2,r3,r2
 2010ecc:	10001426 	beq	r2,zero,2010f20 <__call_exitprocs+0x16c>
 2010ed0:	90804117 	ldw	r2,260(r18)
 2010ed4:	1884703a 	and	r2,r3,r2
 2010ed8:	10000c1e 	bne	r2,zero,2010f0c <__call_exitprocs+0x158>
 2010edc:	2105883a 	add	r2,r4,r4
 2010ee0:	1485883a 	add	r2,r2,r18
 2010ee4:	11400017 	ldw	r5,0(r2)
 2010ee8:	e009883a 	mov	r4,fp
 2010eec:	303ee83a 	callr	r6
 2010ef0:	88800117 	ldw	r2,4(r17)
 2010ef4:	98bfc81e 	bne	r19,r2,2010e18 <__call_exitprocs+0x64>
 2010ef8:	b8800017 	ldw	r2,0(r23)
 2010efc:	147fd526 	beq	r2,r17,2010e54 <__call_exitprocs+0xa0>
 2010f00:	003fc506 	br	2010e18 <__call_exitprocs+0x64>
 2010f04:	8c000115 	stw	r16,4(r17)
 2010f08:	003fea06 	br	2010eb4 <__call_exitprocs+0x100>
 2010f0c:	2105883a 	add	r2,r4,r4
 2010f10:	1485883a 	add	r2,r2,r18
 2010f14:	11000017 	ldw	r4,0(r2)
 2010f18:	303ee83a 	callr	r6
 2010f1c:	003ff406 	br	2010ef0 <__call_exitprocs+0x13c>
 2010f20:	303ee83a 	callr	r6
 2010f24:	003ff206 	br	2010ef0 <__call_exitprocs+0x13c>
 2010f28:	88800117 	ldw	r2,4(r17)
 2010f2c:	1000081e 	bne	r2,zero,2010f50 <__call_exitprocs+0x19c>
 2010f30:	89000017 	ldw	r4,0(r17)
 2010f34:	20000726 	beq	r4,zero,2010f54 <__call_exitprocs+0x1a0>
 2010f38:	b9000015 	stw	r4,0(r23)
 2010f3c:	8809883a 	mov	r4,r17
 2010f40:	00000000 	call	0 <__reset-0x2000000>
 2010f44:	bc400017 	ldw	r17,0(r23)
 2010f48:	883fb71e 	bne	r17,zero,2010e28 <__call_exitprocs+0x74>
 2010f4c:	003fc506 	br	2010e64 <__call_exitprocs+0xb0>
 2010f50:	89000017 	ldw	r4,0(r17)
 2010f54:	882f883a 	mov	r23,r17
 2010f58:	2023883a 	mov	r17,r4
 2010f5c:	883fb21e 	bne	r17,zero,2010e28 <__call_exitprocs+0x74>
 2010f60:	003fc006 	br	2010e64 <__call_exitprocs+0xb0>

02010f64 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2010f64:	defffd04 	addi	sp,sp,-12
 2010f68:	df000215 	stw	fp,8(sp)
 2010f6c:	df000204 	addi	fp,sp,8
 2010f70:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2010f74:	e0bfff17 	ldw	r2,-4(fp)
 2010f78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2010f7c:	e0bffe17 	ldw	r2,-8(fp)
 2010f80:	1005003a 	cmpeq	r2,r2,zero
 2010f84:	1000021e 	bne	r2,zero,2010f90 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2010f88:	002af070 	cmpltui	zero,zero,43969
 2010f8c:	00000106 	br	2010f94 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2010f90:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2010f94:	e037883a 	mov	sp,fp
 2010f98:	df000017 	ldw	fp,0(sp)
 2010f9c:	dec00104 	addi	sp,sp,4
 2010fa0:	f800283a 	ret

02010fa4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2010fa4:	defffd04 	addi	sp,sp,-12
 2010fa8:	dfc00215 	stw	ra,8(sp)
 2010fac:	df000115 	stw	fp,4(sp)
 2010fb0:	df000104 	addi	fp,sp,4
 2010fb4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2010fb8:	e13fff17 	ldw	r4,-4(fp)
 2010fbc:	2010f640 	call	2010f64 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2010fc0:	003fff06 	br	2010fc0 <_exit+0x1c>
 2010fc4:	00000010 	cmplti	zero,zero,0
 2010fc8:	00000000 	call	0 <__reset-0x2000000>
 2010fcc:	00527a01 	jmpi	527a0 <__reset-0x1fad860>
 2010fd0:	011f7c01 	jmpi	11f7c0 <__reset-0x1ee0840>
 2010fd4:	001b0c0b 	ldhu	zero,27696(zero)
 2010fd8:	00000028 	cmpgeui	zero,zero,0
 2010fdc:	00000018 	cmpnei	zero,zero,0
 2010fe0:	0200bb80 	call	200bb8 <__reset-0x1dff448>
 2010fe4:	0000066c 	andhi	zero,zero,25
 2010fe8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x140e440>
 2010fec:	910a9074 	orhi	r4,r18,10817
 2010ff0:	94089209 	0x94089209
 2010ff4:	97049606 	br	2012250 <alt_dev_null+0x14>
 2010ff8:	93019f03 	ldbu	r12,1660(r18)
 2010ffc:	9c059507 	ldb	r16,5716(r19)
 2011000:	00000002 	0x2
 2011004:	00000028 	cmpgeui	zero,zero,0
 2011008:	00000044 	movi	zero,1
 201100c:	0200c1ec 	andhi	r8,zero,775
 2011010:	00000660 	cmpeqi	zero,zero,25
 2011014:	400e4400 	call	400e440 <__alt_data_end+0x180e440>
 2011018:	92099170 	cmpltui	r8,r18,9797
 201101c:	96069408 	cmpgei	et,r18,6736
 2011020:	9c039704 	addi	r16,r19,3676
 2011024:	90019f02 	0x90019f02
 2011028:	9507930a 	0x9507930a
 201102c:	00000005 	stb	zero,0(zero)
 2011030:	02010db0 	cmpltui	r8,zero,1078
